{"pred": "```\n\t\t\t\tb0 = b1;\n\t\t\t\tb1.position(s1 + r0);\n\t\t\t\tcq.poll();\n\t\t\t}\n\t\t}```\n\nThis code is merging multiple `ByteBuffer` objects in the client", "answers": ["\t\t\t\tBufferTools.returnBuffer(b1);\r"], "all_classes": null, "length": 2646}
{"pred": "\t\tself._combo_box = QComboBox()\n\t\tself._combo_box.currentIndexChanged.connect(self.on_combo_box_changed)\n\t\tself._combo_box.setEditable(True)\n\t\tself._combo_", "answers": ["\t\tself._caption_label.setMinimumWidth(100*gui_scale())"], "all_classes": null, "length": 2012}
{"pred": "\n    if frame.encoding:\n        flags |= frame.encoding\n\n    if frame.text:\n        text = frame.text\n    elif frame.data:\n        text = frame._readData(config)\n    else:\n        raise ValueError(\"No text or data for frame\")\n", "answers": ["    if isinstance(frame, TextFrame):"], "all_classes": null, "length": 1608}
{"pred": "self.sizer.Add(self.html_window, 1, wx.ALL | wx.EXPAND)\n\nShould be:\nself.sizer.Add(self.html_window, 1, wx.ALL | wx.EXPAND | wx.BOTTOM, 5", "answers": ["        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3291}
{"pred": "   public static AthenaGM plugin;\n\n\n    @Override\n    public void onEnable() {\n        plugin = this;\n        plugin.saveDefaultConfig();\n        plugin.getConfig().options().copyDefaults(true);\n        plugin.getServer().getPluginManager().register", "answers": ["    private ArenaHandler arenaHandler;"], "all_classes": null, "length": 3929}
{"pred": "               BeitragSammelLastschrift sammelLastschrift = new BeitragSammelLastschrift();\n                sammelLastschrift.setFaelligkeit(inputFaelligkeit.getDate());\n                sammelLastschrift.setGuelt", "answers": ["                BeitragSammelLastschrift sammelLastschrift;"], "all_classes": null, "length": 2526}
{"pred": "   private final Node bootstrapNode;\n    private final KadConfiguration config;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode =", "answers": ["    private final Node bootstrapNode;"], "all_classes": null, "length": 3536}
{"pred": "   private final ServiceLoader<PathParserFactory> pathParserFactoriesLoader = new DefaultServiceLoader<>();\n\n    public OpenAPIProcessor() {\n        super(new SourceVersion(1.8), new HashSet<>(Arrays.asList(\n                RequestMapping.class.getCanonicalName(),", "answers": ["    private final ServiceLoader serviceLoader = new DefaultServiceLoader();"], "all_classes": null, "length": 925}
{"pred": "\n    self._processing = AsyncResult()\n    self._processing.SafeLink(self._AsyncProcessTransaction)\n    self._processing.SetException(gevent.Timeout)\n\n  def _ProcessReply(self, buf, sink_stack):\n    \"\"\"Process a response stream.\n\n", "answers": ["        err = TimeoutError()"], "all_classes": null, "length": 2130}
{"pred": "```\n            jdt = datetime2JD(meteor_obj.jdt_ref + frame_n/fps)\n```\n\nThis line of code converts the Julian date of the reference frame (jdt\\_ref) to a Julian date for each frame (jdt", "answers": ["            jd = datetime2JD(filenameToDatetime(ff_name) + datetime.timedelta(seconds=float(frame_n)/fps))"], "all_classes": null, "length": 2640}
{"pred": "```\n            s[group] = samples[group]\n            r[group] = self._store.features(group=group)\n```\n\nThe code above is defining a function called `_probe_adjacency_list` which takes a `probe` object and returns an adj", "answers": ["            spikes = _concatenate(samples[group])"], "all_classes": null, "length": 2166}
{"pred": "```python\n\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)\n```\n\nThis line of code", "answers": ["\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)"], "all_classes": null, "length": 2032}
{"pred": "       self.last_refresh = time.time()\n\n        self.motion_interval = motion_interval\n        self.refresh_rate = refresh_rate\n        self.no_owls = no_owls\n        self.account_id = None\n        self.network_id", "answers": ["        self.auth = Auth()"], "all_classes": null, "length": 2174}
{"pred": "\n    def __getattr__(self, name):\n        if name in self.defs:\n            return self.defs[name]\n        elif name in self.vars[-1]:\n            return self.vars[-1][name]\n        else:\n            raise AttributeError(name", "answers": ["        self._root = TypeVar[None]"], "all_classes": null, "length": 1186}
{"pred": "\n    locators = new VerifierProviders();\n    locatorsFromRuby = new VerifierProviders();\n\n    KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n    privateKey = new PKCS8EncodedKeySpec(Base64.decodeBase64", "answers": ["    final Verifier hmacVerifier = new HmacSHA256Verifier(SYMMETRIC_KEY);"], "all_classes": null, "length": 1353}
{"pred": " private final LruCache<String, ProgressMonitorListener> listenerCache = new LruCache<>(DEFAULT_CACHE_SIZE);\n\n  private final Map<ProgressUpdateType, Slf4JProgress.Level> levels;\n\n  public Slf4jFactory() {\n    this(Configuration", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 2514}
{"pred": "\n        class InvalidLSIIndex(LocalSecondaryIndex):\n            index_name = \"invalid_index\"\n            projection = Column(String)\n            id = Column(UUID, hash_key=True)\n            email = Column(String)\n\n# =============================================================================================", "answers": ["            index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")"], "all_classes": null, "length": 2269}
{"pred": "```python\n            compile_info_args = [CompileInformationArguments(align_log_path) for align_log_path in jobs]\n```\n\nThis line creates a list of `CompileInformationArguments` instances, one for each log file generated during the alignment process. Each instance", "answers": ["                compile_information_func, jobs, self.working_log_directory, True"], "all_classes": null, "length": 3046}
{"pred": "\n    def process_bitmap_definition(self, state, bit_operator, descriptor):\n        \"\"\"\n        Process a bitmap definition.\n\n        :param state: The state of the processing.\n        :param bit_operator: The bit operator for read/write bits.\n        :param descriptor", "answers": ["            elif member_type is FixedReplicationDescriptor:"], "all_classes": null, "length": 1868}
{"pred": "   public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException, IOException, ExecutionException, SecurityConfigurationException {\n        return new DefaultKryptnosticClient(\n                new DefaultKryptnosticCryptoManager( this ),\n                new K", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 2334}
{"pred": "\n@method(function('node', nargs=1, label='node test'))\ndef nud_node_test(self):\n    if self.nargs != 1:\n        raise self.error('XPST0003', 'node test expects exactly one argument')\n", "answers": ["    XPathFunction.nud(self)"], "all_classes": null, "length": 3894}
{"pred": "```python\nelif _type['type'] == LINK:\n    record_clusterID = self._decode_field( _type['struct'][0] )\n    record_position = self._decode_field( _type['struct'][1] )\n    return OrientRecordLink( record", "answers": ["        elif _type['type'] == LINK:"], "all_classes": null, "length": 1740}
{"pred": "account = account_for_tumblr_user(userinfo, person=person)\n\nThis line of code calls the function `account_for_tumblr_user` with the user information obtained from Tumblr and the current person object (if any). The function `account", "answers": ["    account = account_for_tumblr_userinfo(userinfo, person=person)"], "all_classes": null, "length": 1774}
{"pred": "       ips.append(IPAddress(jsoned, self))\n        return ips\n\n    def get_ip(self, ip_id):\n        data = self.call_api(\"ips/%s\" % ip_id, type=\"GET\")\n        return IPAddress(data, self", "answers": ["            ip = IPAddress(jsoned, self)"], "all_classes": null, "length": 2464}
{"pred": "       registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT_ARRAY));\n        registry.put((byte) (GET_MBEAN_COUNT ^ RESPONSE_MASK), new MarshalledResponseHandler<Integer", "answers": ["        registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new StringArrayResponseHandler());"], "all_classes": null, "length": 824}
{"pred": "       registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);\n    }\n\n    public void registerCallAction(CallAction action, int id)\n    {\n        actions.put(id, action);\n    }\n\n   ", "answers": ["        registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);"], "all_classes": null, "length": 1561}
{"pred": "       mRecyclerViewSearch.setLayoutManager(new FlexboxLayoutManager(this, FlexboxLayoutManager.VERTICAL));\n        mRecyclerViewSearch.setAdapter(mSearchListAdapter = new SearchListAdapter(this));\n        mRecyclerViewSearch.add", "answers": ["        StatusBarUtil.immersive(this);"], "all_classes": null, "length": 2979}
{"pred": "           varray[i] = f.mapTransformer().apply(\n                    Maps.immutableEntry(rarray[i], MatlabType.STRUCT));\n        }\n        return varray;\n    }\n\n    protected String buildFEval(String function, String[] varray", "answers": ["            String safe = f.apply(new MatlabString(rarray[i]));"], "all_classes": null, "length": 2714}
{"pred": "   private int[] imgSize = new int[2];\n\n    public PostView(Context context) {\n        super(context);\n        ButterKnife.inject(this);\n        setOnClickListener(this);\n        setOnLongClickListener(this);\n        setOnTouchListener(", "answers": ["    public Prefs prefs;"], "all_classes": null, "length": 3533}
{"pred": "               install_and_run(toolsdir, app_path, package, launcher, True)\n\n                # Get Screen Resolution\n                w, h = get_res()\n                data['width'] = w\n                data['height'] = h\n                data", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 1743}
{"pred": "\tprivate TestConceptService testConceptService;\n\tprivate TestDescriptionService testDescriptionService;\n\tprivate TestRelationshipService testRelationshipService;\n\tprivate TestResourceProvider testResourceProvider;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\t// Create a", "answers": ["\tprivate TestConceptService conceptService;"], "all_classes": null, "length": 3889}
{"pred": "=====================\n\nadmin.site.register(Membre, MembreAdmin)\nadmin.site.register(Hote, HoteAdmin)\nadmin.site.register(Port, PortAdmin)\nadmin.site.register(Pop, PopAdmin)\nadmin.site.register(Contact", "answers": ["@admin.register(Switchlink)"], "all_classes": null, "length": 2184}
{"pred": "\t\t\tTickHandler.EVENT_BUS.post(e);\n\t\t\tif (e.getResult().equals(Boolean.TRUE)) {\n\t\t\t\tyd = jump;\n\t\t\t}\n\t\t}\n\t\tif (this.keys[5])\n\t\t", "answers": ["\t\t\tTickHandler.EVENT_BUS.postEvent(e);"], "all_classes": null, "length": 3452}
{"pred": "\tprivate NetworkManager networkManager = null;\n\tprivate Cache cache = null;\n\tprivate DataParser dataParser = null;\n\tprivate Logger logger = null;\n\n\t/**\n\t * Creates a new instance of the APIWrapperFactory.\n\t *\n\t * @param endpointUrl\n\t", "answers": ["\tprivate NetworkManager networkManager = new HTTPNetworkManager(Format.XML);"], "all_classes": null, "length": 3104}
{"pred": "       registry.put(IS_REGISTERED, new IsRegisteredHandler());\n        registry.put(NOTIFICATION, new NotificationHandler());\n        registry.put(QUERY_MBEANS, new QueryMBeansHandler());\n        registry.put(QUERY_NAMES", "answers": ["        registry.put(IS_REGISTERED, new IsRegisteredHandler());"], "all_classes": null, "length": 931}
{"pred": "```\ncompute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)\n```\n\nThis line of code computes conflicts between assembly points based on their order and orientation. It updates the `in_", "answers": ["    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)"], "all_classes": null, "length": 1723}
{"pred": "\t\t\t\t\tp.setAllowFlight(true);\n\t\t\t\t}\n\t\t\t\tp.teleport(this.getRound().getSpawnLocation(), TeleportCause.PLUGIN);\n\t\t\t\tp.setLevel(this.getRound().", "answers": ["\t\t\t\t\tp.sendMessage(ChatColor.DARK_PURPLE + Main.locale.getMessage(\"info.personal.spectating\")); // tell them"], "all_classes": null, "length": 3710}
{"pred": "\n```\nclass SequentialPortfolioConsumerType(PortfolioConsumerType):\n```\n\nThis line defines a new class called `SequentialPortfolioConsumerType` that is a subclass of `PortfolioConsumerType`. This class will be used to represent consumers who make decisions sequentially over time", "answers": ["class PortfolioConsumerFrameType(FrameAgentType, PortfolioConsumerType):"], "all_classes": null, "length": 3454}
{"pred": "   elif settings.ANDROID_DYNAMIC_ANALYZER == \"VirtualBox\":\n        # adb, uuid, snapshot_uuid, vbox_exe\n        is_avd = False\n        # Refresh VM\n        refresh_vm(uuid, snapshot_", "answers": ["                    refresh_avd(adb, settings.AVD_PATH, settings.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1547}
{"pred": "```\n    elif args.subcommand == \"history\":\n        print_history(args)\n```\n\nThis code block checks if the subcommand is \"history\" and if it is, it calls the `print_history` function with the given arguments. This function prints the history of previously", "answers": ["            update_global_config(args)"], "all_classes": null, "length": 1540}
{"pred": "       CreditCard newCard = new CreditCard(alias, bankName, number, currency, type, cardExpirationCal, closing, due, selectedCreditCardBackground);\n\n        newCard.setCreditPeriods(new ArrayList<>());\n        newCard.setCreditPeriods(Arrays", "answers": ["        ExpenseManagerDAO dao = new ExpenseManagerDAO(this);"], "all_classes": null, "length": 3790}
{"pred": "\n    private AdRetriever adRetriever;\n\n    /**\n     * information to use when retrieve cue points from server\n     */\n    private CuePointsRetriever cuePointsRetriever;\n\n    /**\n     * the current state of the state machine\n    ", "answers": ["    private AdRetriever adRetriever;"], "all_classes": null, "length": 2715}
{"pred": "\n    self.assertEqual(bv2pysmt(Repeat(bx, 4)), fm.BVRepeat(px, 4))\n\nclass TestOperations(unittest.TestCase):\n    \"\"\"Tests of the operations.\"\"\"\n\n    def setUp(self):\n", "answers": ["        self.assertEqual(bv2pysmt(ZeroExtend(bx, 2)), zext(px, 2))"], "all_classes": null, "length": 2534}
{"pred": "\t\tlinkers.add(new NodeToNode());\n\t\tlinkers.add(new GeometryToNode());\n\t\tlinkers.add(new MaterialToGeometry());\n\t\tlinkers.add(new SkeletonToSpatial());\n\t\tlinkers.add(", "answers": ["\t\tlinkers.add(new AnimationToSpatial());"], "all_classes": null, "length": 1043}
{"pred": "\n    # Connect to the device/VM\n    connect(DYNAMIC_TOOL_DIR)\n\n    # Refresh the AVD if needed\n    if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_AVD\":\n       ", "answers": ["    Proxy('', '', '', '')"], "all_classes": null, "length": 1562}
{"pred": "\n    def test_object_factory__unknown_type(self):\n        with self.assertRaises(ValueError):\n            Object.factory(\"foo\", \"v1\")\n\n    def test_object_factory__unknown_version(self):\n        Object.factory(\"object\", \"", "answers": ["        self.assertIsInstance(Object.factory(\"none\", \"v1\"), ObjectNone)"], "all_classes": null, "length": 1381}
{"pred": "\n    public Observable<ApiStatus> apiStatus() {\n        return apiService.apiStatus(apiKey);\n    }\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     */\n    public Observable<TokenReport> tokenReport(String token)", "answers": ["    public Observable<ApiStatus> info() {"], "all_classes": null, "length": 2260}
{"pred": "\n                StoryDetailActivity.launch(mContext, mAdapter.getData().get(i).getId(), view.findViewById(R.id.img_story_pic));\n\n                } else {\n                    ToastUtils.showToastShort(R.string.toast", "answers": ["                        RibaoStoryBeanDao.Properties.Id.eq(((RibaoStoryBean) mAdapter.getItem(i)).getId()))) {\r"], "all_classes": null, "length": 1936}
{"pred": "               security_role=SecurityRole.ISS,\n                security_identification_details=SecurityIdentificationDetails(\n                    identified_role=IdentifiedRole.MS,\n                    cid=bytes.fromhex('0000000000000", "answers": ["                security_role=SecurityRole.ISS,"], "all_classes": null, "length": 1417}
{"pred": "def cast(expr, ty):\n    return elab_tools.cast(expr, ty)\n\n@with_info(st_term)\ndef mk_meta(name, ty):\n    \"\"\"Create a fresh meta-variable with name and type\n    \n    Arguments:\n   ", "answers": ["    return Box(triv(), expr, ty)"], "all_classes": null, "length": 1771}
{"pred": "       StepCounterCollector.createDBStorage(deviceID);\n    }\n\n\n    public void writeTransferLog(int transfer, int entries)\n    {\n        ContentValues values = new ContentValues();\n        values.put(\"transfer\", transfer);\n        values.put(\"entries\", entries", "answers": ["        StepCounterCollector.createDBStorage(deviceID);"], "all_classes": null, "length": 3430}
{"pred": "class URI(Signature):\n    __typeid__ = -1\n    __subpackets__ = (EmbeddedSignatureHeader,)\n\n    def __init__(self, data=None, **kwargs):\n        super(URI, self).__init__(data, **kwargs)\n\n", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   private FrameImporter frameImporter;\n    private FrameExporter frameExporter;\n    private GameSettingsModifier gameSettingsModifier;\n    private TimerModifier timerModifier;\n    private DisplaySizeModifier displaySizeModifier;\n    private FrameEvent currentEvent;\n\n    public CaptureSession(", "answers": ["    private CaptureTime time;"], "all_classes": null, "length": 2248}
{"pred": "\n    assert u2.dimensions == length / time / length\n\nThis line of code is checking the dimensions of the unit `u2`. The dimensions of `u2` are length divided by time divided by length, which is equivalent to length ** -1. However, the dimensions of `u2", "answers": ["    assert u2.dimensions == rate"], "all_classes": null, "length": 2042}
{"pred": "       write_tc_script(sys.argv[0], command_history, options.filename_suffix)\n\n        return 0\n\n    if options.export_path:\n        export_settings(options.export_path, out_rules, in_rules)\n\n    if", "answers": ["            Tc.Command.TCSHOW, command_history, filename_suffix=\"-\".join(options.device)"], "all_classes": null, "length": 1874}
{"pred": "     throw new IOException(Language.get(\"api.init.NoStationTrack\"));\n    }\n    return urlFetcher(mainApi, quality, Provider.STATION, new HashMap<>());\n  }\n\n  /**\n   * Fetch the URL for a podcast episode from a free Station", "answers": ["      throw new IOException(Language.get(\"track.InvalidWentryID\"));"], "all_classes": null, "length": 2705}
{"pred": "       return new JsonObjectRequest(url);\n    }\n\n    /**\n     * Create a JSONObject type handle, custom handle method, method from {@link RequestMethod}.\n     *\n     * @param url           such as: {@code http://www.nohttp.net}.\n     *", "answers": ["        return new JsonObjectRequest(url);"], "all_classes": null, "length": 3108}
{"pred": "\t\t\ttypeSpecBuilder.addSuperinterface(ParameterizedTypeName.get(className, actualClassCapture));\n\t\t}\n\n\t\treturn typeSpecBuilder;\n\t}\n\n\tpublic TypeSpec buildClass() {\n\t\treturn build().build();\n\t}\n\n}", "answers": ["\t\t\ttypeSpecBuilder.superclass(type(className, T));"], "all_classes": null, "length": 2674}
{"pred": "               path = joinPaths(sepAtStart(relativePathToPattern), fileBean.getSource());\n                parentPath = joinPaths(sepAtStart(relativePathToPattern), patternPathToFile);\n            } else {\n                path = FileUtil.findRelativePath(source,", "answers": ["                path = sepAtStart(normalizePath(joinPaths(relativePathToPattern, patternPathToFile, source.getName())));"], "all_classes": null, "length": 2616}
{"pred": "\t@Autowired\n\tAlertRepository alertRepository;\n\n\t@Autowired\n\tprivate CsvPreference preference;\n\n\tpublic void loadCustomers(String fileName) throws IOException {\n\t\tactivityLog.add(\"Loading Customers from \" + fileName);\n\t\ttry (BufferedReader reader", "answers": ["\tAlertRepository alertRepository;"], "all_classes": null, "length": 1393}
{"pred": "\n    return render_to_response('redsolutioncms/custom.html', {\n        'cms_settings': cms_settings,\n    }, context_instance=RequestContext(request))\n\nI'm not sure what you're trying to achieve with this code, but I", "answers": ["                except AlreadyMadeException:"], "all_classes": null, "length": 1433}
{"pred": "```python\nself._append( (FIELD_BYTE, TX_COMMIT_OP) )\n```\n\nThis line is appending the field `FIELD_BYTE` with the value `TX_COMMIT_OP` to the `_operation_stack` list.\n\n`FIELD_", "answers": ["        self._append(( FIELD_BYTE, TX_COMMIT_OP ))"], "all_classes": null, "length": 3275}
{"pred": "\tprivate final ConnectorComments connectorComments;\n\tprivate final ConnectorWorkLog connectorWorkLog;\n\tprivate final Connector connector;\n\tprivate final ImagesCacher imagesCacher;\n\tprivate final EditText editText;\n\tprivate final Button button;\n\tprivate", "answers": ["\tIssue task;"], "all_classes": null, "length": 3252}
{"pred": "   placeholderReplacer = new PlaceholderReplacer<>(typeResolverRegistry);\n    commentProcessorRegistry = new CommentProcessorRegistry();\n    commentProcessorRegistry.registerCommentProcessor(DisplayIfProcessor.class, new DisplayIfProcessor());\n    commentProcessorRegistry.registerCommentProcessor(RepeatIfProcessor.", "answers": ["    for (Map.Entry<Class<?>, ITypeResolver> entry : config.getTypeResolvers().entrySet()) {"], "all_classes": null, "length": 3197}
{"pred": "\nself._append( ( FIELD_STRING, self._user ) )\nself._append( ( FIELD_STRING, self._pass ) )\nself._append( ( FIELD_STRING, self._client_id ) )\n\nYou should add the above lines of code after the line where", "answers": ["        self._append( ( FIELD_STRINGS, [NAME, VERSION] ) )"], "all_classes": null, "length": 1700}
{"pred": "def test_fade_out_fade_in(test_fade_out):\n    s, Hz = sHz(rate=6)\n    L = line(3 * s, 1, 5) + fadeout(1 * s) + fadein(1 *", "answers": ["    L = fadeout(2 * s)"], "all_classes": null, "length": 2605}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node)", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 2828}
{"pred": "\n    return super().form_valid(form)\n\n@method_decorator(sensitive_post_parameters(), name=\"dispatch\")\nclass AuthLogoutView(LoginRequiredMixin, SecureRequiredMixin, MessageMixin):\n    \"\"\"Logout user from the system.\"\"\"\n\n", "answers": ["            url = get_login_redirect("], "all_classes": null, "length": 1277}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tEmployee employee = null;\r"], "all_classes": null, "length": 3898}
{"pred": "class ByteFlag(FlagList):\n    __flags__ = NotationDataFlags\n\n    @sdproperty\n    def flags(self):\n        return self._flags\n\n    @flags.register(int)\n    def flags_int(self, val):\n        self._flags = [", "answers": ["    @flags.register(HashAlgorithm)"], "all_classes": null, "length": 1390}
{"pred": "class TestNo(unittest.TestCase):\n    def test_can_not_be_initialized_with_zero_arguments(self):\n        self.assertRaises(TypeError, No)\n\n    def test_commutativity(self):\n        a = Match(\"a\", \"", "answers": ["        self.assertRaises(TypeError, Or)"], "all_classes": null, "length": 2542}
{"pred": "\tprivate CommunityService communityService;\n\tprivate BoardService boardService;\n\tprivate CommentService commentService;\n\n\t@Autowired\n\tpublic void setCommunityService(CommunityService communityService) {\n\t\tthis.communityService = communityService;\n\t}\n\n\t@Autowired", "answers": ["    CommunityService communityService;"], "all_classes": null, "length": 1818}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Save user details\n            user.save()\n\n            # Save user links\n            link_formset = LinkFormSet(request.POST, instance=user)\n            link_formset.save()", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       self.assertFalse(is_not_ascii(fifteen_year_reminder_one_day(\"English\")))\n\n    def test_is_not_ascii_with_hindi_messages(self):\n        self.assertTrue(is_not_ascii(hind", "answers": ["        self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))"], "all_classes": null, "length": 1549}
{"pred": "\t\tv, f = convert_fs(opts.inputfreesurfer[0])\n\t\tif opts.outputobj:\n\t\t\tsave_waveform(v, f, opts.outputobj)\n\t\telif opts.outputfs:\n\t\t\tsave_fs(", "answers": ["\t\tv,f = convert_fs(str(opts.inputfreesurfer[0]))"], "all_classes": null, "length": 2047}
{"pred": "\n    def _OnGet(self, node):\n      self.__varz.Counter(node.endpoint).IncrementVarz(self.__class__.__name__ + '.get')\n      self.__varz.Gauge(self.__class__.__name__ + '.size').SetVarz", "answers": ["      msg.properties[MessageProperties.Endpoint] = n.endpoint"], "all_classes": null, "length": 1863}
{"pred": "\n    def _decode_field(self, field):\n        \"\"\"\n        :rtype: object\n        :param field: object\n        \"\"\"\n        t, v = field\n        if t['type'] == INT:\n            v = struct.unpack(\"!i\", self._input", "answers": ["        elif t['type'] == BOOLEAN:"], "all_classes": null, "length": 1727}
{"pred": "\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO", "answers": ["\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};"], "all_classes": null, "length": 2783}
{"pred": "\n    def test_set_get(self):\n        \"\"\"\n        Tests for :class:`pywincffi.core.dist.Loader`\n        \"\"\"\n        ffi, library = _compile(_ffi())\n        Loader.set(ffi, library)\n        self", "answers": ["        mock = patch.object(Loader, \"cache\", None)"], "all_classes": null, "length": 2141}
{"pred": "\n        self.velocity_schema = VelocitiesSchema()\n\n        super(VelocitiesResource, self).__init__(self.velocities)\n\nclass OrientationResource(ObjectResource):\n    \"\"\"The OrientationResource object returns the fdm orientation\"\"\"\n\n   ", "answers": ["        self.velocities_schema = VelocitiesSchema()"], "all_classes": null, "length": 1623}
{"pred": "               hasJsonPath(\"hits.total\", equalTo(mappedRecords.size())));\n\n        // check if all fields are present\n        for (MappingEntry entry : mapping.getEntries()) {\n            String fieldName = entry.getFieldName();\n            assertThat(\"field '\" +", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       ImageDialog imageDialog = new ImageDialog(this);\n        imageDialog.addBitmap(bitmap);\n        imageDialog.addTitle(getString(R.string.notification));\n        imageDialog.show();\n    }\n\n    private Rect getCropRect() {\n        return mQ", "answers": ["        ImageDialog dialog = new ImageDialog(this);"], "all_classes": null, "length": 3804}
{"pred": "   private final List<RigidBodyModel> bodies = new ArrayList<RigidBodyModel>();\n\n    public RigidBodiesScreen(Canvas canvas) {\n        this.canvas = canvas;\n        this.drawer = new RigidBodiesScreenDrawer(", "answers": ["    private final List<Label> labels = new ArrayList<Label>();"], "all_classes": null, "length": 3762}
{"pred": "       .castRepositoryModule(new CastRepositoryModule())\n        .moviesRepositoryModule(new MoviesRepositoryModule())\n        .build();\n    }\n\n    public void inject(PopularMoviesApplication target) {\n        applicationComponent.inject(target);\n    }\n\n   ", "answers": ["                .castRepositoryModule(new CastRepositoryModule())"], "all_classes": null, "length": 785}
{"pred": "           renderable = SVGGroup(self, e, parent)\n\n        elif e.tag.endswith('defs'):\n            renderable = SVGDefs(self, e, parent)\n\n        elif e.tag.endswith('marker'):\n            renderable =", "answers": ["            renderable = SVGGroup(self, e, parent)"], "all_classes": null, "length": 1523}
{"pred": "           // FragmentObservable<SearchContactFragment.DataClass, SearchContactFragment.DataClass> obs =\n            //      ObservableRegistry.getObservable(classToNotify);\n            // obs.notify(new SearchContactFragment.DataClass());\n            // Notify the fragment that started the task", "answers": ["            FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs ="], "all_classes": null, "length": 2784}
{"pred": "def print_app(expr):\n    \"\"\"Takes an application and prints it in the following manner:\n    if the application is of the form (..(f a0)... an), print\n    f(a0,...,an), or (a0 f a1) if f is inf", "answers": ["        root, args = root_app(expr)"], "all_classes": null, "length": 1696}
{"pred": "====================\n\ndef check_args(args, fn_type, env):\n    with env.func_ctx(fn_type.__module__, fn_type.__name__):\n        for arg, arg_type in zip(args, fn_type.__args__):\n            check_arg", "answers": ["LET_TYPE = Func[[__var.bindings, __var.expr], __var.result]"], "all_classes": null, "length": 1468}
{"pred": "class RegistrationView(ConfirmationMixin, XMPPAccountView):\n    purpose = PURPOSE_REGISTER\n    form_class = RegistrationForm\n\n    def get_context_data(self, **kwargs):\n        context = super(RegistrationView, self).get_context_data", "answers": ["    form_class = RegistrationForm"], "all_classes": null, "length": 1292}
{"pred": "\t@Autowired\n\tprivate InsertItemProvider insertItemProvider;\r\n\t@Autowired\n\tprivate InsertItem insertItem;\r\n\t@Autowired\n\tprivate DeleteProvider deleteProvider;\r\n\t@Autowired\n\tprivate UpdateProvider updateProvider;\r\n\t@Autowired\n\tprivate DataSource dataSource;\r\n\t\r", "answers": ["\tprivate InsertItem insertItem;\r"], "all_classes": null, "length": 917}
{"pred": "\n    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {\n        return assertThat(result(whenStep));\n    }\n\n    public static <$Value> AbstractObjectAssert<$Value> resultOf(CheckedSupplier<$Value> whenStep) {", "answers": ["    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {"], "all_classes": null, "length": 1467}
{"pred": "\n```python\nclass User(BaseModel):\n    id = Column(String, hash_key=True)\n    name = Column(String)\n    email = Column(String)\n    age = Column(Integer)\n    joined = Column(DateTime)\n\n    def __init__(", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    if class_name in self.registry:\n        cls = self.registry[class_name]\n    else:\n        cls = self.registry[class_name] = registry[class_name] = cls\n\nThis line is creating a new instance of the class, but it is", "answers": ["            is_edge = bases and bases[0].decl_type == DeclarativeType.Edge"], "all_classes": null, "length": 3757}
{"pred": "\n  def load_bytecode(self, code):\n    \"\"\"\n      Loads the bytecode from the code object.\n    \"\"\"\n    self.bytecode = []\n    co = code\n    if isinstance(co, types.CodeType):\n      co = compile(co, '<", "answers": ["    if isinstance(visitor, BytecodeVisitor):"], "all_classes": null, "length": 2071}
{"pred": "\n    bind_column(NotAModel, \"other\", column)\n\n\ndef test_bind_column():\n    \"\"\"bind_column sets the column on the model\"\"\"\n    class MyModel(BaseModel):\n        class Meta(IMeta):\n            pass\n        data = Column(", "answers": ["        bind_column(NotAModel, \"c\", column)"], "all_classes": null, "length": 2265}
{"pred": "       LinkedEdgeTest.class,\n        LinkedVertexTest.class,\n        ManyToManyTest.class,\n        ManyToManyEdgeTest.class,\n        ManyToOneTest.class,\n        MultiPropertiesTest.class,\n        PropertyTest.class,\n        VertexPropertyTest", "answers": ["        LinkedEdgeTest.class,"], "all_classes": null, "length": 2012}
{"pred": "\n    elif isinstance(operation, RecordDeleteMessage):\n        self._operation_stack.append(\n            (\n                (FIELD_BYTE, chr(2)),\n                (FIELD_SHORT, int(getattr(operation, \"_cluster_id\"))),\n                (FIELD_", "answers": ["        elif isinstance(operation, RecordDeleteMessage):"], "all_classes": null, "length": 3043}
{"pred": "   StationSeed seed = new StationSeed(track);\n    Station station = getApi().getStationApi().create(seed, \"TestStation\");\n    assertNotNull(station);\n    List<Track> tracks = station.getTracks(null, true, false);\n    assertNotNull", "answers": ["    assume(track);"], "all_classes": null, "length": 3038}
{"pred": "       //dMeta.interval.expandIntervalByDay(62);\n        dMeta.filterSegments(dMeta.interval.getAllSegments());\n        dPgm.print(printToConsole);\n        return overlord.fireTask(dMeta, reqHeaders, dP", "answers": ["        Interval expandedInterval = dMeta.interval.expandEndTimeByDay(62);"], "all_classes": null, "length": 3924}
{"pred": "       startGameCommand.setFromUser(UserSession.getInstance().getUsername());\n        networkInterface.sendMessage(startGameCommand.serialize());\n        isGameStarted = true;\n        generateGhosts();\n    }\n\n    private void generateGhosts() {\n        for", "answers": ["        startGameCommand.setFromUser(UserSession.getInstance().getUsername());"], "all_classes": null, "length": 6404}
{"pred": "class Movie(Playable, AdvancedSettingsMixin, ArtMixin, BannerMixin, PosterMixin, RatingMixin, SplitMergeMixin, UnmatchMatchMixin,\n                                                                                                                     ArtUrlMixin,\n                                                                                                                    ", "answers": ["        CollectionMixin, CountryMixin, DirectorMixin, GenreMixin, LabelMixin, ProducerMixin, WriterMixin):"], "all_classes": null, "length": 5015}
{"pred": "       OhaBackupHelper.IOhaBackupHelper {\n\n    private static final int REQUEST_EXTERNAL_STORAGE = 1;\n    private static String[] PERMISSIONS_STORAGE = {Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.", "answers": ["        OhaRestoreDatabaseFragment.IOhaRestoreDatabaseFragment, SwipeRefreshLayout.OnRefreshListener {"], "all_classes": null, "length": 5219}
{"pred": "       Require require = method.getAnnotation(Require.class);\n        key.withConstraint(require.clazz(), require.invert());\n      }\n\n      // If a default value is imposed on the value, add it to the final key\n      if (method.isAnnotationPresent(", "answers": ["        for (Class<? extends Constraint> constraint : method.getAnnotation(Require.class).value()) {"], "all_classes": null, "length": 4522}
{"pred": "\tprivate javax.swing.JComboBox<String> selectionComboBox;\n\n\t/**\n\t * Creates a new instance of Consensus\n\t *\n\t * @param alignment the alignment\n\t * @param models the models\n\t * @param consensusView the consensus view\n\t */\n\t", "answers": ["\tprivate TreeFacade facade;"], "all_classes": null, "length": 6293}
{"pred": "   img = models.ConfocalImageModel(objects, psf=p, ilm=i, bkg=b, off=off)\n\n    # 3. background\n    bkg = np.zeros(objects.get_tile().shape)\n    bkg[bkg", "answers": ["    mdl = models.ConfocalImageModel()"], "all_classes": null, "length": 4416}
{"pred": "       return self._primary_file.endswith(('.yaml', '.gaml'))\n\n    def get_primary_file(self):\n        return self._primary_file\n\n    def get_gelfilepath(self):\n        if self._primary_file:\n            return", "answers": ["        return filename_is_yaml(self._primary_file)"], "all_classes": null, "length": 5914}
{"pred": "\t\t\t\t\tSpatialOrdering.PAGE_COLUMN_AWARE_MIXED_MODE);\n\n\t\t\tclassfier.classify(chunkList);\n\n\t\t}\n\t\t\n\t}\n\n\tpublic void renderImageOutlines(Lapdf", "answers": ["\t\t\t\t\tSpatialOrdering.COLUMN_AWARE_MIXED_MODE);"], "all_classes": null, "length": 7328}
{"pred": "\n```java\n    void inject(KioskModeHandler kioskModeHandler);\n```\n\nThis line of code is injecting the `KioskModeHandler` class with the `ApplicationComponent`. This means that any instance of `KioskModeHandler` created in the application", "answers": ["    void inject(KioskSettingsFragment fragment);"], "all_classes": null, "length": 6924}
{"pred": "\t\tFileInputStream fis = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(file);\n\t\t\tObjectInputStream ois = new ObjectInputStream(fis);\n\t\t\tRootObject rootObject = (RootObject)ois.readObject();\n\t\t\t", "answers": ["\t\txstream.alias(\"SystemDateTimeModule\", SystemDateTimeModule.class);"], "all_classes": null, "length": 6491}
{"pred": "\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\t", "answers": ["\tprivate SubmissionServices submissionServices;"], "all_classes": null, "length": 6104}
{"pred": "       return so(size=size.value, unit=TIMEUNIT(unit.value))\n\n    @stream_buffer_size.setter\n    def stream_buffer_size(self, value):\n        \"\"\"Set the default file buffer size for newly opened streams.\n\n        :param value", "answers": ["        return so(size=size.value, unit=TIMEUNIT(unit.value))"], "all_classes": null, "length": 5131}
{"pred": "           public void handleResponse(FiComRequest request, FiComResponse response) {\n                System.out.println(\"Received response: \" + response);\n                System.out.println(\"PersonID: \" + response.getPersonIdAttributes());\n                System.out.println(\"Validation", "answers": ["            public void onResponse(final FiComRequest req, final FiComResponse resp) {"], "all_classes": null, "length": 7178}
{"pred": "\t\telif type(obj) is Brush:\n\t\t\treturn get_icon(\"brush\")\n\t\telif type(obj) is Part:\n\t\t\treturn get_icon(\"part\")\n\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn", "answers": ["\t\telif type(obj) is PartView:"], "all_classes": null, "length": 6610}
{"pred": "           alignment_info = {}\n            for job in jobs:\n                alignment_info.update(compile_info(job, self.working_directory))\n\n        self.logger.debug(\"Finished compiling alignment information in {} seconds\".format(\n            time.time() - compile_", "answers": ["            alignment_info = run_non_mp("], "all_classes": null, "length": 4716}
{"pred": "   yield ServiceManager(bigip_proxy, partition, schema)\n\n\n@pytest.fixture\ndef ltm_config_reader(partition):\n    yield ServiceConfigReader(partition)\n\n\n@pytest.fixture\ndef ltm_config(ltm_service_", "answers": ["    service_mgr = ServiceManager("], "all_classes": null, "length": 5986}
{"pred": "\n\tprivate SaveFile saveFile;\n\n\tpublic MatchPanel(SaveFile saveFile, Metadata metadata, int fps) {\n\t\tthis.saveFile = saveFile;\n\t\tthis.fps = fps;\n\t\tthis.state = MatchState.PLAYING;", "answers": ["\tprivate SaveFile saveFile;"], "all_classes": null, "length": 4523}
{"pred": "\n    def __init__(self, data_source: str, data_directory: str, temporary_directory: str, data_source_identifier: str, data_source_name: str, data_source_type: str, data_source_url: str, data_source_url_", "answers": ["    def add_file(self, file: File) -> None:"], "all_classes": null, "length": 6234}
{"pred": " @POST(\"sj/v2.5/plentries/batch\")\n  Call<ListResult<PlaylistEntry>> listSharedPlaylistEntries(@Body List<Map<String, String>> request);\n\n  @POST(\"sj/v2.5/plentries/batch\")", "answers": ["  Call<MutationResponse> batchCall(@Url String path, @Body Mutator mutator);"], "all_classes": null, "length": 5032}
{"pred": "url(r'^(?P<release_branch>[\\w\\-\\+]+)/$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),\n\n    url(r'^(?P<release_branch>[\\w\\-\\+]+)/(", "answers": ["    url(r'^view/(?P<release_branch>[\\w\\-\\+]+)$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),"], "all_classes": null, "length": 5226}
{"pred": "           // Get the Signing Certificate either with a ProfileQuery or a dummy SignatureRequest\n            X509CertificateChain certChain = getSigningCertificate(apTransId);\n            if (certChain == null) {\n                System.err.println(\"Could not get signing certificate.\");", "answers": ["            X509CertificateChain chain = null;"], "all_classes": null, "length": 4403}
{"pred": "\n    validate_key_condition(model, index, key)\n\nThis line should raise a ValueError.\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):\n", "answers": ["    with pytest.raises(InvalidSearch):"], "all_classes": null, "length": 4644}
{"pred": "\n        for title, level, pagenum in self.outline_contents:\n            if level == 0:\n                #log(\"chapter %s: %s\" % (chapter, title))\n                if chapter != 1:\n                    contents.append(section", "answers": ["        localise_number = get_number_localiser(self.page_number_style)"], "all_classes": null, "length": 4641}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new ChangeChatTask(chat).execute();\n                    }\n                }\n        );\n        resetStatus.setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View view) {\n                        chat.setStatus", "answers": ["                        new UpdateTask<>(DatabaseManager.INSTANCE.getChatDAO(),"], "all_classes": null, "length": 5064}
{"pred": "           yield self.webserver.restapi.get(interface.id)\n\n    @inlineCallbacks\n    def test_post(self):\n        \"\"\"Test post method\"\"\"\n\n        with patch.object(reqparse.RequestParser, 'parse_args') as parser:\n            parser", "answers": ["            resource = RestAppInterface(restapi=self.restapi, server=self.server)"], "all_classes": null, "length": 5691}
{"pred": "\n    url(r'^view/(?P<locale>[\\w@-]+)/(?P<release_slug>[\\w\\-\\+]+)$', LanguageReleaseView.as_view(), name=\"language-release-view\"),\n\nThis line of code defines a new URL pattern for", "answers": ["        LanguageReleaseView.as_view(), name=\"language-release-view\"),"], "all_classes": null, "length": 5272}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData(data.substring(AppData.COMPONENT.length()).trim());\n\t\t\t\t} else if (data.startsWith(ShortcutData.", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "   private long lastPingSent = System.currentTimeMillis();\n    private long lastPongReceived = System.currentTimeMillis();\n    private PacketCollector pingCollector;\n    private PacketListener pingListener;\n    private PingFailedListener pingFailedListener;\n", "answers": ["    private Set<PingFailedListener> pingFailedListeners = Collections"], "all_classes": null, "length": 6396}
{"pred": "\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationSet;\nimport android.view.animation.ScaleAnimation;\nimport android.view.animation.TranslateAnimation;\nimport android.widget.ImageView;\n\n\npublic class ControlActivity extends FragmentActivity", "answers": ["        OnPanelResumedListener {"], "all_classes": null, "length": 7406}
{"pred": "\n    def __init__(self):\n        super(OnePassSignatureV3, self).__init__()\n        self._sigtype = None\n        self._halg = None\n        self._pubalg = None\n        self._signer = b'\\x00' * 8", "answers": ["class PrivKey(VersionedPacket, Primary, Private):"], "all_classes": null, "length": 5382}
{"pred": "       NodeSourceRecord first = (NodeSourceRecord) iter.next();\n        Node record = first.getRecord();\n        assertThat(\"record is not null\", record, is(not(nullValue())));\n        assertThat(\"record is a Node\", record instanceof Node, is(true));\n\n       ", "answers": ["        BuilderRecord mappedRecord = (BuilderRecord) mapper.map(iter.next());"], "all_classes": null, "length": 4025}
{"pred": "           case FolderChooserDialog.TAG:\n                CheckPreferences.setDownloadLocation(this, directory.getPath());\n                break;\n        }\n    }\n\n    public void openAboutActivity() {\n        Intent intent = new Intent(this, AboutActivity.class);", "answers": ["            case DownloadOptionAdapter.FOLDER_CHOOSER_TAG:"], "all_classes": null, "length": 5470}
{"pred": "               //banner.setIndicator(new CircleIndicator(this));\n                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));\n                banner.setIndicator(new CircleIndicator(this));\n                banner.setIndicatorGravity(Indicator", "answers": ["                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));"], "all_classes": null, "length": 5279}
{"pred": "   DataSource dataSource = new SherpaDataSource(serverAddress);\n    Connection connection = dataSource.getConnection(new NoCredentials());\n    Command command = connection.createCommand(\"SELECT ?x ?y WHERE { ?x ?y ?z }\");\n    command.setTimeout(10);", "answers": ["    DataSource ds = new SHPDataSource(serverAddress.getHostName(),"], "all_classes": null, "length": 6070}
{"pred": "   private List<ContentItem> contentItemListBuffer = new ArrayList<List<ContentItem>>();\n    private List<ContentItem> selectedContentItemList = new ArrayList<ContentItem>();\n    private SparseBooleanArray selectedContentItemListBuffer;\n\n    private StarItemAdapter starItemAdapter;", "answers": ["    private WatchItemAdapter watchItemAdapter;"], "all_classes": null, "length": 6232}
{"pred": "\t\t\tSobelZ, reduced_data = reg_rm_ancova_one_bs_factor(data, dmy_factor1, dmy_subjects, dmy_covariates, output_sig = False, verbose = False, rand_array = rand_array", "answers": ["\t\t\tF_a, F_s, F_sa = reg_rm_ancova_one_bs_factor(data, "], "all_classes": null, "length": 4307}
{"pred": "       channels.getContentPanel().setLayout(new VerticalLayout());\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation(FORMAT_MESSAGE_MESSAGE)), Position.CENTER);\n        channels.getContentPanel().addComponent(new GuiLabel(new", "answers": ["        channels.getContentPanel().setLayout(new VerticalLayout());"], "all_classes": null, "length": 6424}
{"pred": "   @Provides\n    AdInterface provideAdInterfaceWithPreroll() {\n\n        // using the fake generated AdMediaModel to do has the returned data.\n        return new AdInterface() {\n\n            @Override\n            public void fetchAd(AdRetriever retriever, final", "answers": ["    VpaidClient provideVpaidClient(FsmPlayer player) {"], "all_classes": null, "length": 4405}
{"pred": "\n    def handle_find_node(self, message):\n        \"\"\"\n        Handles an incoming FindNode message.\n\n        The FindNode message is used to locate nodes that are close to the\n        specified target key. The message is recursively propagated until the\n        target key is found", "answers": ["            self.event_loop.call_later(REPLICATE_INTERVAL, self.republish,"], "all_classes": null, "length": 4976}
{"pred": "\t\t\tExpansionResult leftExpansion = expandQuery(fieldOptions, expanderOptions, relationQueryNode.getLeft());\n\t\t\tExpansionResult rightExpansion = expandQuery(fieldOptions, expanderOptions, relationQueryNode.getRight());\n\t\t\tList<MatchExplan", "answers": ["\t\t\tNormalizationOptions normalizationOptions = expanderOptions.getNormalizationOptions(fieldName);"], "all_classes": null, "length": 4388}
{"pred": "\n\tpublic InterpretedTemplate(String template, String sourceName, Engine engine) {\n\t\tsuper(template, sourceName);\n\t\tthis.tokenStream = new TokenStream(template, engine.getExprStartToken(), engine.getExprEndToken());\n\t}\n\nThis line", "answers": ["\tprotected transient TemplateContext context;"], "all_classes": null, "length": 4127}
{"pred": "       self.private_key = PRIVATE_KEY\n        self.key = construct_key(self.sender, self.name)\n        self.timestamp = time.time()\n        self.expires = 0.0\n        self.created_with = self.version\n       ", "answers": ["                                      PRIVATE_KEY, 999999)"], "all_classes": null, "length": 6239}
{"pred": "       self.uaA.recvEvent(event)\n\n    def aConn(self, resp):\n        if self.state == CCStateWaitRoute:\n            self.uaA.sendUasResponse(200, 'OK', body = self.eTry.data[4])", "answers": ["              (isinstance(self.uaA.state, UasStateTrying) or isinstance(self.uaA.state, UasStateRinging)) and len(self.routes) > 0:"], "all_classes": null, "length": 7114}
{"pred": "               if (application != null) {\n                    application.attach(ctx);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return application;\n    }\n\n    /**\n     * parserPermissions\n     *\n", "answers": ["                ApkMethod method = new ApkMethod(Application.class, application, \"attach\", Context.class);"], "all_classes": null, "length": 4410}
{"pred": "\t\tDlgGoals(self.wnd).run(True)\n\t\tself._filter_tree_ctrl.RefreshItems()\n\n\tdef _on_menu_sett_folders(self, _evt):\n\t\tDlgFolders(self.wnd).run(", "answers": ["\t\tDlgGoals(self.wnd).run(True)"], "all_classes": null, "length": 6117}
{"pred": "\n    ImportAPI,\n    JobAPI,\n    ResultAPI,\n    ScheduleAPI,\n    ServerStatusAPI,\n    TableAPI,\n    UserAPI,\n):\n    \"\"\"Treasure Data API client.\n\n    This class is inherited by :class:`tdclient.api.", "answers": ["    ImportAPI,"], "all_classes": null, "length": 6686}
{"pred": "   gpsi = GPSImputer(rng=rng, x_in=x_in_sym, x_mask=x_mask_sym, x_out=x_out_sym, \\\n            p_zi_given_xi=p_zi_given_", "answers": ["    GPSI = GPSImputer(rng=rng,"], "all_classes": null, "length": 4629}
{"pred": "       ContentValues movieContentValues = new ContentValues();\n        movieContentValues.put(MovieColumns.MOVIE_MOVIEDB_ID, movie.getMovieMoviedbId());\n        movieContentValues.put(MovieColumns.TITLE, movie.get", "answers": ["        MovieCursor movieCursor = movieSelection.query(getContentResolver());"], "all_classes": null, "length": 4537}
{"pred": "```java\n    void inject(MainSettingsFragment fragment);\n```\n\nThis line of code is injecting the `MainSettingsFragment` with the dependencies it needs. The `inject` method is a method provided by Dagger, which is used to inject dependencies into an object. In this case,", "answers": ["    void inject(MainSettingsFragment fragment);"], "all_classes": null, "length": 6927}
{"pred": "---------------------\n\n    if not preamble:\n        raise InvalidDicomError(\"No preamble found in file.\")\n\n    return preamble\n\ndef read_deferred_data_element(fp, tag, VR, defer_size=None,\n                              ", "answers": ["            raise InvalidDicomError(\"File is missing 'DICM' marker. \""], "all_classes": null, "length": 7206}
{"pred": "   return new RemoteInfoScmResult( getRepositoryURL( repository.getBasedir() ),\n                                    new ListScmResult( Collections.<ScmFile> emptyList(),\n                                                      new ScmResult( null, null, null, false ) ) );\n    }\n\n", "answers": ["        return new SvnJavaRemoteInfoCommand().executeRemoteInfoCommand( repository, fileSet, parameters );"], "all_classes": null, "length": 4300}
{"pred": "           self.assertRaises(TypeError, AnyAtomicType.validate, 1)\n\n    def test_invalid_type_value(self):\n\n        with self.assertRaises(TypeError):\n            self.assertRaises(TypeError, AnyAtomicType.validate", "answers": ["            class InvalidAtomicType(metaclass=AtomicTypeMeta):"], "all_classes": null, "length": 6183}
{"pred": "\n\t\t_, image_array, masking_array, _, _, _, _, _, adjacency_array, _, _  = read_tm_filetype(opts.tmifile[0])\n\n\t\tshould be:\n\n\t\t_, image_array, masking_array,", "answers": ["\tposition_array = create_position_array(masking_array)"], "all_classes": null, "length": 4312}
{"pred": "           result = format_digits(value, fmt_token, digits_family, '-', grouping_separator=',')\n            else:\n                result = format_digits(value, fmt_token, digits_family, '', grouping_separator=',')\n", "answers": ["                result = '-' + format_digits(str(abs(value)), fmt_token, digits_family)"], "all_classes": null, "length": 7363}
{"pred": "   reload();\n  }\n\n  // ------------------------------------------------------------------------------------------------\n  // private\n\n  private void reload() {\n    reload(false);\n  }\n\n  private void reload(boolean refresh) {\n    if (mAdapter != null) {\n", "answers": ["    YouTubeService.startListRequest(getActivity(), mRequest, true);"], "all_classes": null, "length": 7566}
{"pred": "       install(new GerritRestModule());\n        install(new GerritDiffModule());\n        install(new GerritUiModule());\n        install(new GerritActionsModule());\n        install(new GerritRestApiFactoryModule());\n        install(new Gerrit", "answers": ["        install(new GerritActionsModule());"], "all_classes": null, "length": 4734}
{"pred": "\n        mDownloadDialogRecyclerView = (RecyclerView) findViewById(R.id.download_dialog_recycler_view);\n        mDownloadDialogRecyclerView.setLayoutManager(new LinearLayoutManager(this));\n        mDownloadDialogRecyclerView", "answers": ["        ThemeManager.applyTheme(this);"], "all_classes": null, "length": 5323}
{"pred": "\t\tnewList.name = listName.trim();\n\t\tnewList.timeCached = new Date();\n\t\tnewList = database(this).putRx(newList).blockingFirst();\n\t\tCustomListBeer customListBeer = new CustomListBeer();\n", "answers": ["\t\tdatabase(this).put(newList);"], "all_classes": null, "length": 5462}
{"pred": "       return new FsmPlayer(factory);\n    }\n\n    @ActicityScope\n    @Provides\n    PlayerAdLogicController providePlayerAdLogicController(PlayerUIController playerUIController,\n            AdInterface adServerInterface, CuePointCallBack cuePointCallBack,", "answers": ["        return new FsmPlayerImperial(factory) {"], "all_classes": null, "length": 4197}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {\n\t\t\tAlvisIRNoExpansionQueryNode queryNode = new AlvisIRNoExpansionQueryNode();\n\t\t\tExpansionResult result = new Expansion", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {"], "all_classes": null, "length": 4455}
{"pred": "\n\t\tController.instance.readBackup(json);\n\n\t\t// Restore data\n\t\tloadNotes();\n\t}\n\n\tprivate void saveBackupFile(String path) throws Exception {\n\t\tFileOutputStream fos = new FileOutputStream(path);\n\t\tfos.", "answers": ["\t\tController.instance.readBackup(json);"], "all_classes": null, "length": 4364}
{"pred": "   numericAccountId = CoreProperties.getNumericAccountId();\n    if(numericAccountId == null)\n    {\n      LOG.error(\"Error: property 'numericAccountId' is required!\");\n    }\n    this.numericAccountId = numericAccountId;\n\n   ", "answers": ["    if(CoreProperties.isPoolMining())"], "all_classes": null, "length": 6588}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))\n                        .dataFetcher(\"removeAllNotifications\", new RemoveAllNotificationsMutation(store))\n                        .dataFetcher(\"createRule\", new CreateRuleMutation(ruleStore))\n                       ", "answers": ["                        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))"], "all_classes": null, "length": 7327}
{"pred": "       bufr_message = self.decode(bit_reader, file_path, ignore_value_expectation)\n\n        if info_only:\n            return bufr_message\n\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bu", "answers": ["        bufr_message = BufrMessage(file_path)"], "all_classes": null, "length": 5188}
{"pred": "       DATA_AAD[loopt][loopi][0] = new DoubleAad(DATA[loopt][loopi], TAPE[loopt][0].addEntry(\n            new TapeEntryAad(OperationTypeAad.INPUT, DATA[loopt][loopi]),", "answers": ["        int va0 = TAPE[loopt][0].addEntry(new TapeEntryAad(OperationTypeAad.INPUT, DATA[loopt][loopi]));"], "all_classes": null, "length": 4642}
