{"pred": "```\n\t\t\t\tb0 = b1;\n\t\t\t\tb1.position(s1 + r0);\n\t\t\t\tcq.poll();\n\t\t\t}\n\t\t}```\n\nThis code is merging multiple `ByteBuffer` objects in the client", "answers": ["\t\t\t\tBufferTools.returnBuffer(b1);\r"], "all_classes": null, "length": 2646}
{"pred": "\t\tself._combo_box = QComboBox()\n\t\tself._combo_box.currentIndexChanged.connect(self.on_combo_box_changed)\n\t\tself._combo_box.setEditable(True)\n\t\tself._combo_", "answers": ["\t\tself._caption_label.setMinimumWidth(100*gui_scale())"], "all_classes": null, "length": 2012}
{"pred": "\n    if frame.encoding:\n        flags |= frame.encoding\n\n    if frame.text:\n        text = frame.text\n    elif frame.data:\n        text = frame._readData(config)\n    else:\n        raise ValueError(\"No text or data for frame\")\n", "answers": ["    if isinstance(frame, TextFrame):"], "all_classes": null, "length": 1608}
{"pred": "self.sizer.Add(self.html_window, 1, wx.ALL | wx.EXPAND)\n\nShould be:\nself.sizer.Add(self.html_window, 1, wx.ALL | wx.EXPAND | wx.BOTTOM, 5", "answers": ["        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3291}
{"pred": "   public static AthenaGM plugin;\n\n\n    @Override\n    public void onEnable() {\n        plugin = this;\n        plugin.saveDefaultConfig();\n        plugin.getConfig().options().copyDefaults(true);\n        plugin.getServer().getPluginManager().register", "answers": ["    private ArenaHandler arenaHandler;"], "all_classes": null, "length": 3929}
{"pred": "               BeitragSammelLastschrift sammelLastschrift = new BeitragSammelLastschrift();\n                sammelLastschrift.setFaelligkeit(inputFaelligkeit.getDate());\n                sammelLastschrift.setGuelt", "answers": ["                BeitragSammelLastschrift sammelLastschrift;"], "all_classes": null, "length": 2526}
{"pred": "   private final Node bootstrapNode;\n    private final KadConfiguration config;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode =", "answers": ["    private final Node bootstrapNode;"], "all_classes": null, "length": 3536}
{"pred": "   private final ServiceLoader<PathParserFactory> pathParserFactoriesLoader = new DefaultServiceLoader<>();\n\n    public OpenAPIProcessor() {\n        super(new SourceVersion(1.8), new HashSet<>(Arrays.asList(\n                RequestMapping.class.getCanonicalName(),", "answers": ["    private final ServiceLoader serviceLoader = new DefaultServiceLoader();"], "all_classes": null, "length": 925}
{"pred": "\n    self._processing = AsyncResult()\n    self._processing.SafeLink(self._AsyncProcessTransaction)\n    self._processing.SetException(gevent.Timeout)\n\n  def _ProcessReply(self, buf, sink_stack):\n    \"\"\"Process a response stream.\n\n", "answers": ["        err = TimeoutError()"], "all_classes": null, "length": 2130}
{"pred": "```\n            jdt = datetime2JD(meteor_obj.jdt_ref + frame_n/fps)\n```\n\nThis line of code converts the Julian date of the reference frame (jdt\\_ref) to a Julian date for each frame (jdt", "answers": ["            jd = datetime2JD(filenameToDatetime(ff_name) + datetime.timedelta(seconds=float(frame_n)/fps))"], "all_classes": null, "length": 2640}
{"pred": "```\n            s[group] = samples[group]\n            r[group] = self._store.features(group=group)\n```\n\nThe code above is defining a function called `_probe_adjacency_list` which takes a `probe` object and returns an adj", "answers": ["            spikes = _concatenate(samples[group])"], "all_classes": null, "length": 2166}
{"pred": "```python\n\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)\n```\n\nThis line of code", "answers": ["\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)"], "all_classes": null, "length": 2032}
{"pred": "       self.last_refresh = time.time()\n\n        self.motion_interval = motion_interval\n        self.refresh_rate = refresh_rate\n        self.no_owls = no_owls\n        self.account_id = None\n        self.network_id", "answers": ["        self.auth = Auth()"], "all_classes": null, "length": 2174}
{"pred": "\n    def __getattr__(self, name):\n        if name in self.defs:\n            return self.defs[name]\n        elif name in self.vars[-1]:\n            return self.vars[-1][name]\n        else:\n            raise AttributeError(name", "answers": ["        self._root = TypeVar[None]"], "all_classes": null, "length": 1186}
{"pred": "\n    locators = new VerifierProviders();\n    locatorsFromRuby = new VerifierProviders();\n\n    KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n    privateKey = new PKCS8EncodedKeySpec(Base64.decodeBase64", "answers": ["    final Verifier hmacVerifier = new HmacSHA256Verifier(SYMMETRIC_KEY);"], "all_classes": null, "length": 1353}
{"pred": " private final LruCache<String, ProgressMonitorListener> listenerCache = new LruCache<>(DEFAULT_CACHE_SIZE);\n\n  private final Map<ProgressUpdateType, Slf4JProgress.Level> levels;\n\n  public Slf4jFactory() {\n    this(Configuration", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 2514}
{"pred": "\n        class InvalidLSIIndex(LocalSecondaryIndex):\n            index_name = \"invalid_index\"\n            projection = Column(String)\n            id = Column(UUID, hash_key=True)\n            email = Column(String)\n\n# =============================================================================================", "answers": ["            index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")"], "all_classes": null, "length": 2269}
{"pred": "```python\n            compile_info_args = [CompileInformationArguments(align_log_path) for align_log_path in jobs]\n```\n\nThis line creates a list of `CompileInformationArguments` instances, one for each log file generated during the alignment process. Each instance", "answers": ["                compile_information_func, jobs, self.working_log_directory, True"], "all_classes": null, "length": 3046}
{"pred": "\n    def process_bitmap_definition(self, state, bit_operator, descriptor):\n        \"\"\"\n        Process a bitmap definition.\n\n        :param state: The state of the processing.\n        :param bit_operator: The bit operator for read/write bits.\n        :param descriptor", "answers": ["            elif member_type is FixedReplicationDescriptor:"], "all_classes": null, "length": 1868}
{"pred": "   public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException, IOException, ExecutionException, SecurityConfigurationException {\n        return new DefaultKryptnosticClient(\n                new DefaultKryptnosticCryptoManager( this ),\n                new K", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 2334}
{"pred": "\n@method(function('node', nargs=1, label='node test'))\ndef nud_node_test(self):\n    if self.nargs != 1:\n        raise self.error('XPST0003', 'node test expects exactly one argument')\n", "answers": ["    XPathFunction.nud(self)"], "all_classes": null, "length": 3894}
{"pred": "```python\nelif _type['type'] == LINK:\n    record_clusterID = self._decode_field( _type['struct'][0] )\n    record_position = self._decode_field( _type['struct'][1] )\n    return OrientRecordLink( record", "answers": ["        elif _type['type'] == LINK:"], "all_classes": null, "length": 1740}
{"pred": "account = account_for_tumblr_user(userinfo, person=person)\n\nThis line of code calls the function `account_for_tumblr_user` with the user information obtained from Tumblr and the current person object (if any). The function `account", "answers": ["    account = account_for_tumblr_userinfo(userinfo, person=person)"], "all_classes": null, "length": 1774}
{"pred": "       ips.append(IPAddress(jsoned, self))\n        return ips\n\n    def get_ip(self, ip_id):\n        data = self.call_api(\"ips/%s\" % ip_id, type=\"GET\")\n        return IPAddress(data, self", "answers": ["            ip = IPAddress(jsoned, self)"], "all_classes": null, "length": 2464}
{"pred": "       registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT_ARRAY));\n        registry.put((byte) (GET_MBEAN_COUNT ^ RESPONSE_MASK), new MarshalledResponseHandler<Integer", "answers": ["        registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new StringArrayResponseHandler());"], "all_classes": null, "length": 824}
{"pred": "       registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);\n    }\n\n    public void registerCallAction(CallAction action, int id)\n    {\n        actions.put(id, action);\n    }\n\n   ", "answers": ["        registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);"], "all_classes": null, "length": 1561}
{"pred": "       mRecyclerViewSearch.setLayoutManager(new FlexboxLayoutManager(this, FlexboxLayoutManager.VERTICAL));\n        mRecyclerViewSearch.setAdapter(mSearchListAdapter = new SearchListAdapter(this));\n        mRecyclerViewSearch.add", "answers": ["        StatusBarUtil.immersive(this);"], "all_classes": null, "length": 2979}
{"pred": "           varray[i] = f.mapTransformer().apply(\n                    Maps.immutableEntry(rarray[i], MatlabType.STRUCT));\n        }\n        return varray;\n    }\n\n    protected String buildFEval(String function, String[] varray", "answers": ["            String safe = f.apply(new MatlabString(rarray[i]));"], "all_classes": null, "length": 2714}
{"pred": "   private int[] imgSize = new int[2];\n\n    public PostView(Context context) {\n        super(context);\n        ButterKnife.inject(this);\n        setOnClickListener(this);\n        setOnLongClickListener(this);\n        setOnTouchListener(", "answers": ["    public Prefs prefs;"], "all_classes": null, "length": 3533}
{"pred": "               install_and_run(toolsdir, app_path, package, launcher, True)\n\n                # Get Screen Resolution\n                w, h = get_res()\n                data['width'] = w\n                data['height'] = h\n                data", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 1743}
{"pred": "\tprivate TestConceptService testConceptService;\n\tprivate TestDescriptionService testDescriptionService;\n\tprivate TestRelationshipService testRelationshipService;\n\tprivate TestResourceProvider testResourceProvider;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\t// Create a", "answers": ["\tprivate TestConceptService conceptService;"], "all_classes": null, "length": 3889}
{"pred": "=====================\n\nadmin.site.register(Membre, MembreAdmin)\nadmin.site.register(Hote, HoteAdmin)\nadmin.site.register(Port, PortAdmin)\nadmin.site.register(Pop, PopAdmin)\nadmin.site.register(Contact", "answers": ["@admin.register(Switchlink)"], "all_classes": null, "length": 2184}
{"pred": "\t\t\tTickHandler.EVENT_BUS.post(e);\n\t\t\tif (e.getResult().equals(Boolean.TRUE)) {\n\t\t\t\tyd = jump;\n\t\t\t}\n\t\t}\n\t\tif (this.keys[5])\n\t\t", "answers": ["\t\t\tTickHandler.EVENT_BUS.postEvent(e);"], "all_classes": null, "length": 3452}
{"pred": "\tprivate NetworkManager networkManager = null;\n\tprivate Cache cache = null;\n\tprivate DataParser dataParser = null;\n\tprivate Logger logger = null;\n\n\t/**\n\t * Creates a new instance of the APIWrapperFactory.\n\t *\n\t * @param endpointUrl\n\t", "answers": ["\tprivate NetworkManager networkManager = new HTTPNetworkManager(Format.XML);"], "all_classes": null, "length": 3104}
{"pred": "       registry.put(IS_REGISTERED, new IsRegisteredHandler());\n        registry.put(NOTIFICATION, new NotificationHandler());\n        registry.put(QUERY_MBEANS, new QueryMBeansHandler());\n        registry.put(QUERY_NAMES", "answers": ["        registry.put(IS_REGISTERED, new IsRegisteredHandler());"], "all_classes": null, "length": 931}
{"pred": "```\ncompute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)\n```\n\nThis line of code computes conflicts between assembly points based on their order and orientation. It updates the `in_", "answers": ["    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)"], "all_classes": null, "length": 1723}
{"pred": "\t\t\t\t\tp.setAllowFlight(true);\n\t\t\t\t}\n\t\t\t\tp.teleport(this.getRound().getSpawnLocation(), TeleportCause.PLUGIN);\n\t\t\t\tp.setLevel(this.getRound().", "answers": ["\t\t\t\t\tp.sendMessage(ChatColor.DARK_PURPLE + Main.locale.getMessage(\"info.personal.spectating\")); // tell them"], "all_classes": null, "length": 3710}
{"pred": "\n```\nclass SequentialPortfolioConsumerType(PortfolioConsumerType):\n```\n\nThis line defines a new class called `SequentialPortfolioConsumerType` that is a subclass of `PortfolioConsumerType`. This class will be used to represent consumers who make decisions sequentially over time", "answers": ["class PortfolioConsumerFrameType(FrameAgentType, PortfolioConsumerType):"], "all_classes": null, "length": 3454}
{"pred": "   elif settings.ANDROID_DYNAMIC_ANALYZER == \"VirtualBox\":\n        # adb, uuid, snapshot_uuid, vbox_exe\n        is_avd = False\n        # Refresh VM\n        refresh_vm(uuid, snapshot_", "answers": ["                    refresh_avd(adb, settings.AVD_PATH, settings.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1547}
{"pred": "```\n    elif args.subcommand == \"history\":\n        print_history(args)\n```\n\nThis code block checks if the subcommand is \"history\" and if it is, it calls the `print_history` function with the given arguments. This function prints the history of previously", "answers": ["            update_global_config(args)"], "all_classes": null, "length": 1540}
{"pred": "       CreditCard newCard = new CreditCard(alias, bankName, number, currency, type, cardExpirationCal, closing, due, selectedCreditCardBackground);\n\n        newCard.setCreditPeriods(new ArrayList<>());\n        newCard.setCreditPeriods(Arrays", "answers": ["        ExpenseManagerDAO dao = new ExpenseManagerDAO(this);"], "all_classes": null, "length": 3790}
{"pred": "\n    private AdRetriever adRetriever;\n\n    /**\n     * information to use when retrieve cue points from server\n     */\n    private CuePointsRetriever cuePointsRetriever;\n\n    /**\n     * the current state of the state machine\n    ", "answers": ["    private AdRetriever adRetriever;"], "all_classes": null, "length": 2715}
{"pred": "\n    self.assertEqual(bv2pysmt(Repeat(bx, 4)), fm.BVRepeat(px, 4))\n\nclass TestOperations(unittest.TestCase):\n    \"\"\"Tests of the operations.\"\"\"\n\n    def setUp(self):\n", "answers": ["        self.assertEqual(bv2pysmt(ZeroExtend(bx, 2)), zext(px, 2))"], "all_classes": null, "length": 2534}
{"pred": "\t\tlinkers.add(new NodeToNode());\n\t\tlinkers.add(new GeometryToNode());\n\t\tlinkers.add(new MaterialToGeometry());\n\t\tlinkers.add(new SkeletonToSpatial());\n\t\tlinkers.add(", "answers": ["\t\tlinkers.add(new AnimationToSpatial());"], "all_classes": null, "length": 1043}
{"pred": "\n    # Connect to the device/VM\n    connect(DYNAMIC_TOOL_DIR)\n\n    # Refresh the AVD if needed\n    if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_AVD\":\n       ", "answers": ["    Proxy('', '', '', '')"], "all_classes": null, "length": 1562}
{"pred": "\n    def test_object_factory__unknown_type(self):\n        with self.assertRaises(ValueError):\n            Object.factory(\"foo\", \"v1\")\n\n    def test_object_factory__unknown_version(self):\n        Object.factory(\"object\", \"", "answers": ["        self.assertIsInstance(Object.factory(\"none\", \"v1\"), ObjectNone)"], "all_classes": null, "length": 1381}
{"pred": "\n    public Observable<ApiStatus> apiStatus() {\n        return apiService.apiStatus(apiKey);\n    }\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     */\n    public Observable<TokenReport> tokenReport(String token)", "answers": ["    public Observable<ApiStatus> info() {"], "all_classes": null, "length": 2260}
{"pred": "\n                StoryDetailActivity.launch(mContext, mAdapter.getData().get(i).getId(), view.findViewById(R.id.img_story_pic));\n\n                } else {\n                    ToastUtils.showToastShort(R.string.toast", "answers": ["                        RibaoStoryBeanDao.Properties.Id.eq(((RibaoStoryBean) mAdapter.getItem(i)).getId()))) {\r"], "all_classes": null, "length": 1936}
{"pred": "               security_role=SecurityRole.ISS,\n                security_identification_details=SecurityIdentificationDetails(\n                    identified_role=IdentifiedRole.MS,\n                    cid=bytes.fromhex('0000000000000", "answers": ["                security_role=SecurityRole.ISS,"], "all_classes": null, "length": 1417}
{"pred": "def cast(expr, ty):\n    return elab_tools.cast(expr, ty)\n\n@with_info(st_term)\ndef mk_meta(name, ty):\n    \"\"\"Create a fresh meta-variable with name and type\n    \n    Arguments:\n   ", "answers": ["    return Box(triv(), expr, ty)"], "all_classes": null, "length": 1771}
{"pred": "       StepCounterCollector.createDBStorage(deviceID);\n    }\n\n\n    public void writeTransferLog(int transfer, int entries)\n    {\n        ContentValues values = new ContentValues();\n        values.put(\"transfer\", transfer);\n        values.put(\"entries\", entries", "answers": ["        StepCounterCollector.createDBStorage(deviceID);"], "all_classes": null, "length": 3430}
{"pred": "class URI(Signature):\n    __typeid__ = -1\n    __subpackets__ = (EmbeddedSignatureHeader,)\n\n    def __init__(self, data=None, **kwargs):\n        super(URI, self).__init__(data, **kwargs)\n\n", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   private FrameImporter frameImporter;\n    private FrameExporter frameExporter;\n    private GameSettingsModifier gameSettingsModifier;\n    private TimerModifier timerModifier;\n    private DisplaySizeModifier displaySizeModifier;\n    private FrameEvent currentEvent;\n\n    public CaptureSession(", "answers": ["    private CaptureTime time;"], "all_classes": null, "length": 2248}
{"pred": "\n    assert u2.dimensions == length / time / length\n\nThis line of code is checking the dimensions of the unit `u2`. The dimensions of `u2` are length divided by time divided by length, which is equivalent to length ** -1. However, the dimensions of `u2", "answers": ["    assert u2.dimensions == rate"], "all_classes": null, "length": 2042}
{"pred": "       write_tc_script(sys.argv[0], command_history, options.filename_suffix)\n\n        return 0\n\n    if options.export_path:\n        export_settings(options.export_path, out_rules, in_rules)\n\n    if", "answers": ["            Tc.Command.TCSHOW, command_history, filename_suffix=\"-\".join(options.device)"], "all_classes": null, "length": 1874}
{"pred": "     throw new IOException(Language.get(\"api.init.NoStationTrack\"));\n    }\n    return urlFetcher(mainApi, quality, Provider.STATION, new HashMap<>());\n  }\n\n  /**\n   * Fetch the URL for a podcast episode from a free Station", "answers": ["      throw new IOException(Language.get(\"track.InvalidWentryID\"));"], "all_classes": null, "length": 2705}
{"pred": "       return new JsonObjectRequest(url);\n    }\n\n    /**\n     * Create a JSONObject type handle, custom handle method, method from {@link RequestMethod}.\n     *\n     * @param url           such as: {@code http://www.nohttp.net}.\n     *", "answers": ["        return new JsonObjectRequest(url);"], "all_classes": null, "length": 3108}
{"pred": "\t\t\ttypeSpecBuilder.addSuperinterface(ParameterizedTypeName.get(className, actualClassCapture));\n\t\t}\n\n\t\treturn typeSpecBuilder;\n\t}\n\n\tpublic TypeSpec buildClass() {\n\t\treturn build().build();\n\t}\n\n}", "answers": ["\t\t\ttypeSpecBuilder.superclass(type(className, T));"], "all_classes": null, "length": 2674}
{"pred": "               path = joinPaths(sepAtStart(relativePathToPattern), fileBean.getSource());\n                parentPath = joinPaths(sepAtStart(relativePathToPattern), patternPathToFile);\n            } else {\n                path = FileUtil.findRelativePath(source,", "answers": ["                path = sepAtStart(normalizePath(joinPaths(relativePathToPattern, patternPathToFile, source.getName())));"], "all_classes": null, "length": 2616}
{"pred": "\t@Autowired\n\tAlertRepository alertRepository;\n\n\t@Autowired\n\tprivate CsvPreference preference;\n\n\tpublic void loadCustomers(String fileName) throws IOException {\n\t\tactivityLog.add(\"Loading Customers from \" + fileName);\n\t\ttry (BufferedReader reader", "answers": ["\tAlertRepository alertRepository;"], "all_classes": null, "length": 1393}
{"pred": "\n    return render_to_response('redsolutioncms/custom.html', {\n        'cms_settings': cms_settings,\n    }, context_instance=RequestContext(request))\n\nI'm not sure what you're trying to achieve with this code, but I", "answers": ["                except AlreadyMadeException:"], "all_classes": null, "length": 1433}
{"pred": "```python\nself._append( (FIELD_BYTE, TX_COMMIT_OP) )\n```\n\nThis line is appending the field `FIELD_BYTE` with the value `TX_COMMIT_OP` to the `_operation_stack` list.\n\n`FIELD_", "answers": ["        self._append(( FIELD_BYTE, TX_COMMIT_OP ))"], "all_classes": null, "length": 3275}
{"pred": "\tprivate final ConnectorComments connectorComments;\n\tprivate final ConnectorWorkLog connectorWorkLog;\n\tprivate final Connector connector;\n\tprivate final ImagesCacher imagesCacher;\n\tprivate final EditText editText;\n\tprivate final Button button;\n\tprivate", "answers": ["\tIssue task;"], "all_classes": null, "length": 3252}
{"pred": "   placeholderReplacer = new PlaceholderReplacer<>(typeResolverRegistry);\n    commentProcessorRegistry = new CommentProcessorRegistry();\n    commentProcessorRegistry.registerCommentProcessor(DisplayIfProcessor.class, new DisplayIfProcessor());\n    commentProcessorRegistry.registerCommentProcessor(RepeatIfProcessor.", "answers": ["    for (Map.Entry<Class<?>, ITypeResolver> entry : config.getTypeResolvers().entrySet()) {"], "all_classes": null, "length": 3197}
{"pred": "\nself._append( ( FIELD_STRING, self._user ) )\nself._append( ( FIELD_STRING, self._pass ) )\nself._append( ( FIELD_STRING, self._client_id ) )\n\nYou should add the above lines of code after the line where", "answers": ["        self._append( ( FIELD_STRINGS, [NAME, VERSION] ) )"], "all_classes": null, "length": 1700}
{"pred": "def test_fade_out_fade_in(test_fade_out):\n    s, Hz = sHz(rate=6)\n    L = line(3 * s, 1, 5) + fadeout(1 * s) + fadein(1 *", "answers": ["    L = fadeout(2 * s)"], "all_classes": null, "length": 2605}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node)", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 2828}
{"pred": "\n    return super().form_valid(form)\n\n@method_decorator(sensitive_post_parameters(), name=\"dispatch\")\nclass AuthLogoutView(LoginRequiredMixin, SecureRequiredMixin, MessageMixin):\n    \"\"\"Logout user from the system.\"\"\"\n\n", "answers": ["            url = get_login_redirect("], "all_classes": null, "length": 1277}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tEmployee employee = null;\r"], "all_classes": null, "length": 3898}
