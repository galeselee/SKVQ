{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"GB2312\", \"gb2312\");\n\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t\taliases.Add (\"gb2312-80\", \"gb2312", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        return class_contents\n    source.put('[')\n    return None\n\nThe code given above is a regular expression parser. It takes a string as input and returns a pattern object. The pattern object can be used to match strings against the regular", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn.predict(total)\n#print(knn.predict(total))\n#print(knn.predict(total)[0])\n#print(knn.predict(total)[0]==4)\n#print(knn.predict(total)[0]==4.", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 1L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelectWhere()\n    {\n        String stmtText = \"select id from S0", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setSelected(true);\n                item.setGrayed(false);\n                item.setExpanded(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n\n        searchBox.setText(this.searchText);\n        searchBox.requestFocus();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\treturn;\n\t\tInputStream is = new FileInputStream(", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of the `_set_repeat` function is, but it seems to be used to set the repeat delay and interval for keys. The `self.__repeat` variable is a tuple that stores these values. The `delay", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\n    if kwargs[\"stability\"]:\n        if not check_stability(**kwargs):\n            return\n```\nThis code checks if the `--stability` option is provided in the command line arguments. If it is, it calls the `check_stability` function with", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def getState(self):\n        \"\"\" Returns the current state of the wavemeter.\n        @return str: 'idle', 'running', 'deactivated'\n        \"\"\"\n        # check the state of the wavemeter\n        state = self._wavemeterdll.", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustSupportStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.CHAT.getStatusName(),\n            PresenceStatus.DND.getStatusName(),\n            PresenceStatus.ERROR", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this);\n                        }\n                    });\n                }\n            }\n            await StartVote(null, options, null, poll);\n            return true;\n        }\n        private void MapVoteEnded(object sender, EventArgs", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing)\n\t\t\t\t\treturn null;\n\t\t\t\tif (error != null)\n\t\t\t\t\tthrow error;\n\t\t\t\t\n\t\t\t\tif (assemblyCache.ContainsKey (name))", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        interface=dict(type='str', required=True),\n        param_type=dict(type='int', choices=[INTERFACE_ALL, INTERFACE_TYPE,", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   return s.matches(\"^[0-9,]*$\");\n  }\n  public void setProperties(ISVNLocalResource resource) throws SVNException {\n    if (resource instanceof ISVNRemoteResource) {\n      ISVNRemoteResource remoteResource = (ISVN", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an auction\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_l", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 281);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "\n    behavior = []\n    for observation in observations:\n        behavior.append({\n            'code': observation['code'],\n            'category': observation['category'],\n            'time': observation['time'],\n            'location': observation['loc'],\n            'data': translations_dict[", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        @param: handles        -- A list of handles of people\n        @return: (males, females, unknown)\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle stays put until it is ready to fly.\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT_T", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayloadAsBytes(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn buffered", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            persistToMemento();\n        }\n    }\n    /** Save the current input to memento */\n    private void persistToMemento()\n    {\n        final IMemento memento = getMemento", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && launcher != null && component.isEnabled() && launcher.isEnabled() && launcher.isPopupTrigger(e)) {\n// TODO: Add a delay to avoid popup opening when the user clicks on the text component\n// and then immediately clicks on the", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_with_newlines(self):\n        name = parse_tables.clean_name(\"A Very Long Name That Splits \\nOver Lines\")\n        assert name == \"A Very Long Name That Splits Over Lines\"\n\n    def", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'displayname':\n            key_func = lambda x: x['displayname']\n        elif sort[0] == 'uploadDate':\n            key_func = lambda x: x['uploadDate']\n        else:\n            raise ValueError(\"Invalid sort key:", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                {\n                    return false;\n                }\n                Current = list[index];\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    return localrepo.localrepository.instance(ui, os.path.join(parentpath, path), False)\n\n# Add a new method to the unionrepository class to get the union of two\n# revisions from the two repositories.\ndef getunionrev(self,", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\n    structured['logger'] = self.__class__.__name__\n\n    return logging.LogRecord(name, level, fn, lno, msg, args, exc_info, **kwargs)\n\nclass StructuredFormatter(logging.Formatter):\n    def __init__(self, *args", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\",\n                                   text=auth_message, navtrail=navtrail)\n\nThis line checks if the user has the necessary authorization to perform the\nrequest. If not, it redirects the user to a", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nimport os\nimport re\nimport sys\nfrom ansible.plugins.connection.ssh_connection import SSHConnection\nfrom ansible.utils.compat import (\n    PY2,\n    PY3,\n    PY35,\n    PY36,", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.get(x).__orderby;\n\t\t\tif(index < 0)\n\t\t\t\tindex = x;\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    if page_count:\n        record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record if it was found. The field code '300'", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass SendRRData(ENIPSendUnitData):\n    name = \"ENIPSendRRData\"\n    fields_desc = [\n        LEShortField(\"commandId\", 0x6f),\n        LEShortField(\"length\", 0),\n        LEShortField(\"sessionId", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridEnvelope(sourceFile);\n\t\t\n\t\t// Extracting the GeoTIFF file's CRS\n\t\tCoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();\n\t\t\n\t\t//", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you're trying to achieve with the last line", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house == null)\n                    house", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(display", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if os.path.splitext(fname)[1] in reader.extensions:\n        return reader\n```\n\nThis code searches through the list of supported readers to find the one that matches the file extension of the given filename. If", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth != -1) continue;\n\t\t\t\t\t\t// find the top cell of this cell\n\t\t\t\t\t\tGraphNode topCell =", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 191: // / key\n                if (down)\n                {\n                    Program.keyCAPS_V = (Program.keyCAPS_V & (~4));\n                    Program.keyB_SPC = (Program.keyB_SPC", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of the distortion matrix']\nout_units += ['']\n\nPlease complete the code to store the weights of the distortion matrix in the\noutput file.\n\nThe code should store the weights", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n    lines = obj.split(\"\\n\")\n    if implementation == RisImplementation.WOK:\n        ris = Wok(lines, mapping, strict=strict)\n    else:\n        ris = Ris(lines, mapping, strict=strict)\n    return list(ris.parse())", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateSinglePlayerTableStrength(player, opponent.getValue());\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.getScore().add(strength);\n        this.scoreTable.add(tableStre", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_public_mode_on_with_password(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", True)\n        web.", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (autoscroll) {\n            handler.post(new Runnable()", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    if arch == \"x86\":\n        # If we are building a 32-bit version, we need to create a 64-bit\n        # version of the makefile for the 64-bit version of nmake.\n        create_makefile64(", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( WhitePearl ), 1032694, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self, capsys):\n        \"\"\"tests converting a properties file to a po file\"\"\"\n        propsource = \"\"\"\nmsgstr[0] = This is a test\nmsgstr[1] = This is another test\n\"\"\"\n        proptemplate = \"\"\"\n", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\n    if not module.params['host']:\n        module.fail_json(msg=\"host is a needed parameter\")\n\n    host = module.params['host']", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Published.HasValue ? c.Published.Value.Year.ToString() : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteMultiple(self):\n        \"\"\"\n        TCP: Short write to client with multiple responses\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    if (kind == null) {\n        throw new IllegalArgumentException(\"Unknown Javacc kind: \" + javaccKind);\n    }\n    return kind;\n}\n\n    public int javaccKind() {\n        return javaccKind;\n    }\n\n   ", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(this.DescriptionControlID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(this.TitleControlID);\n        }\n        public Control GetLabelForPercentage()\n        {", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args = urllib.urlencode(query_args)\n        url = self.generate_url(expires_in=600, method=method, bucket=bucket, key=key, headers=headers, query_auth=True, force_http=False) +", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(GraphEdge edge : edges){\n\t\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>\n            {\n                { DyeType.WindAzul, new Tuple<int, int>(0x3B2F) },\n                { DyeType.DullRuby,", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.delete(selected.getKeystoreName(), selected.getAlias(),\n                        c -> {\n                            if (c.isSuccess()) {\n                                refresh();\n                            } else {\n                                this.alertDialog.show", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    def do_open(self):\n        self.dbm = self.dbmmodule.open(self.file, 'r')\n\nI'm not sure what the purpose of the `get_filenames()` function is, but it seems like it's supposed to return", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[\" + filename + \"]\";\n    }\n    /**\n     * Returns the description of this object.\n     *\n     * @return a brief textual description of this object\n     */\n    public String getAccessibleDescription() {\n        return getDescription();\n", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\nto\n\n    module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=False\n    )\n\nNext line of code", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n        fileDecoder = savedDecoder;\n        }\n    }\n    /**\n     * Returns the name of the resource file.\n     *\n     * @return     the name of the resource file.\n     */\n    public String getName() {\n        if (fileDecoder != null)", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n\t/**\n\t * <p>doImport</p>\n\t *\n\t * @return a {@link java.util.List} object.\n\t */\n\t", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.create(tables, params, owner, check_mode=module.check_mode)\n    elif state == 'absent':\n        changed = publication.drop(cascade=cascade, check_mode=module.check_mode)", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "int version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   \"\"\"\n        return T.mean(T.nnet.binary_crossentropy(self.input, pre_sigmoid_nv))\n\n# end-snippet-4\n\n# start-snippet-5\ndef main():\n    \"\"\"\n    Main function to run the", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: This is a hack to get the FigRole and FigOrdering\n        // to be created and added to the FigAssociationEndAnnotation\n        // before the FigAssociationEndAnnotation is added to the\n        // FigAssociation.\n        // This is necessary because the FigRole", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "====================\n    for i, (name, checksum) in enumerate(checksums.get()):\n        full_name = pjoin( cfg.webdav_backend_directory, name )\n        assert os.path.isfile( full_name )\n        with open(", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    label = self.labels[args[0]]", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append((cur.offset + prog_ofs, file_len))\n\t\t\t\tlen -= file_len\n\t\t\t\tofs += file_len\n\t\t\t\tcontinue\n\t\t\tresult.append((cur.offset + prog_ofs", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(value.substring(0, startIndex));\n\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"%}\"));\n\t\t\tString macroValue = macroHandler.getMac", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(ASN1Boolean.encode(ASN1Boolean.FALSE));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encode(ASN1Boolean.FALSE));\n    }\n    if (attributes != null", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\n\nThe code is a class that manages the storage of some data in the Android SharedPreferences. It has a constructor that takes a Context object and initializes some in-memory data structures and SharedPreferences", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse.OutputStream);\n            serializer(requestContext", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead, CallNumber.ToString(), null));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResource", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n        // TODO: parse the rest of the EXPLAIN string\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       i20 = i18 + 1;\n        i21 = i16 + i19;\n        i22 = i20 + i19;\n        i23 = i22 + i24;\n        i24 = i23 +", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // TODO: Add support for \"denyAfter\" constraint\n                // The \"denyAfter\" constraint is not supported yet.\n                // It is a string in the format \"denyAfter YYYY-MM-DD\"\n                // where YYYY-MM-", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     // Get the unit number from the proxy cell's user object.\n      ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      // Get the unit number from the proxy cell's user object.\n      int unitNum = proxyInfo.getUnitNumber();\n", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef save(self, path):\n    \"\"\"Saves the collection to disk.\n    Args:\n        path: The path to save the collection to.\n    Returns:\n        None\n    \"\"\"\n    for artist in self.collection:\n        for album in self.collection[", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Checks that the given function does not map a module name to the\n", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Gets a value indicating whether the order can be marked as paid\n\t\t/// </summary>\n\t\t/// <param name=\"", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (Read<int> ().SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n    return self._conf_helper('current_ch', 'setpoint', 'status_ch', 'output_ch', 'output_en', 'output_mode', 'output_level', 'output_time', 'output_delay', 'output_wait', 'output_pulse', '", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Run the compiled code.\n   * <P>\n   * This is the final step in the build process.\n  ", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).faces(\"+Z\").fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        if len(self.objects) < 1:\n            raise ValueError(\"At least one edge must be selected\")", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    # Writing final memory update 6/7 (function unknown)\n    j = 0\n    dmpUpdate = []\n    while ((j < 4) or (j < dmpUpdate[2] + 3)):\n        dmpUpdate.append(self.dmpUp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf_path = pdfkit.from_string(item.get('description'), False)\n\t\t\t\tpdf", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFEN", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.m_SetAttributes.IsEmpty && this.m_SetSkillBonuses.IsEmpty)\n                    list.Add(1072378); // Not a complete set\n            }\n        }\n        public virtual void GetSetProperties(ObjectProperty", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u00\");\n      }\n      d = (c >> 8) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append(\"0", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\te.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (type == PacketTypes.PlayerName)\n\t\t\t{\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue[0],\n            fields={'display_name': 'test_subtree'}\n        )\n        node.save()\n        node.children = [\n            self.create_subtree_for_deletion(parent, category", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + i);\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = \"1e\" + i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertEquals(htmlPageAsset.getIdentifier(), newBundlePushedAssets.get(0));\n    }\n    /**", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String sharedLinkId = postSharedLink(createTextFile(getMyNodeId(), \"test.txt\", content), \"test.txt\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj instanceof Number;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    // -----------------------------------------------------------------------\n    // Test for NumberUtils.isLong(String)\n    @Test\n    public void testIsLong() {\n", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled to parent grappling part: \" + grapple);\n                                }\n                                else if (", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n        if replace:\n            self.unlink(cr, uid, [res.id or False], context=None)\n\nThis line of code is used to delete any existing record in the ir_model_data table that matches the given criteria (model, key, name, res_id,", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode() {\n            actionTL.", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tthis.addImage(new ImageHelper(102179, \"/images/icons/16x16/", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n\n        encodeBytesToBytes( source, off, len, options, encoded, 0 );\n\n        return encoded;\n    }\n    /**\n     * Encodes a byte array into Base64", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger temp = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = temp;\n\t\t\t\tBigInteger temp2 = u3;\n\t\t\t\tu3 = u3.Subtract(q[0].Mult", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t\t_abi_info.AddField (\"type\", typeof (int), 4, 0, 0", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_EXTENSION,\n                            \".xmi\");\n                } else {\n                    Configuration.setString(\n                            Pers", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "\n            field = model_class._meta.get_field(unique_check[0])\n            params['field'] = field.name\n            params['field_label'] = six.text_type(capfirst(field.verbose_name))\n        # A unique_together constraint\n", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\n    paramtestdic = {}\n\nThis line creates an empty dictionary called `paramtestdic`. This dictionary will be used to store the parameters to test during the optimization process.\n\nThe `paramtestdic` dictionary will be filled with the values of the parameters to test during the optimization process", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n    for line in inpart:\n        heads.append(line)\n\nReplace it with:\n\n    heads = inpart.read(inpart.tell()).splitlines()\n\nThis will read the entire part and split it into lines.", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n        cell_attributes = literal_eval(cas_data_str)\n\nThis line of code is used to parse the cell attributes data from the clipboard.\nIt uses the `literal_eval` function from the `ast` module to parse the string\nrepresentation of the cell", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_mask.GetPixel(x, y)) {\n\t\t\t\t\t\tmask_bits[y * (width / 8) + (x / ", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the available days and find available time slots.\n\t\t\tfor(DateTime date=dateStart;date<=dateEnd;date=date.AddDays(1)) {\n\t\t\t\t//Find all the available time slots for this day.\n\t\t\t", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3Strnicmp( pMem1.z, pMem2.z, pMem1.n );\n        return rc;\n        //rc = sqlite3Strnicmp( pMem1.z, pMem2.z, pMem1.n );\n", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "               data.PowerRegenFlatModifier[i] = packet.ReadSingle(\"PowerRegenFlatModifier\", indexes, i);\n                }\n                }\n            }\n            if (changesMask[130])\n            {\n                for (var i =", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       # seq = seqs[nidx]\n        # seqarr = np.array(list(seq))\n        # seqarr[self.gtrim[1]:self.gtrim[3]] = 110  # n\n        # seqarr[self.gtrim[1", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index classIndex = allClasses.getIndexByTag(classRef.tag);\n            if (classIndex == null)\n                return null;\n            Index[] classIndexes = indexByTagAndClass[tag];\n            if (classIndexes == null) {\n                class", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 5;\n            this.quoteLabel.Text = \"This is a quote.\";\n            this.quoteLabel.Visible = false;\n            // \n", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           if rule._freq == 1:\n                data['interval'] = 1\n            elif rule._freq == 2:\n                data['interval'] = 2\n            elif rule._freq == 3:\n                data['interval'] = 3\n            elif rule._", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output stream\n                Array.Copy(curr, 0, fout.GetBuffer(), fout.Position, bytesPerRow);\n                // Copy the decoded row to the previous row buffer\n                Array.Copy(curr, bytesPer", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        AApDocumentDetailRow DetailRow = (AccountsPayableTDSAApDocumentDetailRow)rv.Row;\n                        MainDs.AApAnalAttrib.DefaultView.RowFilter = String.Format(\"{0}={1} AND {1}={2}\",\n", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (CanSeeReward)\n\t\t\t\t{\n\t\t\t\t\t// if the reward is visible then give it to the owner\n\t\t\t\t\tif (RewardItem != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t//", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, firstItemIndex, lastItemIndex +", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.Controls.Add(AControlLabel);\n                if (AControlLabel != null)\n                {\n                    AControlLabel.AutoSize = true;\n                    AControlLabel.TextAlign = ContentAlignment.MiddleLeft;\n                    AControlLabel.", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Legal values for the Dyn d_tag field.\n# The following values are defined by the GNU extension.\nDT_PPC64_GOT_TLSGD = (DT_LOPROC + 0)\nDT_PPC64_GOT_TPREL = (DT_", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to complete\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t\t\tthrow new WiimoteException(\"Timed out waiting for read\");\n\t\t\treturn m", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n    def _query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf):\n        metric = np.array([1.0] * x.size)\n        metric[1] = math.cos(x[1", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightFirst2()\n\t{\n\t\tString acn = \"1. Nf3\";\n\t\tGame game = game(null,", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (Exception e)\n    {\n      return null;\n    }\n  }\n  /**\n   * Draw the feature and it's associated feature markers.\n   * @param g The object to draw into.\n   * @param segment_borders The vector of Segment", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t\tGeneral.Map.Map.AddSector(", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = Document.objects.create(\n            parent=parent_doc,\n            locale=request.locale,\n            title=parent_doc.title,\n            slug=parent_doc.slug,\n            category=parent_doc.category,\n            is_template=parent_", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n            // now we'll create new tables and add them to the current table\n            lNewWidths = new float[lTotalColumns];\n            lNewWidths[0] = 1;\n", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityMultiplier@EXPERIENCE\", new MiniYaml(\"\", new", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\n    return self.__class__(values, key=self._key)\n\nThis line of code creates a new instance of the SortedKeyList class with the\nupdated list of values and the same key function as the original sorted-key\nlist.\n\nThe key function is used to extract a comparison", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the loading of a batch of instances.\n        This method is called by the :meth:`.Session.flush` method\n        after all instances have been loaded into the session.\n        It is responsible for expiring", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"You may not wear this.\");\n", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221,", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "       private string FormatLogData(IDictionary data, int indent = 0)\n        {\n            string result = \"\";\n            foreach (KeyValuePair<string, object> entry in data)\n            {\n                string key = entry.Key;\n                object value = entry.Value", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[last + 2];\n\t\t\tquadrant = new int[last + 2 + BZip2Constants.NUM_OVERSHOOT_BYTES];\n\t\t\tzptr = new int[last + 1];\n\t\t\t", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        //                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        //                        int y = args[2] + ScreenTop;\n                        //                        int obj = findObject(x, y);\n                        //                        if", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (iFile != null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tdouble\n\tdistance( final P pt1\n\t\t\t, final P pt2\n\t\t\t)\n\t{\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(),  _{0}\" +\n\t\t\t\t\"     B()>  _{0}\" +\n\t\t\t\t\"     C()>  _{0}\" +\n\t\t\t\t\"", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinRShot2\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            newHouse.MoveToWorld(m_House.Location, m_From.Map);\n                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    public class PreviewHouse : Item", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplotID = plotID+1;\n\t\tplot = new Plot(plotID);\n\t\tplot.setFrameSize(640, 480);\n\t\tplot.setLimits(0, 1000, 0, 1000", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if self.widgetRename:\n                widgetName = xbmc.getInfoLabel( selectedShortcut.getProperty( \"widgetName\" ) )\n                keyboard = xbmc.Keyboard( widgetName, xbmc.getLocalizedString( 528 ), False )", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }\n\n    /**\n     * Encodes a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   GZIP", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[land]", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n    def run_command(self, cmd, check_rc=True, chdir=None, cwd=None,\n                    env=None, input=None, sudo=False, sudo_user=None,\n                    sudo_password=None, sudo_flags", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i] != null && Menus [selected].Children [i].Title [0] == c){\n", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + scanlineStride > data.length) {\n            throw new RasterFormatException(\"Incorrect scanline stride: \"\n                    + scanlineStride);\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "\n    def get_used_mem(self):\n        \"\"\"\n        Returns the VM's used memory (MB).\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get used memory from dead VM.\")\n            return None\n        session = self.wait", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   return delta_sync(g.namespace, g.db_session, args['cursor'],\n                      args['exclude_types'], args['include_types'],\n                      args['exclude_folders'], args['exclude_account'],\n                      args['exclude_metadata'],", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   objects = CourseEnrollmentManager()\n    class Meta(object):\n        db_table = 'course_enrollment'\n        unique_together = (('user', 'course_id'),)\n        index_together = (('user', 'course_id', 'is_active", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\n    system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.removeCustomValues(self.session,\n                                          system_id,\n                                          keys)\n\nThis code is missing the", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "\n    'xNotesOn': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('general-music', 'sequential-music',),\n    },\n\nYou can define a dictionary with the name `x", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t\n#endregion\n\t\t\n\t\t\n#region Protected Methods\n\n\t\t/// <summary>\n\t\t///    Renders the current instance", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.CollidingGround = false;\n                chr.CollidingObj = false;\n                chr.CollidingPrim = false;\n                chr.CollidingWater = false;\n                chr.CollidingTerrain = false;\n                chr.Colliding", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "       for i in ts:\n            i.start()\n        for i in ts:\n            i.join()\n        for i in ts:\n            i.stop()\n        for i in ts:\n            i.join()\n    else:\n        for i in xrange(total", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "   price_subtotal = fields.Float(string='Subtotal', compute='_compute_price', store=True,\n        digits=dp.get_precision('Account'),\n        help=\"The subtotal of the line, before taxes.\")\n\n    @api.multi\n    def", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def _get_view(self, indices):\n        \"\"\"\n        Return a PopulationView containing the cells specified by the given indices.\n        \"\"\"\n        if isinstance(indices, (int, numpy.integer)):\n            return self[indices]\n        elif isinstance(indices, (slice", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand)", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.Sk", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    @Override\n    public void deleteNode(Long nodeId)\n    {\n        Node node = getNodeNotNull(nodeId, false);\n        deleteNodeImpl(nodeId, node", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (isMainAxisRow) {\n        crossDim = paddingAndBorderAxisColumn;\n      } else {\n        crossDim = paddingAndBorderAxisRow;\n      }\n  \n      // If we're wrapping, we need to figure out the line break point.\n      if", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis yAxis in", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\");\n            return ret;\n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param name", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof PlainView) {\n                    PlainView pv = (PlainView) c;\n                    pv.setBidi(getBidi());\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n        /**", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tcol = 0;\n\t\t\t\t\tcomments_seen = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "\n    for dep in self.__deps:\n        dep.recipe.prepare(depEnv, depTools, depSandbox, self.__pathFormatter, dep.cache)\n\nThis code is iterating over the dependencies of the recipe and calling the\n``prepare()`` method of each dependency", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            xmlWriter.WriteAttributeString(\"Width\", XmlConvert.ToString(pane.ActualWidth));\n            xmlWriter.WriteAttributeString(\"Height\", XmlConvert.ToString(pane.ActualHeight", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        &nbsp;&nbsp;&nbsp;(<span class=\"warning\">missing: %(diff)s</span>)<br />", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "=====================\ndef _extract(node, tag_name, default = None):\n    \"\"\"Extracts the value of a tag from a node.\"\"\"\n    if node is None:\n        return default\n    if tag_name is None:\n        return node\n    if tag_name == \"", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "\n        self.serialize_struct(output, name, desc)\n\n        except:\n            self.error(\"struct %s has no fields\" % (name))\n            self.serialize_struct(output, name, \"\")\n            pass\n        else:\n            self.error(\"struct %", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "   # Update the permanence values based on the input\n    masterPermanence[coincSlice] += rfPermChanges\n    # Update the connected permanences based on the input\n    masterConnected[coincSlice] += rfValidConnected\n    # Update the connected permanences based", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\n    if self.disks:\n      self.disks = [(d.uuid, d) for d in self.disks]\n\nThis line of code is used to convert the disk objects to tuples of (uuid, disk)\nfor easier handling in the rest of the code.", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if isBoolean(vmap, 'opt_action'):\n        complt += '\\t\\t\\t\"-' + optionPrefix + vmap['opt_long_option'] + '\" && ret=0\\n'\n    elif hasDescription(vmap):\n        complt += '\\", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "               if (m_ControlOrder == OrderType.Release)\n                {\n                    if (m_ControlMaster != null)\n                    {\n                        m_ControlMaster.SendLocalizedMessage(1049666); // Your pet has been released.\n                ", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (getParent() != null) {\n            Container parent = getParent();\n            if (parent.getScrollX() != 0 || parent.getScrollY() != 0) {\n                int absX = getAbsoluteX() + getScrollX();\n                int abs", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (bmp_mono[n1] > 0)\n                                side1 += (float)r;\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[4];\n\t\t\t z[0] = 1.0 / 3.0 * (1.0 / 15.0 - 1.0 / 12.0 * z[0]);\n\t\t\t z[1] =", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tString[] oldFields = getTableFields(tableName);\n\t\t\n\t\t// First, check for reserved SQL in the input row r...\n\t\tdatabaseMeta.quoteReservedWords(fields);\n\t\tString quotedTk = tk != null ? databaseMeta.quote", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"TRACK\"};\n\t\t\tbonusFeats[4] = new String[] {\"ENDURANCE\"};\n\t\t\tbonusFeats[6] = new String[] {\"IMPROVED TRACKING\"};", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "       self.SetHoverItem(None)\n        \"\"\"\n        \n        self.SetHoverItem(None)\n        self.SetToolTipString(\"\")\n        self.StopPreviewTimer()\n        self.RefreshOverflowState()\n        self.DoIdleUpdate()\n    def", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT set3DMode           (int mode)\n        {\n            return FMOD_EventCategory_Set3DMode(eventcategoryraw, mode);\n        }\n        public RESULT get", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can you please", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    \n/* ********  F I L E   I", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "               if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            if self.layoutNode is None:\n                self.builtWithNoXLF = True\n                log.", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                if(numBits == 1)\n                    return new BigInteger(1);\n                else\n                    return new BigInteger(2);\n            }\n            uint numBytes = numBits >> 3;\n            if(numBits == numBytes << 3", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       idx_list = node.op.idx_list\n        if len(idx_list) == 0:\n            return\n        if len(idx_list) == 1 and isinstance(idx_list[0], slice):\n            idx_list = [idx_list[0]]", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```\n    cls.add_method('Get',\n                   'bool',\n                   [param('ns3::Ptr< ns3::ObjectBase >', 'object'), param('ns3::AttributeValue &', 'attribute')],\n                   is_const=True)\n```", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Node subNode = body.getNode(0);\n                    if (subNode instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    // If the body", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (e.Handled)\n\t\t\t\t\t\treturn PreProcessControlState.Handled;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEYUP", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "       if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed data file {0} does not exist.'.format(md_file_path))\n        # load\n        mantidsimple.LoadNexus(Filename=md", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "\ndef __import__(name, globals=None, locals=None, fromlist=None, level=0):\n    \"\"\"Import the module with the given name.\n    The globals and locals arguments are used to pass in the namespace\n    dictionaries for the module being imported.\n   ", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateImplicitConversionError(diagnostics, syntax, conversion, expression, targetType, false);\n                return;\n            }\n            if (expression.Kind == BoundKind.Conversion)\n            {\n                var conversion2 = (BoundConversion)expression;\n", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "           search_reg_str = search_terms.replace(' ', r'\\\\b\\\\w+\\\\b')\n        try:\n            search_regx = re.compile(search_reg_str, flags)\n        except Exception as err:\n            print(\"An error occured while", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "               if not self.__GetNextToken():\n                    raise Warning(\"expected FV name At Line \", self.FileName, self.CurrentLineNumber)\n                FvImageSectionObj.FvName = self.__Token\n                if not self.__IsToken( \"{\"):\n                ", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "   headers_phase = self.GetBuildPhaseByType(PBXResourcesBuildPhase)\n    if headers_phase is None:\n      headers_phase = self.GetBuildPhaseByType(PBXCopyFilesBuildPhase)\n    assert headers_phase is not None\n    return headers_phase", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "   data = remote_instance.fetch(url, post={'node_ids': ','.join(str(x) for x in x)})\n\nThis line of code is incorrect because it is trying to pass a list of node IDs as a single string to the URL. Instead, it should", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (decimalPos >= 0) {\n                                throw new IllegalArgumentException(\"Exponent separator and decimal separator in pattern \\\"\" +\n                                    pattern + '\"');\n                            }\n                            if (decimalPos >= 0) {\n                                throw", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\n    def BeginBatchUndo(self) -> bool\n        Begin a batch of undoable operations.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " exec lighttpd -f %(webDir)s/etc/lighttpd.conf\n  \"\"\" % { 'bashrc': os.path.join( self.instancePath, 'bashrc' ),\n         'webDir': webDir } )\n        fd.close()", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "   if state == 'suspended':\n        ret = vms_module.create(\n            entity=vm,\n            result_state=otypes.VmStatus.SUSPENDED if vm is None else None,\n            clone=module.params['clone'],\n            clone_", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (!subChans.isEmpty()) {\n            m = ModeFactory.getMode(\"Channel_queries\", \"subscribed_systems\");\n        }\n        else if (!unsubChans.isEmpty()) {\n            m = ModeFactory.getMode(\"Channel_queries\", \"", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = 0, n = libs.size(); i < n; i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltin) {", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState initialization with seed values.\n          -- ALGLIB", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\n        group.add_option(\"--exclude\", dest=\"exclude\", action=\"append\",\n                help=_(\"exclude packages matching this pattern\"))\n\nThis line of code is adding an option to the OptionGroup object created by\nOptionGroup(self, group). The option is named '", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (Iterator i = values.keySet().iterator(); i.hasNext();) {\n                String name = (String) i.next();\n                DataElement element = (DataElement) values.get(name);\n                SaveableData value = (SaveableData) element", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        existingDoc.SetComputedChecksum(checkSumText, guid);\n                    }\n                    else\n                    {\n                        // pragma does not match a file path on an actual tree.\n                        // We will continue doing the same as the dev12 compiler.\n", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    while True:\n                        param = self.tok[1]\n                        self.NextToken()\n                        if self.tok[0] == 'IDENT':\n                            params.append(param)\n                            self.NextToken()\n                            if self.tok[0", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "       return (comment_value, json_d.get('option', None))\n    def _get_submitted_option_id(self, student_answer):\n        \"\"\"\n        Returns the option id submitted by the student.\n        \"\"\"\n        if not student_answer:\n            return", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.explain == 1 )\n        {\n         ", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        orcid = json_data['orcid']\n        pid = json_data['pid']\n        if not is_", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               disk_type = expected_disk_spec.get('type')\n                valid_disk_types = ['thin', 'thick', 'eagerzeroedthick']\n                if disk_type not in valid_disk_types:\n                    self.module.fail", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static string GetMetadataName (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif (", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.Children.Clear();\n                this.FilteredChildBranches.Clear();\n            }\n            /// <summary>\n            /// Collapse this branch\n            /// </summary>\n            public virtual void Collapse() {\n                this.Collapse(true);\n           ", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       if not journal_id:\n            raise osv.except_osv(_('Error!'),  _('Can not create Journal Entry, no Journal defined for this product.'))\n        return {'account_id': acc_src, 'account_dest_id': acc_dest, 'journal", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the\n        adjusted dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busday_count : Counts how many", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "               subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None)]\n            return subsets\n        # If we've got here, we're dealing with an AuxCoord\n        # (which is not a DimCoord).\n        #", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the receiver's size and location to the rectangular\n * area specified by the arguments. The <code>x</code> and\n * <code>y</code> fields of the rectangle are relative to\n * the receiver's", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if paper in autoclaim_data['recids']:\n                        autoclaim_data['recids'].remove(paper)\n                        autoclaim_unsuccessful_recs.append(paper)\n                    else:\n                        autoclaim_", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "   track_event(request, \"change-email1-settings\", {\"receive_emails\": receive_emails, \"course\": course_id})\n\nThis line of code is used to track an event in Google Analytics when the user changes their email settings for a course. The event is", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "   names.extend([\"e%s\" % name for name in self.type.flatMemberNames])\n    conversions.extend([\"e%s::from_jsval(cx, value) => e%s(value),\" % (name, name) for name in names])\n", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "   def postParse( self, instring, loc, tokenlist ):\n        return tokenlist\n\n        #~ if len(tokenlist) == 1:\n            #~ return tokenlist[0]\n        #~ else:\n            #~ return tokenlist\n\n        #~ if", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "   if matched_zero and Match(r'^\\s*(\\w+)\\s*(\\w+)\\s*=\\s*(\\S+)\\s*;',\n                              matched_zero.group(0)):\n      if Match(r'^\\s*PureVirtual\\s*=\\s", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": " self.hashes[filename] = (before, after)\n  if after == NULL_HASH:\n    # The \"after\" hash is NULL_HASH if the file was deleted.\n    # In this case, we need to add a \"D\" line to the svndiff", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = field_get_subfield_values(fft, 'a')\n            if url:\n                url = url[0]\n            else:\n                raise StandardError(\"FFT tag is not well formed\")\n            # Let's discover the name of the document\n", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       int[] ret = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << i)) != 0) {\n                ret[counter++] = i;\n            }\n", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n           ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "       public static readonly string[] B_3 = new string[]\n        {\n            \"\\x1FF2\\x1F7C\", /* 1FF2; 1F7C; Case map */\n            \"\\x1FF3\\x1F7D\", /* 1FF3", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, x, y, op);\n    }\n    public void drawImage(BufferedImage bImg,\n                          BufferedImageOp op,\n                          int x,\n                          int y) {\n        if (bImg == null) {\n            throw", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     PackageFragmentRoot root = JavaModelManager.getJavaModelManager().getPackageFragmentRoot(fileName);\n      return root.getPackageFragment(CharOperation.subarray(fileName, pkgEnd, fileName.length));\n    }\n  }\n  public static IPackageFragment getPackageFragment(", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\n    if lhs in names:\n        if overrides:\n            if lhs in orides:\n                rhs = orides[lhs]\n            else:\n                rhs = rhs.strip()\n                if lhs in properties:\n                    rhs = properties[l", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           if end_line == t[2][0]:\n                # This is a continuation line.\n                if end:\n                    # This is the last token of the previous line.\n                    logical[-1] = logical[-1][:end] + text\n                else", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, filename):\n        \"\"\" Parse a polynomial from a file and return it as a Polynomials object\n        \"\"\"\n        try:\n            poly = Polynomials(open(filename, \"r\").readlines())\n        except (FileNotFoundError, IOError", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media encoder", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                #print '%s - %s' % (self.splitKeyHash[k].br.len, tree2.splitKeyHash[k].br.len)\n            for k in self", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "       result = aggregator.aggregate(rolling_window_data, axis=dimension,\n                                      **kwargs)\n\n        # Perform the data transformation\n        result = aggregator.aggregate(rolling_window_data, axis=dimension,\n                                      **", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "\ndef _query_events_hold(cls, query):\n    \"\"\"Hold onto the query object for later use.\"\"\"\n    cls._query_holds.setdefault(query.class_, []).append(cls)\n\nThis is a helper function that is used to hold onto a query object for", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               setMargins(\n                        a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelSize(TOP_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelSize(RIGHT_MARGIN", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n        {\n            SibTr.entry(tc, \"getUuid\");\n            SibTr.exit(tc, \"getUuid\", _uuid);\n        }\n        return _uuid;", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "               returnType = returnType.StrippedType();\n            }\n            return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), returnType, isChecked);\n        }\n        private static void AdjustSymbol", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
