{"pred": "\t\t\tprimerak.setInvKnj(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(raspodela", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        return class_contents\n    source.put('[')\n    return None\n\nThe code given above is a regular expression parser. It takes a string as input and returns a pattern object. The pattern object can be used to match strings against the regular", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn.predict(total)\n#print(knn.predict(total))\n#print(knn.predict(total)[0])\n#print(knn.predict(total)[0]==4)\n#print(knn.predict(total)[0]==4.", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 1L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 99, null);\n        assertFalse(listener.isInvoked());\n    }\n   ", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setSelected(true);\n                item.setForeground(GUI.display.getSystemColor(SWT.COLOR_DARK_GRAY));\n                item.setGrayed(false);\n                item.setExpanded(true);\n                break;", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n\n        searchBox.setText(this.searchText);\n        hasUpdate.setSelected(this.isUpdate);\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\treturn;\n\t\tInputStream is = new FileInputStream(", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of this code is, but it seems to be a Python script that translates GTK events to Pygame events. The script defines a `Translator` class that listens for events on a GTK window and", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\n    if kwargs[\"check_stability\"]:\n        check_stability_result, test_status = check_stability(**kwargs)\n        if not check_stability_result:\n            logger.critical(\"Stability check failed\")\n            return False, test_", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def getState(self):\n        \"\"\" Returns the current state of the wavemeter.\n        @return str: 'idle', 'running', 'deactivated'\n        \"\"\"\n        # check the state of the wavemeter\n        state = self._wavemeterdll.", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustSupportStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.CHAT.getStatusName(),\n            PresenceStatus.DND.getStatusName(),\n            PresenceStatus.ERROR", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this);\n                        }\n                    });\n                }\n            }\n            poll.Options = options;\n            await StartVote(poll);\n            return true;\n        }\n        private void MapVoteEnded(object sender,", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing)\n\t\t\t\t\treturn null;\n\t\t\t\tif (error != null)\n\t\t\t\t\tthrow error;\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tstring[]", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        interface=dict(type='str', required=True),\n        param_type=dict(type='int', choices=[INTERFACE_ALL, INTERFACE_TYPE,", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   return s.matches(\"^[0-9,]*$\");\n  }\n  public void setProperties(ISVNLocalResource resource) throws SVNException {\n    if (resource instanceof ISVNRemoteResource) {\n      ISVNRemoteResource remoteResource = (ISVN", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an item\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_l", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 280);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\n    behavior = []\n    for o in observations:\n        behavior.append({\n            'code': o['code'],\n            'category': translations_dict[o['code']]['category'],\n            'note': translations_dict[o['code']]['note'],\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        @param: handles        -- A list of handles of people\n        @return: (males, females, unknown)\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle takes off from the ground and stays in the air.\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayloadAsBytes(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn buffered", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            persistToMemento();\n        }\n    }\n    /** Persist the input to memento.\n     *\n     *  <p>This is called when the input changes,\n     *  but only if the view is", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && launcher != null && component.isEnabled() && launcher.isEnabled() && launcher.isPopupTrigger(e)) {\n// TODO: Add a delay to avoid popup opening when the user clicks on the text component\n// and then immediately clicks on the", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_with_newlines(self):\n        name = parse_tables.clean_name(\"A Very Long Name That Splits \\nOver Lines\")\n        assert name == \"A Very Long Name That Splits Over Lines\"\n\n    def", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'displayname':\n            key_func = lambda x: x[1]['displayname']\n        elif sort[0] == 'uploadDate':\n            key_func = lambda x: x[1]['uploadDate']\n        else:\n            raise ValueError(\"", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                {\n                    index = -1;\n                    return false;\n                }\n                Current", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    path = os.path.abspath(os.path.join(parentpath, path))\n\n    return localrepo.localrepository.instance(ui, path, False)\n\nThe code is trying to find the parent directory of the repository, which is\nused to construct the URL", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\n    structured['logger_name'] = self.name\n\nThis line sets the 'logger\\_name' key in the structured dictionary to the name of the logger. This is useful for including the logger name in the log message, which can help with debugging and understanding the source of the log message.\n", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\",\n                                   text=auth_message, navtrail=navtrail)\n\nThis line checks if the user is authorized to run the BibEdit action. If\nthe user is not authorized, it redirects", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nimport os\nimport re\nimport sys\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\nfrom ansible.utils.compat import (\n    PY2,\n    PY3,\n    PY35,\n   ", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.get(x).__orderby;\n\t\t\tif(index < 0)\n\t\t\t\tindex = x;\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    if page_count:\n        record_add_field(rec, '300', ind1=' ', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record if it exists. The field added is '", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\n```\n                (PacketField(\"commandSpecificData\", ENIPSendUnitData,\n                             ENIPSendUnitData),\n                 lambda pkt: pkt.commandId == 0x70),\n                # Send Unit Data\n                (PacketField(\"commandSpecificData", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridEnvelope(sourceFile);\n\t\t\n\t\t// Extracting the GeoTIFF file's metadata\n\t\tfinal GeneralEnvelope geoEnvelope = reader.getGridGeometry().getEnvelope2D();\n\t", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you're trying to achieve with the last line", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y )\n\t\t\t{\n\t\t\t\tbin.", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house == null)\n                    house", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(display", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if os.path.splitext(fname)[1] in reader.extensions:\n        return reader\n```\n\nThis code searches through the list of supported readers to find the one that matches the file extension of the given filename. If", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth != -1) continue;\n\t\t\t\t\t\t// find the top-level cell that this cell is connected to\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 191: // / key\n                if (down)\n                {\n                    Program.keyCAPS_V = (Program.keyCAPS_V & (~4));\n                    Program.keyB_SPC = (Program.keyB_SPC", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of the distortion matrix']\nout_units += ['']\n\nPlease complete the code to store the weights of the distortion matrix in the\noutput file.\n\nThe code should store the weights", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n    lines = obj.split(\"\\n\")\n    if implementation == RisImplementation.WOK:\n        ris = Wok(lines, mapping, strict=strict)\n    else:\n        ris = Ris(lines, mapping, strict=strict)\n    return list(ris.parse())", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateSinglePlayerScore(opponent.getValue(),\n                    opponentPlayers);\n            log.info(\"Strength of \" + player.getName() + \" is \" + strength);\n        }\n        tableStrengthScore.setPlayer(player);\n       ", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_public_mode_off_with_auth(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (autoscroll) {\n            handler.post(new Runnable()", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    if arch == \"x86\":\n        # If we are building a 32 bit version, we need to create a 64 bit\n        # version of the makefile for the 64 bit version of Python.\n        create_makefile64(makefile, m", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( WhitePearl ), 1032694, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self, capsys):\n        \"\"\"tests converting a properties file to a po file\"\"\"\n        propsource = \"\"\"\n        SAVEENTRY=Save file\n        \"\"\"\n        proptemplate = \"\"\"\n        msgid \"Save file\"\n        msgstr \"\"\n", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\n    if not module.params['host']:\n        module.fail_json(msg=\"host is a needed parameter\")\n\n    if not module.params['vdom", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Published.HasValue ? c.Published.Value.Year.ToString() : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteMultiple(self):\n        \"\"\"\n        TCP: Short write to client with multiple responses\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    if (kind == null) {\n        throw new IllegalArgumentException(\"Unknown Javacc kind: \" + javaccKind);\n    }\n    return kind;\n}\n\n    public TokenCategory getCategory() {\n        return category;\n    }\n}\n\npublic enum Token", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(this.DescriptionControlID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(this.TitleControlID);\n        }\n        public Control GetLabelForPercentage()\n        {", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args = urllib.urlencode(query_args)\n        url = self.generate_url(expires_in=600, method=method, bucket=bucket, key=key, headers=headers, query_auth=True, force_http=False) +", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(GraphEdge edge : edges){\n\t\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>\n            {\n                { DyeType.WindAzul, new Tuple<int, int>(0x3B2F) },\n                { DyeType.DullRuby,", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.delete(selected.getKeystoreName(), selected.getAlias(),\n                        c -> {\n                            if (c.isSuccess()) {\n                                refresh();\n                            } else {\n                                this.alertDialog.show", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    def do_open(self):\n        self.dbm = self.dbmmodule.open(self.file, 'r')\n\nI'm not sure what the purpose of the `get_filenames()` function is, but it seems like it's supposed to return", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[\" + filename + \"]\";\n    }\n    /**\n     * Returns the description of this object.\n     *\n     * @return a brief textual description of this object\n     */\n    public String getAccessibleDescription() {\n        return getDescription();\n", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\nto\n\n    module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=False\n    )\n\nNext line of code", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n        // Fix for CR 6303054\n        throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    /**\n     * Returns the current position in the stream.\n     *\n     * @return the current position in the stream.\n", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n\t/**\n\t * <p>doImport</p>\n\t *\n\t * @return a {@link java.util.List} object.\n\t */\n\t", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.create(tables, params, owner, check_mode=module.check_mode)\n    elif state == 'absent':\n        changed = publication.drop(cascade=cascade, check_mode=module.check_mode)", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "int version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   # of scan(..) and will not be able to apply the optimization.\n    # To get around this we need to express the log(sigmoid(..)) in\n    # terms of pre-sigmoid activation.\n    \"\"\"\n        cost = T.mean(T.log", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: This is a hack to get the FigRole and FigOrdering\n        // to be created and added to the FigAssociation.\n        // This is not the correct way to do it, but it is a temporary\n        // solution until the FigAssociation is refactored to", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "====================\n    for i, (name, checksum) in enumerate(checksums.get()):\n        full_name = pjoin( cfg.webdav_backend_directory, name )\n        assert os.path.isfile( full_name )\n        with open(", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#     stac = self.stack_count\n#     label = args[0]\n#     label", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append((cur.offset + prog_ofs, file_len))\n\t\t\t\tlen -= file_len\n\t\t\t\tofs += file_len\n\t\t\t\tcontinue\n\t\t\tresult.append((cur.offset + prog_ofs", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(value.substring(0, startIndex));\n\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"%}\"));\n\t\t\tbuilder.append(macroHandler.get", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(ASN1Boolean.encode(ASN1Boolean.FALSE));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encode(ASN1Boolean.FALSE));\n    }\n    if (attributes != null", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\n\nThe code is a class that manages the storage of some data in the Android SharedPreferences. It has a constructor that takes a Context object and initializes some in-memory data structures and SharedPreferences", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead, CallNumber.ToString(), null));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResource", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n        if (width < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: width is negative: \"\n                    + text));\n        }\n        text = text.substring(text", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       i20 = i18 + 1;\n        i21 = i16 + i19;\n        i22 = i20 + i19;\n        i23 = i22 + i24;\n        i24 = i23 +", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // TODO: Add support for \"denyAfter\" constraint\n                // The \"denyAfter\" constraint is not supported yet.\n                // It is a string in the format \"denyAfter YYYY-MM-DD\"\n                // It is used to disallow a", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     // Get the unit number from the proxy cell's user object.\n      ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      // Get the unit number from the proxy cell's user object.\n      int unitNum = proxyInfo.getUnitNumber();\n", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef save(self, path):\n    \"\"\"Saves the collection to disk.\n    Args:\n        path: The path to save the collection to.\n    Returns:\n        None\n    \"\"\"\n    for artist in self.collection:\n        artist_subpath = '/%", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Checks that the given class loader is not the platform class loader.\n", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Gets a value indicating whether the order can be marked as paid\n\t\t/// </summary>\n\t\t/// <param name=\"", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setFormatName(formatName);\n        autoNumberingScheme.setSchemeClassName(scheme", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (Read<int> ().SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n    return self._conf_helper('current_ch', 'status_ch', 'setpoint', 'setpoint_ch', 'setpoint_unit', 'setpoint_ch_unit', 'setpoint_ch_scale', 'setpoint_ch_offset', 'setpoint_ch_", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Run the compiled code.\n   * <P>\n   * This is the final step in the build process.\n  ", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).faces(\"+Z\").fillet(0.1)\n        This example will create a unit cube with all edges filleted::\n            Workplane().box(1,1,1).fillet(0.1)\n        \"\"\"\n", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    def __init__(self, i2c, address=MPU6050.MPU6050_ADDRESS_AD0_LOW):\n        self.i2c = i2c\n        self.address = address\n        self.reset()\n\nThis code initial", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf_file = get_pdf(item, \"item\", \"item_pdf\")\n\t\t\t\tpdfkit", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFEN", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.m_SetAttributes.IsEmpty && this.m_SetSkillBonuses.IsEmpty)\n                    list.Add(1072378); // Set Piece\n                else\n                    list.Add(1072379", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u00\");\n      }\n      d = (c >> 8) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append(\"0", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\t// This is the packet that is sent when a player joins the server.\n\t\t\t\t// It contains the player's name, and the player's color.\n\t\t", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue[0],\n            fields={'display_name': 'test_subtree'}\n        )\n        parent.children.append(node)\n        parent.save()\n        self.create_subtree_for_deletion(", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + i);\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = \"1e\" + i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertEquals(bundle.getIdentifier(), newBundlePushedAssets.get(0));\n    }\n    /**\n    ", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String sharedLinkId = postSharedLink(createTextFile(getMyNodeId(), \"test.txt\", content), \"test.txt\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj instanceof Number;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    // -----------------------------------------------------------------------\n    // Test for NumberUtils.isLong(String)\n    // -----------------------------------------------------------------------\n    @Test\n", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                }\n                                else if (", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n        if replace:\n            self.unlink(cr, uid, [res.id or False], context=None)\n\nThis line of code is used to delete any existing record in the ir_model_data table that matches the given criteria (model, key, name, res_id,", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode() {\n            actionTL.", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tthis.addImage(new ImageHelper(102179, \"images/icons/16x16/", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n\n        encodeBytesToBytes( source, off, len, options, encoded, 0 );\n\n        return encoded;\n    }\n    /**\n     * Encodes a byte array into Base64", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger temp = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = temp;\n\t\t\t\tBigInteger temp2 = u3;\n\t\t\t\tu3 = u3.Subtract(q[0].Mult", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t\t_abi_info.Init (\"GstMessage\", typeof (Message), new GLib.FieldInfo[]", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_FILE_EXTENSION,\n                            \".xmi\");\n                } else {\n                    Configuration.setString(\n                            Pers", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ssi1 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ssi2 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "\n            field = model_class._meta.get_field(unique_check[0])\n            params['field'] = field.name\n            params['field_label'] = six.text_type(capfirst(field.verbose_name))\n        # A unique_together constraint\n", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\n    paramtestdic = {}\n\nThis line creates an empty dictionary called `paramtestdic` which will be used to store the parameters to test during the optimization process.\n\nThe `paramtestdic` dictionary will be populated with the values of the parameters to be optimized during the", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n    for line in inpart:\n        heads.append(line)\n\nReplace it with:\n\n    heads = inpart.read(inpart.tell()).splitlines()\n\nThis will read the entire part and split it into lines.", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n        cell_attributes = literal_eval(cas_data_str)\n\nThis line of code is used to parse the cell attributes data from the clipboard\nand convert it into a Python object. The `literal_eval` function is used to\nparse the string representation of the cell", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_mask.GetPixel(x, y)) {\n\t\t\t\t\t\tmask_bits[y * (width / 8) + (x / ", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the days in the date range passed in.\n\t\t\tfor(DateTime date=dateStart;date<=dateEnd;date=date.AddDays(1)) {\n\t\t\t\t//Loop through all the operatories that are flagged for Web Sched", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3Strnicmp( pMem1.z, pMem2.z, pMem1.n );\n        return rc;\n        //rc = sqlite3Strnicmp( pMem1.z, pMem2.z, pMem1.n );\n", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "               data.PowerRegenFlatModifier[i] = packet.ReadSingle(\"PowerRegenFlatModifier\", indexes, i);\n                }\n                }\n            }\n            if (changesMask[130])\n            {\n                for (var i =", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       # seq = seqs[nidx]\n        # seqarr = np.array(list(seq))\n        # seqarr[self.gtrim[1]:self.gtrim[3]] = 110  # n\n        # seqarr[self.gtrim[1", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index classIndex = allClasses.getIndexByTag(classRef.tag);\n            if (classIndex == null)\n                return null;\n            Index[] classIndexes = indexByTagAndClass[tag];\n            if (classIndexes == null) {\n                class", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 5;\n            this.quoteLabel.Text = \"This is a quote.\";\n            this.quoteLabel.Visible = false;\n            //\n           ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           if rule._freq == 1:\n                data['interval'] = 1\n            elif rule._freq == 2:\n                data['interval'] = 2\n            elif rule._freq == 3:\n                data['interval'] = 3\n            elif rule._", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output stream\n                Array.Copy(curr, 0, fout.ToArray(), fout.Length, bytesPerRow);\n                // Copy the decoded row to the previous row buffer\n                Array.Copy(curr, 0", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        AMainDS.AApAnalAttrib.DefaultView.RowFilter = String.Format(\"{0}={1} AND {1}={2}\",\n                            AApAnalAttribTable.GetApDocumentIdDBName(), Row.ApDocumentId,\n                            AApAnalAttribTable", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (m_RewardItem != null && m_RewardItem.Deleted)\n\t\t\t\t{\n\t\t\t\t\tm_RewardItem = null;\n\t\t\t\t}\n\t\t\t\tif (m_RewardItem != null && m", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int i = firstItemIndex;\n\t        int j = lastItemIndex;\n\t        while (", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.Controls.Add(AControlLabel);\n                if (AControlLabel != null)\n                {\n                    AControlLabel.AutoSize = true;\n                    AControlLabel.Width = 100;\n                    AControlLabel.Height = ", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Legal values for the Dyn d_tag field.\n# The following values are defined by the GNU extension.\nDT_PPC64_GOT_TLSGD = (DT_LOPROC + 0)\nDT_PPC64_GOT_TPREL = (DT_", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to complete\n\t\t\tif(!mReadDone.WaitOne(3000, false))\n\t\t\t\tthrow new WiimoteException(\"Timed out waiting for read\");\n\t\t\treturn m", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n    def _query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf):\n        metric = np.array([1.0] * x.size)\n        metric[1] = math.cos(x[1", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightFirst2()\n\t{\n\t\tString acn = \"1. Nf3\";\n\t\tGame game = game(null,", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (Exception e)\n    {\n      return null;\n    }\n  }\n  /**\n   * Draw the base selection rectangle.\n   **/\n  private void drawBaseSelection(Graphics g) \n  {\n    if(getSelection().isEmpty()) \n      return", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Check if the new sector is not already linked to the old geometry\n\t\t\t\t\t\t\t\t\tbool newsector", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = Document.objects.create(\n            parent_topic=parent_doc,\n            locale=document_locale,\n            title=parent_doc.title,\n            slug=parent_doc.slug,\n            category=parent_doc.category,\n            is_template=", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n            // now we'll create new rows and columns\n            lNewWidths = new float[lTotalColumns];\n            lNewWidths[0] = 1;\n            lNewWidths", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t\t\tnode.Value.Nodes.Remove(trait);\n\t\t\t\t\t\t// Replace InvulnerabilityUpgrade\n\t\t\t\t\t\ttrait = node.Value.Nodes.First", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\n    return self.__class__(values, key=self._key)\n\nThis line of code creates a new instance of the SortedKeyList class with the\nupdated list of values and the same key function as the original sorted-key\nlist. This ensures that the new sorted-key list will maintain", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the loading of a batch of instances.\n        This method is called by the :meth:`.Session.flush` method\n        after all instances have been loaded into the session.\n        It is responsible for setting the", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"You may not wear this.\");\n", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221,", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "       private string FormatLogData(IDictionary data, int indent = 0)\n        {\n            string result = \"\";\n            foreach (KeyValuePair<string, object> entry in data)\n            {\n                string key = entry.Key;\n                object value = entry.Value", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[last + 1 + BZip2Constants.NUM_OVERSHOOT_BYTES];\n\t\t\t\n\t\t\tquadrant = new int[last + 1 + BZip2Constants.NUM_OVERSHOOT_BY", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        //                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        //                        int y = args[2] + ScreenTop;\n                        //                        int obj = findObject(x, y);\n                        //                        if", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (iFile != null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tdouble\n\tdistance( final P pt1\n\t\t\t, final P pt2\n\t\t\t)\n\t{\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(), B()> ByVal value As Object, <C(A1:=false, A2:=true), D()> ByRef index As Integer) As Integer{0}\" +\n\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinRShot2\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            newHouse.MoveToWorld(m_House.Location, m_From.Map);\n                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplotID = plotID+1;\n\t\tplot = new Plot(plotID);\n\t\tplot.setFrameSize(640, 480);\n\t\tplot.setLimits(0, 1000, 0, 1000", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if self.widgetRename:\n                widgetName = xbmcgui.Keyboard().execute(title=LANGUAGE(32049), text=widgetName, default=widgetName, hidden=True)\n                if widgetName:\n                    self._add_add", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }\n\n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n     * a byte array instead of instantiating a String. This", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
