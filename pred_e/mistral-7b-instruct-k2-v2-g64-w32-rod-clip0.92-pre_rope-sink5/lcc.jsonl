{"pred": "\t\t\tprimerak.setInvKnj(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(raspodela", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        return class_contents\n    source.put('[')\n    return None\n\nThe code given above is a regular expression parser. It takes a string as input and returns a pattern object. The pattern object can be used to match strings against the regular", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn.predict(total)\n#print(knn.predict(total))\n#print(knn.predict(total)[0])\n#print(knn.predict(total)[0]==4)\n#print(knn.predict(total)[0]==4.", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 1L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 99, null);\n        assertFalse(listener.isInvoked());\n    }\n   ", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setSelected(true);\n                item.setForeground(GUI.display.getSystemColor(SWT.COLOR_DARK_GRAY));\n                item.setGrayed(false);\n                item.setExpanded(true);\n                break;", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n\n        searchBox.setText(this.searchText);\n        hasUpdate.setSelected(this.isUpdate);\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\treturn;\n\t\tInputStream is = new FileInputStream(", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of this code is, but it seems to be a Python script that translates GTK events to Pygame events. The script defines a `Translator` class that listens for events on a GTK window and", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\n    if kwargs[\"check_stability\"]:\n        check_stability_result, test_status = check_stability(**kwargs)\n        if not check_stability_result:\n            logger.critical(\"Stability check failed\")\n            return False, test_", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def getState(self):\n        \"\"\" Returns the current state of the wavemeter.\n        @return str: 'idle', 'running', 'deactivated'\n        \"\"\"\n        # check the state of the wavemeter\n        state = self._wavemeterdll.", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustSupportStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.CHAT.getStatusName(),\n            PresenceStatus.DND.getStatusName(),\n            PresenceStatus.ERROR", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this);\n                        }\n                    });\n                }\n            }\n            poll.Options = options;\n            await StartVote(poll);\n            return true;\n        }\n        private void MapVoteEnded(object sender,", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing)\n\t\t\t\t\treturn null;\n\t\t\t\tif (error != null)\n\t\t\t\t\tthrow error;\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tstring[]", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        interface=dict(type='str', required=True),\n        param_type=dict(type='int', choices=[INTERFACE_ALL, INTERFACE_TYPE,", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   return s.matches(\"^[0-9,]*$\");\n  }\n  public void setProperties(ISVNLocalResource resource) throws SVNException {\n    if (resource instanceof ISVNRemoteResource) {\n      ISVNRemoteResource remoteResource = (ISVN", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an item\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_l", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 280);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\n    behavior = []\n    for o in observations:\n        behavior.append({\n            'code': o['code'],\n            'category': translations_dict[o['code']]['category'],\n            'note': translations_dict[o['code']]['note'],\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        @param: handles        -- A list of handles of people\n        @return: (males, females, unknown)\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle takes off from the ground and stays in the air.\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayloadAsBytes(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn buffered", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            persistToMemento();\n        }\n    }\n    /** Persist the input to memento.\n     *\n     *  <p>This is called when the input changes,\n     *  but only if the view is", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && launcher != null && component.isEnabled() && launcher.isEnabled() && launcher.isPopupTrigger(e)) {\n// TODO: Add a delay to avoid popup opening when the user clicks on the text component\n// and then immediately clicks on the", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_with_newlines(self):\n        name = parse_tables.clean_name(\"A Very Long Name That Splits \\nOver Lines\")\n        assert name == \"A Very Long Name That Splits Over Lines\"\n\n    def", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'displayname':\n            key_func = lambda x: x[1]['displayname']\n        elif sort[0] == 'uploadDate':\n            key_func = lambda x: x[1]['uploadDate']\n        else:\n            raise ValueError(\"", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                {\n                    index = -1;\n                    return false;\n                }\n                Current", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    path = os.path.abspath(os.path.join(parentpath, path))\n\n    return localrepo.localrepository.instance(ui, path, False)\n\nThe code is trying to find the parent directory of the repository, which is\nused to construct the URL", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\n    structured['logger_name'] = self.name\n\nThis line sets the 'logger\\_name' key in the structured dictionary to the name of the logger. This is useful for including the logger name in the log message, which can help with debugging and understanding the source of the log message.\n", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\",\n                                   text=auth_message, navtrail=navtrail)\n\nThis line checks if the user is authorized to run the BibEdit action. If\nthe user is not authorized, it redirects", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nimport os\nimport re\nimport sys\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\nfrom ansible.utils.compat import (\n    PY2,\n    PY3,\n    PY35,\n   ", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.get(x).__orderby;\n\t\t\tif(index < 0)\n\t\t\t\tindex = x;\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    if page_count:\n        record_add_field(rec, '300', ind1=' ', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record if it exists. The field added is '", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\n```\n                (PacketField(\"commandSpecificData\", ENIPSendUnitData,\n                             ENIPSendUnitData),\n                 lambda pkt: pkt.commandId == 0x70),\n                # Send Unit Data\n                (PacketField(\"commandSpecificData", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridEnvelope(sourceFile);\n\t\t\n\t\t// Extracting the GeoTIFF file's metadata\n\t\tfinal GeneralEnvelope geoEnvelope = reader.getGridGeometry().getEnvelope2D();\n\t", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you're trying to achieve with the last line", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y )\n\t\t\t{\n\t\t\t\tbin.", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house == null)\n                    house", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(display", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if os.path.splitext(fname)[1] in reader.extensions:\n        return reader\n```\n\nThis code searches through the list of supported readers to find the one that matches the file extension of the given filename. If", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth != -1) continue;\n\t\t\t\t\t\t// find the top-level cell that this cell is connected to\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 191: // / key\n                if (down)\n                {\n                    Program.keyCAPS_V = (Program.keyCAPS_V & (~4));\n                    Program.keyB_SPC = (Program.keyB_SPC", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of the distortion matrix']\nout_units += ['']\n\nPlease complete the code to store the weights of the distortion matrix in the\noutput file.\n\nThe code should store the weights", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n    lines = obj.split(\"\\n\")\n    if implementation == RisImplementation.WOK:\n        ris = Wok(lines, mapping, strict=strict)\n    else:\n        ris = Ris(lines, mapping, strict=strict)\n    return list(ris.parse())", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateSinglePlayerScore(opponent.getValue(),\n                    opponentPlayers);\n            log.info(\"Strength of \" + player.getName() + \" is \" + strength);\n        }\n        tableStrengthScore.setPlayer(player);\n       ", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_public_mode_off_with_auth(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (autoscroll) {\n            handler.post(new Runnable()", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
