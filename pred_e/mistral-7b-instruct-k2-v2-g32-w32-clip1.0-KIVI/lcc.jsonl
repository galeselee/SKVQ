{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gbk\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        source.get()\n        if source.get() == class_name:\n            source.get()\n            return class_contents\n        source.put('[')\n        source.put(class_name)\n        return _parse_", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn = KNeighborsClassifier()\n#knn.fit(mnist.data, mnist.target)\n#prediction = knn.predict(img)\n#print(prediction)\n\nI have to use the KNeighborsClassifier()", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setSelected(true);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        SettingsSaver.saveSettings(fetcherGui);\n    }\n    private void setTree", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (file == null)\n\t\t\treturn;\n\t\tif (bitmap != null)\n\t\t\tbitmap", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of the _MockEvent class is, but it seems like it's being used to simulate a key event. Here's how I would complete the code:\n\n```python\nclass _MockEvent(", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\nif __name__ == \"__main__\":\n    setup_logging(sys.argv[1:])\n    if len(sys.argv) < 2:\n        print(__doc__)\n        sys.exit(1)\n    if sys.argv[1] == \"list", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength read by the wavemeter in nm (vac).\n        @return float: current wavelength\n        \"\"\"\n        # lock the mutex to prevent concurrent access\n        with self.threadlock", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            Presence.away, Presence.chat, Presence.dnd, Presence.x,\n            Presence.available, Presence.subscribe, Presence.subscribe2,\n            Presence.unavailable", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await poll.Setup(null, options, null, \"Pick a map for the next battle\");\n            ActivePoll = poll;\n            return true;", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = Assembly.LoadWithPartialName (name);\n\t\t\t\t}\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tif (error != null)\n", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(\n        dict(\n            interface=dict(type='str', required=True),\n        )\n    )\n    module = AnsibleModule(argument_spec=argument_spec)", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   Pattern pattern = Pattern.compile(\"^[0-9,]+$\");\n    Matcher matcher = pattern.matcher(s);\n    return matcher.matches();\n  }\n  public boolean isValid(ISVNRemoteResource remoteResource, ISVNLocalResource localResource", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an auction\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            for (int k = ", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(281, 300);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = {\n    'tour': tourlist,\n    'observations': observations,\n    'translations': translations_dict,\n    }\n```\n\nThis line of code is creating a dictionary called `behavior` that contains three keys: 'tour", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        Return the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for handle in handles:\n            person = self.report.database.get", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle takes off from the ground and hovers at a given altitude\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_PACKET;\n\t\t\t}\n\t\t\tbreak;", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            final IMemento memento = getViewSite().getPerspective().getPerspectiveState();\n            final IMemento inputMem = new XMLMemento(input);\n            final IMemento factoryMem = new XMLMemento(", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && component.isEnabled() && component.isFocusOwner() && component.getComponentFromPoint(e.getPoint()) == component) {\n    launcher.launchPopup(e);\n}\n}\n    }\n}\n\nI'm trying to add a", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        name = parse_tables.clean_name(\"John Michael Collins\")\n        assert name == \"John Michael Collins\"\n\nThis test checks that the `clean_name` function correctly handles names with two-word", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('display_name')\n            sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                if (index >= list.Count)\n                {\n                    return false;\n                }\n                Current = list[index];\n                index++;\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    path = os.path.join(parentpath, path)\n\n    return localrepo.localrepository.instance(ui, path, create)\n\n# vim: set filetype=python :", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\nstructured_record = logging.LogRecord(name, level, msg, args, fn, lno, msg,\n                                       exc_info, structured, kwargs)\n\nThis line creates a new LogRecord object with the structured data. The\nLogRecord object is the basic data structure used", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n\n        # Checking if currently logged user has permission to create a new record\n        if not user_can_edit_record_collection(req,", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import Connection\nfrom ansible.utils.display import Display\nfrom ansible.utils.compat import to_text\nfrom ansible.utils.shell import shell_escape\nfrom ansible.utils.", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tif(dataString.length() > 0)\n\t\t\t\tdataString += ims.dto.NASMessageCodes.RECORDSEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record. The page count is stored in the `page_count` variable, which is set by the", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendRRData(CommandSpecificData):\n    \"\"\"Send RR Data Command Field\"\"\"\n    name = \"ENIPSendRRData\"\n    fields_desc = [\n        LEShortField(\"itemCount\", 0),\n        PacketListField(\"item\", None,", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// reading metadata\n\t\tString metadata = JAXBContext.newInstance(MetocElementType.class).createMarshaller().marshal(metocDictionary.getMetoc().get(0));", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name().toLowerCase() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you want to do with the `Creat", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tint* cur = (int*)line;\n\t\t\tint* end = (int*)( line + bd.Width", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions[0]):\n        return reader\n```\n\nThis code is used to find the appropriate reader for a given file based on its extension. It iterates over the list of supported readers and checks", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 191: // -/+ key\n                if (down)\n                {\n                    if (CAPS)\n                        Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                    else\n                    {\n                       ", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of the distortion matrix']\nout_names += ['NP_' + name for name in names]\nout_list += [num_pairs_all[index]]\nout_comment +=", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n```python\nif obj.startswith(b\"\\xef\\xbb\\xbf\"):\n    obj = obj[3:]\n```\n\nThis code checks if the string starts with the UTF-8 BOM (Byte Order Mark) and if it does, it rem", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the U", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += calculateOpponentTableStrength(opponent.getValue(),\n                    opponentPlayers);\n\n            // TODO: calculate the table strength of the opponent\n            // and add it to the table strength of the player\n        }\n        tableStrengthScore.setPlayer", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_range_requests(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        with web.app.test_client() as c:\n            # Load / with valid auth\n", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > Constants.NSCLIENT_MAX_LOG_", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    # Fix up the makefile for 64bit builds\n    if arch == \"amd64\":\n        create_makefile64(makefile, m32)\n        fix_makefile(makefile)\n\n    # Now we can build OpenSSL\n    print(\"", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self):\n        \"\"\"tests that we can convert a .properties file to .po\"\"\"\n        propsource = \"\"\"\nSAVEENTRY=Save file\n\"\"\"\n        proptemplate = \"\"\"\nmsgid \"Save file\"\nmsgstr \"\"\n\"\"\"\n        outputpo", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n    # The following line is used if you cannot bear to see the warnings\n    # module.params['warnings'] = False\n    # The following line is used if you want", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return Enumerable.Range(0, prevChildren.Length)\n                .Select(i => childFactory(query.Parent, (i + 1) + \"-\" + (i + prevChildren.Length), \"virtual-grouping/\" + i, () => prevChildren.Skip(", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteWithMultipleResponses(self):\n        \"\"\"\n        TCP: Short write to client with multiple responses\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static RustTokenId getByCategory(TokenCategory category) {\n        for (RustTokenId token : values()) {\n            if (token.category == category) {\n                return token;\n            }\n        }\n        throw new IllegalArgumentException(\"No token found for", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(LabelForDescriptionControlID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(LabelForTitleControlID);\n        }\n        public Control GetLabelForPercentage()\n        {", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args['Bucket'] = bucket\n        query_args['Key'] = key\n        query_string = urllib.urlencode(query_args)\n        url = self.calling_format.build_url_base(self.protocol, host, '', path) + query", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), new RectF(left, top, right, bottom), null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\nHueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x13B, 0x13B));\nHueInfo.Add(D", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(), c -> {\n                    if (c.getResultCode() == 200) {\n                        this.alertDialog.show(MSGS.certificateDeleted());", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    for filename in os.listdir(self.dbm_dir):\n        if filename.endswith(ext) and os.access(os.path.join(self.dbm_dir, filename), os.F_OK):\n            list.append(os.path.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return (filename != null ? filename : location.toExternalForm()) +\n                (description != null ? \" (\" + description + \")\" : \"\");\n    }\n    /**\n     * Returns the accessibility context for this object.\n     *\n     * @return the accessibility context for", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only include plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    connection = Connection(\n        host=module.params['host'],\n        username=module.params['username'],\n        password=module.params['password", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n            throw new IOException(\"Stream has not been marked\");\n        }\n        fileDecoder = clone(savedDecoder);\n    }\n    /**\n     * Returns the underlying object that is being decoded.\n     *\n     * @return the object being decoded.\n     */\n    public", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        # If publication does not exist, create it:\n        if not publication.exists:\n            changed = publication.create(tables, params, owner, check_mode=module.check_mode)\n        # If publication exists, update it:\n        else", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "int version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\"\"\"\n        # Note that this function requires the pre-sigmoid activation as\n        # input.  To understand why this is so you need to understand", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: This is a hack to get the FigRole to be created\n        // before the FigOrdering.  It is not a good solution.\n        // We should be able to create the FigRole and FigOrdering\n        // in the same constructor.\n        role = new Fig", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    LogManager.GetCurrentClassLogger().Error(\"Performance counter initialization failed: \" + ex.Message);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "===================\n\nHere is the code for the next line:\n\n```python\nfor i in range(10):\n    full_name = pjoin(cfg.webdav_backend_directory, \"foo-%d\" % i)\n    assert os.path.isfile(", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    label = args[0]\n#    if", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append(self.data.read(cur.offset + prog_ofs, file_len))\n\t\t\t\tlen -= file_len\n\t\t\t\tofs += file_len\n\t\t\telse:\n\t\t\t\tresult.append(self", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder(value.substring(0, startIndex));\n\t\t\twhile (startIndex != -1) {\n\t\t\t\tint endIndex = value.indexOf(\"%}\", startIndex);\n\t\t\t\tif (endIndex == -1) {\n", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(ASN1Boolean.encode(ASN1Boolean.valueOf(includeAuthNEntry)));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encode(ASN1Boolean.valueOf(includeAuthZEntry)));", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.instance();\n\t\t}\n\t}\n}\n\nThe code is a part of a library for Android called SweetBlue. It manages the storage of options in the device's shared preferences. The options include the last disconnect state, whether a device needs bond", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead, CallNumber.ToString()));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(text.indexOf(\" width=\") + 6));\n        }\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       Dlasdq.dlasdq(\"U\", i16, i15, i17, i11, i21, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // The constraint entry is a key=value pair.  Split the entry\n                // into key and value.\n                int index = constraintEntry.indexOf('=');\n                if (index < 0) {\n                    throw new IllegalArgumentException(\n                            \"Invalid", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      DefaultPort proxyPort = (DefaultPort) proxyCell.getChild(0);\n      DefaultPort devicePort = getDevicePort(deviceCell, proxyInfo.getUnit());\n      edge = new Proxy", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef write_to_disk(self, path):\n    \"\"\"Writes the collection to disk.\n    Args:\n        path: The path to write the collection to.\n    Returns:\n        None\n    \"\"\"\n    for artist in self.collection:\n        artist_sub", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Returns the configuration for this layer.\n     *\n     * @return", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tShip(order, false);\n\t\t\t}\n\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t}\n\t\t/// <summary>\n\t\t/// Gets a value indicating whether the order can be marked as paid\n\t\t/// </", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n```python\nreturn self._conf_helper('current_ch', 'sense', 'setpoint', 'output', 'output_en', 'output_mode', 'output_level', 'output_unit', 'output_scale', 'output_offset', 'output_delay', 'output", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Run the compiled code.\n   * <P>\n   * This is done by creating a new instance of the main class", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        if not solidRef:\n            raise ValueError(\"No solid found to fillet!\")\n        if len", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    # Writing final memory update 6/7 (function unknown)\n    j = 0\n    dmpUpdate = []\n    while ((j < 4) or (j < dmpUpdate[2] + 3)):\n        dmpUpdate.append(self.dmpUp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf_path = get_pdf(item.name)\n\t\t\t\tif pdf_path:\n\t\t", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.m_SetAttributes.IsEmpty)\n                    this.m_SetAttributes = new AosAttributes(this);\n                if (this.m_SetSkillBonuses.IsEmpty)\n                    this.m_SetSkillBonuses = new A", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"\\\\u\");\n         sb.append(Integer.toHexString(c));\n         sb.append(\";\");\n         return;\n      }\n      d = (c >> 8) & 0x3f;\n      if (d < 10)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.Disconnect)\n\t\t\t{\n\t\t\t\t// This is the disconnect packet, so we need to check if the player is still logged in.\n\t\t\t\tint who = e.Player;\n\t\t\t\tif (", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue[0],\n            fields={'display_name': 'new node'}\n        )\n        node.save()\n        for category in category_queue[1:]:\n            self.create_subtree_for_deletion(", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + (i * -1));\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertEquals(htmlPageAsset.getIdentifier(), newBundlePushedAssets.get(0));\n    }", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       Paging paging = getPaging(0, 100);\n\n        // As user 1: Create a file in My Files\n        String myFolderNodeId = getMyNodeId();\n        String fileName = \"file\" + RUNID + \".txt\";\n        Document", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj instanceof Number;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    // ----------------------------------------------------------------------\n    // Testing of the isLong(String) method\n    // ----------------------------------------------------------------------\n    @Test\n", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached to parent grappling part: \" + grapple);\n                                }\n                                else if (grapple.", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n    if res:\n        if replace:\n            self.unlink(cr, uid, [res.id], context=context)\n        return self._update(cr, uid, model, module, {'value': value}, xml_id=xml_id, store=True, context=", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setAction(int action) {\n            // It would", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImagePath(102100, \"images/alert.png\", new Integer(16), new", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n\n        int pos = 0;\n        for( int i = off; i < off + len; i++ ) {\n            encoded[pos++] = encode3to4( source[i], ", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecision\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu3 = v3;\n\t\t\t\tv3 = q[1];\n\t\t\t\tBigInteger temp = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = temp - q[0].magnitude[0", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message), new GLib.AbiField[] {\n\t\t\t\t\t\tnew GLib.AbiField (\"handle\", typeof (", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    name = name.substring(0, name.length() - 4);\n                }\n                Configuration.setString(\n                        PersistenceManager.KEY_PROJECT_NAME, name);\n                return", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('tutorial_detail__tutorial__level__code', False, 'Level'),\n                6: SortableHeader('tutorial_detail__tutorial__tutorial_order', False, 'Order'),\n                7: SortableHeader('t", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[] s121 = new string[] { \"hello\"};\n            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s122 = new string[] { \"world\" };\n            string[][] ss1", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "\n            field_name = unique_check[0]\n            field = opts.get_field(field_name)\n            params['field'] = field_name\n            params['field_label'] = six.text_type(capfirst(field.verbose_name))\n        # A", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\n    paramout.close()\n\nThis line is closing the file that was opened at the beginning of the program to write the report.\n\nYou should add the following lines of code to read the current step values from the file \"list_param.out\" and assign them to the variable `currentstep", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n    for head in h.splitlines():\n        heads.append(head.strip())\n\nPlease complete the code above to split the string `h` into a list of heads.\n\nThe list of heads should be stored in the `heads` variable.\n\nYou can use the `strip", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n\n        ca_repr = literal_eval(cas_data_str)\n\nThis line of code is used to convert the binary data of the clipboard into a\nPython object that can be used by the program. The `literal_eval()` function\nis used to", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel (x, y);\n\t\t\t\t\tif (pixel.ToArgb() == cursor_pixel.ToArgb()) {\n\t\t\t\t\t\tcursor_bits[y * (width / 8) + x /", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the operatories and find open time slots.\n\t\t\tforeach(long opNum in listWebSchedOpNums) {\n\t\t\t\tOperatory operatory=Operatories.GetOperatory(opNum);\n\t\t\t\tif(operatory", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3Strnicmp( pMem1.z, pMem2.z, pMem1.n );\n        return rc;\n        }\n        else\n        {\n          Debug.Assert( pMem1.zBLOB != null && pMem2.zB", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "               data.Power[i] = packet.ReadInt32(\"Power\", indexes, i);\n\n                }\n                }\n            }\n            if (changesMask[130])\n            {\n                for (var i = 0; i < 6", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       seq = seqs[nidx]\n        seqarr = np.array(list(seq))\n        # enter each SNP \n        for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n           ", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index[] indexes = indexByTagAndClass[tag];\n            if (indexes == null) {\n                indexes = new Index[allClasses.size()];\n                indexByTagAndClass[tag] = indexes;\n            }\n            int ix = all", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"Quote:\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           data['recurrency'] = True\n            data['rrule_type'] = rule._freq\n            if rule._freq == 1:\n                data['interval'] = 1\n            elif rule._freq == 2:\n                data['interval'] = 2\n            elif", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.WriteByte(curr[i]);\n                }\n                // Copy the current row to the previous row\n               ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return global::bnet.protocol.exchange_object_provider.ReportRefundRequest.DefaultInstance; }\n    }\n\n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n\n    public static pbd::MessageDescriptor Des", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        AMainDS.AAnalysisAttribute.DefaultView.RowFilter = String.Format(\"{0}='{1}' AND {2}='{3}'\",\n                            AAnalysisAttributeTable.GetDetailNumberDBName(), Row.DetailNumber,\n                            AAnalysisAttributeTable.", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (CanSeeReward)\n\t\t\t\t{\n\t\t\t\t\t// reward the player\n\t\t\t\t\tif (RewardItem != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// give the reward item\n\t\t\t", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, key, 0, items.Length", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               if (AControlLabel != null)\n                {\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                }\n                ArgumentPanel.Controls.Add(AControl);\n                if (AAutomaticClearButton)\n                {\n                    Button", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define the Dyn structure for PowerPC64\nclass DynPPC64(CStruct):\n    _fields = [ (\"d_tag\", \"u32\"),\n                (\"d_val\", \"u64\") ]\n\n# Define the Dyn structure for PowerPC", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to complete\n\t\t\tif(!mReadDone.WaitOne(3000, false))", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n    def _query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf):\n        # ...\n        # priority queue for the nearest neighbors\n        # entries are (-distance**p, i)\n        neighbors = []\n", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightFirst_2()\n\t{\n\t\tString acn = \"1. Nf3\";\n\t\tGame game = game(null", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (Exception e)\n    {\n      return null;\n    }\n  }\n  /**\n   *  Draw the features of the given FeatureVector into the given Graphics\n   *  object.\n   *  @param g The object to draw into.\n   *  @", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t\tGeneral.Map.Map.AddSector(", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = parent_doc.translate(user, document_locale, based_on_rev)\n    except Document.TranslationError:\n        message = _lazy(u'This document cannot be translated.')\n        context = {'message': message}\n        return render(request, 'hand", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n\n            // now we'll create new tables\n            lNewWidths = new float[lTotalColumns];\n            lNewHeights = new int[lTotalRows];\n            lNewRows =", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchBlendTree( Object unityObject )\n\t\t{\n\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityMultiplier@EXPERIENCE\", new MiniYaml(\"\")));\n\t\t\t", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\n    return self.__class__(values, key=self._key)\n\nThis line of code creates a new instance of the SortedKeyList class with the\nupdated values and the same key function as the original instance.\n\nThe SortedKeyList class is a subclass of the SortedList", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize loaded state for a set of states.\n        This method is called by the :meth:`.Session.flush` method\n        after all objects have been loaded from the database.\n        It is responsible for finalizing", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221,", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "       return ToJson(result);\n    }\n    private string FormatLogData(IDictionary data, int indent = 0)\n    {\n        string result = \"\";\n        foreach (KeyValuePair<string, object> entry in data)\n        {\n            string key = entry.Key", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[BZip2Constants.MAX_BLOCK_SIZE + BZip2Constants.NUM_OVERSHOOT_BYTES];\n\t\t\tquadrant = new int[BZip2Constants.MAX_BLOCK_SIZE + BZip2Constants", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        //                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        //                        int y = args[2] + ScreenTop;\n                        //                        int x2 = x + 16;\n                        //                        int", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (iFile != null)\n                        iFile.close();\n                }\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex.toString(), ex);\n            }\n        }\n", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\n\t\t\t// trackSegmentError is the error of the solution (max distance of all discarded points to the simplified path)\n\t\t\t// trackSegmentError is the error of the solution (max distance of all discarded points to the simpl", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<C(A1:=false, A2:=true), D()> ByVal value As Object, <E(A1:=false, A2:=true), F()> ByRef", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxQ\",\n                    Slot = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            newHouse.MoveToWorld(m_House.Location, m_From.Map);\n                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(getImage(), getFirstString(), getLastString(), getLastArg());\n\t\tplot.setFrameSize((int)getFirstArg(), (int)getLastArg());\n\t\tplot.setLimits(getFirstArg(), getNextArg(), getNextArg", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if widgetName is None or widgetName == \"\":\n                widgetName = selectedShortcut.getProperty( \"label\" )\n            else:\n                widgetName = widgetName.replace( \"$\", xbmc.getInfoLabel( widgetName ) )\n                if widgetName ==", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }\n    /**\n     * Encodes a portion of a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   G", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n    def run_command(self, cmd, input=None, sudo=False, shell=True,\n                    env=None, executable=None, cwd=None,\n                    stdout_callback=None, stderr_callback=None,\n                    timeout=None", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i].Title [0] == c){\n\t\t\t\t\t\t\tSelected (Menus [", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + pixelStride > data.length) {\n            throw new RasterFormatException(\"Data buffer too small\");\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "\n    def get_shared_meminfo(self):\n        \"\"\"\n        Returns the VM's shared memory information.\n        :return: Shared memory used by VM (MB)\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get shared memory info", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   return delta_sync(g.namespace.id, args['cursor'], args['exclude_types'],\n                       args['include_types'], args['exclude_metadata'],\n                       args['exclude_folders'], args['exclude_account'],\n                       args['timeout'],", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   objects = CourseEnrollmentManager()\n    class Meta(object):\n        db_table = \"course_enrollments\"\n        unique_together = ((\"user\", \"course\"),)\n        index_together = ((\"user\", \"course\", \"mode\"),)\n        ordering", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\n    system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.setCustomValues(self.session,\n                                        system_id,\n                                        {k: None for k in keys})", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "\n    'xNotesOn': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('general-music', 'sequential-music',),\n    },\n\nPlease complete the code for `xNotesOn", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Renders the current instance, encoded in a specified\n\t\t///    ID3v2 version.\n\t\t///", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.CollidingGround = false;\n                chr.CollidingObject = false;\n                chr.CollidingTerrain = false;\n                chr.CollidingWater = false;\n                chr.CollidingPrim = false;\n                chr.Colliding", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "       for i in xrange(number_threads):\n            ts[i].start()\n    else:\n        for recid in hepdata_harvest_get_identifiers():\n            recs_queue.put_nowait(recid)\n    # spawn the status updater\n", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "   price_subtotal = fields.Float(string='Subtotal', compute='_compute_price', store=True, readonly=True)\n\nThis line should be moved after the _compute_price method definition.\n\n    quantity = fields.Float(string='Quantity', required=True,", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def _assembly_class(cls, *args, **kwargs):\n        \"\"\"\n        Returns a new Assembly containing the given populations.\n        \"\"\"\n        return cls(*args, **kwargs)\n\nYou can complete the code by defining the Assembly class as follows:\n\nclass Assembly(Base", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand)", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianRMis\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    /**\n     * @param nodeId                        the node ID\n     * @param nodeTypeQNameId               the node type QName ID\n     * @param nodeLocaleId                 ", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (isMainAxisRow) {\n        maxLineMainDim = Math.max(maxLineMainDim, mainDim);\n        totalLineCrossDim = crossPaddingAndBorderAxisMain + crossDim;\n      } else {\n        maxLineMainDim = Math.max(maxLineMain", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis y2Axis", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\");\n            return ret;\n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param name", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof PlainView) {\n                    ((PlainView) c).setBidi(true);\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n        /**\n         * View for plain-text lines that support bidirectional", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tif (doc_processing) {\n\t\t\t\t\t\tif (xml_comment_buffer.Length > 0) {\n\t\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "\n    for dep in self.__deps:\n        dep.prepare(depEnv, depTools, depSandbox, stack, provideDeps, checkoutDeps)\n\nThis line of code prepares the dependencies of the recipe. The dependencies\nare processed in the order they are defined", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            foreach (DocumentContent content in pane.Items)\n            {\n                SaveLayout(xmlWriter, content);\n            }\n            xmlWriter.WriteEndElement();\n        }\n        void SaveLayout", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        &nbsp;&nbsp;&nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "=====================\ndef _number(text):\n    \"\"\"Converts a string to a number.\"\"\"\n    if text.isdigit():\n        return int(text)\n    else:\n        return float(text)\ndef _url_safe(text):\n    \"\"\"Converts a string", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "\n        self.serialize_union(output, field, desc)\n\nThis line of code is trying to call the `serialize_union` function with the\narguments `output`, `field`, and `desc`. However, it seems that the `field`\nargument is not defined anywhere in the code.", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "   # Update the permanences of the connected synapses\n    masterConnectedSynapses = masterConnected[masterValidConnected]\n    masterConnectedSynapses = masterConnectedSynapses.nonzero()[0]\n    masterConnectedSynapses =", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\n    if self.disks:\n      self.disks = [self.cfg.GetDiskInfo(d) for d in self.disks]\n\nshould be:\n\n    if self.disks:\n      self.disks = [self.cfg.GetDiskInfo(", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if isBoolean(vmap, 'action') and not hasDescription(vmap):\n        complt += '\\t\\t\\t\\t\\t\"-' + optionPrefix + vmap['option'] + '\" && ret=0\\n'\n    else:\n        complt +=", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "               if (m_ControlOrder == OrderType.Release)\n                {\n                    if (m_Allured)\n                    {\n                        Say(502003); // Sorry, but no.\n                    }\n                    else if (m_ControlOrder", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (parent != null) {\n            contains = parent.visibleBoundsContains(x, y);\n        }\n        return contains;\n    }\n    /**\n     * Returns true if the given point is contained within the bounds of the component\n     * \n     * @param p the", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (bmp_mono[n1] != bmp_mono[n1 + 1])\n                            {\n                                side1 += (bmp_mono[n1] - bmp_mono[n1 + 1]);\n                               ", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = 1.0 / 7.0;\n\t\t\t z[1] = 3.0 / 35.0;\n\t\t\t z[2] = 19.0 /", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tString table = databaseMeta.getQuotedSchemaTableCombination(null, tableName);\n\n\t\t// First, check if the table exists\n\t\tif (!checkTableExists(table))\n\t\t{\n\t\t\tthrow new KettleDatabaseException(\"Table [\"+table", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"IMPROVED EVASION\"};\n\t\t\tbonusFeats[4] = new String[] {\"TRACK\"};\n\t\t\tbonusFeats[6] = new String[] {\"TRACKLESS STE", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "       self.SetToolTipString(\"\")\n        self.StopPreviewTimer()\n        \"\"\"\n        self.SetToolTipString(\"\")\n        self.StopPreviewTimer()\n        self._tip_item = None\n    def OnEnterWindow(self, event):\n        \"\"\"\n        Hand", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverbLevel     (float reverblevel)\n        {\n            return FMOD_EventCategory_SetReverbLevel(eventcategoryraw, reverblevel);\n        }", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can you please", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    \n    \n/* ********  F I L E", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "               if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            if self.layoutNode == None:\n                self.builtWithNoXLF = True\n                log.", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                if(numBits == 1)\n                    return new BigInteger(1);\n                BigInteger result = new BigInteger();\n                uint halfBits = numBits >> 1;\n                uint half = (uint)Math.Sqrt((long)", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       if len(cdata) == 0:\n            return\n        # This optimization is not needed for the case where the indices are\n        # all constant.\n        # The optimization is only needed when the indices are not all constant.\n        # In that case, we need to check that the", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```\n    cls.add_method('Get',\n                   'bool',\n                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')],\n                   is_const=True, is_virtual=True, is", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Node subelem = body.getNode(0);\n                    if (subelem instanceof Node.JspBody) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    // Generate the", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (e.IsHandled)\n\t\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYS", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "       if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n        # load\n        mantidsimple.Load(Filename=md_file_path", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "\n    if package.endswith('.'):\n        package = package[:-1]\n\n    return package\ndef _import(name, globals, locals=None, fromlist=None, level=0,\n             import_=None):\n    \"\"\"Import the module named 'name", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateImplicitConversionError(diagnostics, syntax, expression, targetType);\n                return;\n            }\n            if (expression.Kind == BoundKind.DynamicObjectInitializerMember)\n            {\n                // The dynamic type is not known until runtime, so we can", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "           search_reg_str = search_terms.replace(' ', r'\\\\b\\\\w*\\\\b')\n            search_reg_str = r'\\b%s\\b' % search_reg_str\n        return self.search_terms_to_regex(search_ter", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "               if not self.__GetCglSection(FvImageSectionObj):\n                    return False\n\n            Obj.SectionList.append(FvImageSectionObj)\n\n        elif SectionName == \"PEI_DEPEX_EXP\":\n            DepexSectionObj =", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "   raise ValueError, 'No headers build phase for target %s' % self.Name()\n\nThis line raises a ValueError exception if there is no headers build phase\nfor the target. However, it is possible for a target to have multiple headers\nbuild phases, which is not allowed by the Xcode project", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "   data = remote_instance.fetch(url, post=post)\n\nThis line of code is used to fetch the data from the CATMAID server. The data\nretrieved is a dictionary containing the locations of all the nodes or\nconnectors specified in the input.\n\nThe data", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            useExponentialNotation = true;\n                            phase = 2;\n                            start = pos + exponent.length();\n                            continue;\n                        } else {\n                            throw new IllegalArgumentException(\"Invalid character '\" + ch + \"' in pattern \\\"\" +\n                               ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\n    def BeginBatchUndo(*args, **kwargs):\n        \"\"\"\n        BeginBatchUndo(self) -> bool\n        Begin a batch of undoable operations.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " [ -e /etc/init.d/lighttpd ] && /etc/init.d/lighttpd start\n  #\n  [ \"%(system)s\" = \"Web\" ] && exec /opt/dirac/Web/httpd/bin/lighttpd -f", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "   main()\n\nThe main function is called when the script is run. It initializes the argument specification,\nparses the arguments, and calls the function that performs the actual work.\n\nThe argument specification is defined using the `argument_spec` variable, which is a dictionary\ncontaining", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       m = ModeFactory.getMode(\"Channel_queries\", \"filter_child_subscriptions\");\n        // This line of code is causing the problem.\n        // The mode is not being found.\n        // The mode is defined in the file:\n        // /usr/share/r", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.loaded) {\n                        return true;", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s0;\n            state.s2 = s1;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  seed  values  S0", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\n        group.add_option(\"--debug\", dest=\"debuglevel\", default=None,\n                help=_(\"debugging output level\"), type='int',\n                metavar='[debug level]')\n\nThis line of code is incorrect. The option name should be \"debuglevel", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (Iterator i = values.keySet().iterator(); i.hasNext();) {\n                String name = (String) i.next();\n                DataElement de = (DataElement) data.get(name);\n                if (de != null) {\n                    //", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        moduleBeingBuilt.AddDebugDocument(existingDoc);\n                        continue;\n                    }\n                }\n                // create a new document for the pragma\n                var checkSum = new CheckSum(checkSumText, Guid.Parse(checkSumDirective.", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    while self.tok[0] != ')':\n                        if self.tok[0] == 'IDENT':\n                            params.append(self.tok[1])\n                            self.NextToken()\n                        elif self.tok[0] == ',':\n                            self", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "       option_value = json_d.get('option', '')\n        if not isinstance(option_value, basestring):\n            option_value = ''\n        return comment_value, option_value\n\n        # This is the old code, which does not unpack the JSON response.", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        if ( p.pResultSet[i_pMem] == null )\n        {\n          p.pResultSet[i", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n            pid = json_data['pid']\n       ", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               disk_type = expected_disk_spec['type'].lower()\n                valid_disk_types = ['thin', 'thick', 'eagerzeroedthick']\n                if disk_type not in valid_disk_types:\n                    self.module.fail", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static string GetMetadataName (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif (", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.Children = null;\n            }\n            /// <summary>\n            /// Collapse this branch and all its descendents\n            /// </summary>\n            public virtual void Collapse() {\n                this.CollapseAll();\n            }\n            /// <summary>\n           ", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       if not journal_id:\n            raise osv.except_osv(_('Error!'), _('No Journal defined for this company.'))\n        return {'acc_src': acc_src, 'acc_dest': acc_dest, 'journal_id': journal_id}\n   ", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        The adjusted dates, with the offsets applied.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busdaycalendar: An object that specifies a custom set of valid days.\n", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "               subsets = [slice(None)] * len(self.shape)\n                subsets[dim] = self._intersect_derive_subset(coord, points,\n                                                                bounds,\n                                                                inside_indices)\n            else:\n               ", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the receiver's size to the size specified by the arguments.\n * The <code>width</code> and <code>height</code> arguments are\n * relative to the receiver's parent (or its display if its parent\n", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    autoclaim_data = webapi.autoclaim_paper(req, paper, autoclaim_ticket,\n                                                            ln,\n                                                            CFG_SITE_URL,\n                                                            CFG_SITE_SEC", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "   track_event(user, \"change-email-settings\", {\"receive_emails\": receive_emails, \"course\": course_key.to_deprecated_string()})\n    This line of code is used to track the event of a user changing their email settings for a specific course.", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "   if len(arrayObjectMemberTypes) > 0:\n        arrayObject = CGList(\n            [CGGeneric(\"let array = JSArray::new(cx, argc - 1);\\n\"\n                      \"for (let i = 1; i < argc; i++)", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "   def postParse( self, instring, loc, tokenlist ):\n        for i,tok in enumerate(tokenlist):\n            if len(tok) == 0:\n                continue\n            ikey = tok[0]\n            if isinstance(ikey,int):\n              ", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "   if matched_zero and (\n        Match(r'^\\s*(?:\\bFunction\\b|\\bFunctionPointer\\b|\\bFunctionPointerTemplateArgument\\b|\\bFunctionTemplateArgument\\b)',\n             matched_zero.group(1))):\n      error(filename, linenum", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": " if before:\n    self.hashes[filename] = (before, after)\n  else:\n    self.hashes[filename] = (None, after)\n\n  # The rest of the code is the same as in GitVCS.GenerateDiff().\n  # It'", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = field_get_subfield_values(fft, 'a')[0]\n            if not url:\n                raise StandardError(\"FFT tag is not valid. No URL specified\")\n            # Let's discover the name of the document\n            docname = _get", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       int[] ret = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << i)) != 0) {\n                ret[counter++] = i;\n            }\n", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n           ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "       public static string NFKC(string s)\n        {\n            // TODO: Implement NFKC normalization\n            throw new NotImplementedException();\n        }\n    }\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, op, x, y, null);\n    }\n    public void drawImage(BufferedImage bImg,\n                         BufferedImageOp op,\n                         int x,\n                         int y,\n                         ImageObserver observer) {\n        if (", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     return JavaModelManager.getJavaModelManager().getPackageFragmentForOutput(fileName, false);\n    }\n  }\n  public static IType getType(IJavaElement element) {\n    if (element instanceof IType) {\n      return (IType) element;\n    }", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\n    # If the macro is in the list of names then add it to the dictionary.\n    if lhs in names:\n        if properties:\n            # Resolve any expressions.\n            lhs = lhs.replace(\"$[\", properties.get(lhs, \"\"))\n           ", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           if end_line == t[2][0]:\n                # same line\n                logical[-1] += self.__joinTokens(previous[1], text)\n            else:\n                # new line\n                logical.append(self.__joinTokens(previous, t))\n", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, filename):\n        \"\"\" Parse a polynomial from a file and return it as a Polynomial object.\n        \"\"\"\n        try:\n            poly = Polynomials(open(filename).readlines())\n        except (OSError, IOError)", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore encountered an invalid media encoder", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                #print '%s - %s' % (self.splitKeyHash[k].br.len, tree2.splitKeyHash[k].br.len)\n                theSum +=", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "       result = aggregator.aggregate(rolling_window_data, axis=dimension,\n                                      **kwargs)\n        new_cube.data = result\n        return new_cube\n        # This line of code is commented out because it is not needed for the\n       ", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "\ndef _mapper_or_none(cls):\n    if cls is None:\n        return None\n    elif isinstance(cls, type):\n        if hasattr(cls, 'mapper'):\n            return cls.mapper\n        elif hasattr(cls, '__mapper_", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               setMargins(\n                        a.getDimensionPixelSize(MARGIN, UNDEFINED),\n                        a.getDimensionPixelSize(TOP_MARGIN, UNDEFINED),\n                        a.getDimensionPixelSize(RIGHT_MARGIN, UN", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * Returns the connection type of this connection.\n     *\n     * @return int representing the connection type\n     */\n    int getConnectionType()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(leftType, rightType, returnType, op, isChecked);\n            }\n        }\n        private static void AdjustSymbolsForObjectCreation(BoundExpression boundNode, BoundNode boundNodeForSyntacticParent, B", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "       self.invoke('atEvaluate', expression=expression, locals=locals)\n        try:\n            result = eval(expression, locals, self.globals)\n        except SyntaxError, e:\n            self.fail(e)\n        except Exception, e:\n            self", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int[][] clique = new int[windowSize][];\n        for (int k = 0; k < windowSize; k++) {\n          clique[k] = new int[document.get", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "   internal struct LeafNestedType\n    {\n        // internal ushort leaf;      // LF_NESTTYPE [TYPTYPE]\n        /// <summary>\n        /// </summary>\n        internal ushort attr; // (CV_fldattr_t) attribute", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))\n                contextProfile = _CONTEXT_ES_PROFILE_BIT;\n            // MAJOR & MINOR only introduced in GL 3.0\n            GL.GetInteger(GetPName.Major", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
