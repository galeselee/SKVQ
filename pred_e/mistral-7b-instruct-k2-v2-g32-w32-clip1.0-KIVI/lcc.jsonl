{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gbk\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        source.get()\n        if source.get() == class_name:\n            source.get()\n            return class_contents\n        source.put('[')\n        source.put(class_name)\n        return _parse_", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn = KNeighborsClassifier()\n#knn.fit(mnist.data, mnist.target)\n#prediction = knn.predict(img)\n#print(prediction)\n\nI have to use the KNeighborsClassifier()", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setSelected(true);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        SettingsSaver.saveSettings(fetcherGui);\n    }\n    private void setTree", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (file == null)\n\t\t\treturn;\n\t\tif (bitmap != null)\n\t\t\tbitmap", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of the _MockEvent class is, but it seems like it's being used to simulate a key event. Here's how I would complete the code:\n\n```python\nclass _MockEvent(", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\nif __name__ == \"__main__\":\n    setup_logging(sys.argv[1:])\n    if len(sys.argv) < 2:\n        print(__doc__)\n        sys.exit(1)\n    if sys.argv[1] == \"list", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength read by the wavemeter in nm (vac).\n        @return float: current wavelength\n        \"\"\"\n        # lock the mutex to prevent concurrent access\n        with self.threadlock", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            Presence.away, Presence.chat, Presence.dnd, Presence.x,\n            Presence.available, Presence.subscribe, Presence.subscribe2,\n            Presence.unavailable", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await poll.Setup(null, options, null, \"Pick a map for the next battle\");\n            ActivePoll = poll;\n            return true;", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = Assembly.LoadWithPartialName (name);\n\t\t\t\t}\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tif (error != null)\n", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(\n        dict(\n            interface=dict(type='str', required=True),\n        )\n    )\n    module = AnsibleModule(argument_spec=argument_spec)", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   Pattern pattern = Pattern.compile(\"^[0-9,]+$\");\n    Matcher matcher = pattern.matcher(s);\n    return matcher.matches();\n  }\n  public boolean isValid(ISVNRemoteResource remoteResource, ISVNLocalResource localResource", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an auction\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            for (int k = ", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(281, 300);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = {\n    'tour': tourlist,\n    'observations': observations,\n    'translations': translations_dict,\n    }\n```\n\nThis line of code is creating a dictionary called `behavior` that contains three keys: 'tour", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        Return the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for handle in handles:\n            person = self.report.database.get", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle takes off from the ground and hovers at a given altitude\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_PACKET;\n\t\t\t}\n\t\t\tbreak;", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            final IMemento memento = getViewSite().getPerspective().getPerspectiveState();\n            final IMemento inputMem = new XMLMemento(input);\n            final IMemento factoryMem = new XMLMemento(", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && component.isEnabled() && component.isFocusOwner() && component.getComponentFromPoint(e.getPoint()) == component) {\n    launcher.launchPopup(e);\n}\n}\n    }\n}\n\nI'm trying to add a", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        name = parse_tables.clean_name(\"John Michael Collins\")\n        assert name == \"John Michael Collins\"\n\nThis test checks that the `clean_name` function correctly handles names with two-word", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('display_name')\n            sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                if (index >= list.Count)\n                {\n                    return false;\n                }\n                Current = list[index];\n                index++;\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    path = os.path.join(parentpath, path)\n\n    return localrepo.localrepository.instance(ui, path, create)\n\n# vim: set filetype=python :", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\nstructured_record = logging.LogRecord(name, level, msg, args, fn, lno, msg,\n                                       exc_info, structured, kwargs)\n\nThis line creates a new LogRecord object with the structured data. The\nLogRecord object is the basic data structure used", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n\n        # Checking if currently logged user has permission to create a new record\n        if not user_can_edit_record_collection(req,", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import Connection\nfrom ansible.utils.display import Display\nfrom ansible.utils.compat import to_text\nfrom ansible.utils.shell import shell_escape\nfrom ansible.utils.", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tif(dataString.length() > 0)\n\t\t\t\tdataString += ims.dto.NASMessageCodes.RECORDSEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record. The page count is stored in the `page_count` variable, which is set by the", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendRRData(CommandSpecificData):\n    \"\"\"Send RR Data Command Field\"\"\"\n    name = \"ENIPSendRRData\"\n    fields_desc = [\n        LEShortField(\"itemCount\", 0),\n        PacketListField(\"item\", None,", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// reading metadata\n\t\tString metadata = JAXBContext.newInstance(MetocElementType.class).createMarshaller().marshal(metocDictionary.getMetoc().get(0));", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name().toLowerCase() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you want to do with the `Creat", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tint* cur = (int*)line;\n\t\t\tint* end = (int*)( line + bd.Width", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions[0]):\n        return reader\n```\n\nThis code is used to find the appropriate reader for a given file based on its extension. It iterates over the list of supported readers and checks", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 191: // -/+ key\n                if (down)\n                {\n                    if (CAPS)\n                        Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                    else\n                    {\n                       ", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of the distortion matrix']\nout_names += ['NP_' + name for name in names]\nout_list += [num_pairs_all[index]]\nout_comment +=", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n```python\nif obj.startswith(b\"\\xef\\xbb\\xbf\"):\n    obj = obj[3:]\n```\n\nThis code checks if the string starts with the UTF-8 BOM (Byte Order Mark) and if it does, it rem", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the U", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += calculateOpponentTableStrength(opponent.getValue(),\n                    opponentPlayers);\n\n            // TODO: calculate the table strength of the opponent\n            // and add it to the table strength of the player\n        }\n        tableStrengthScore.setPlayer", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_range_requests(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        with web.app.test_client() as c:\n            # Load / with valid auth\n", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > Constants.NSCLIENT_MAX_LOG_", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    # Fix up the makefile for 64bit builds\n    if arch == \"amd64\":\n        create_makefile64(makefile, m32)\n        fix_makefile(makefile)\n\n    # Now we can build OpenSSL\n    print(\"", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self):\n        \"\"\"tests that we can convert a .properties file to .po\"\"\"\n        propsource = \"\"\"\nSAVEENTRY=Save file\n\"\"\"\n        proptemplate = \"\"\"\nmsgid \"Save file\"\nmsgstr \"\"\n\"\"\"\n        outputpo", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n    # The following line is used if you cannot bear to see the warnings\n    # module.params['warnings'] = False\n    # The following line is used if you want", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return Enumerable.Range(0, prevChildren.Length)\n                .Select(i => childFactory(query.Parent, (i + 1) + \"-\" + (i + prevChildren.Length), \"virtual-grouping/\" + i, () => prevChildren.Skip(", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteWithMultipleResponses(self):\n        \"\"\"\n        TCP: Short write to client with multiple responses\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static RustTokenId getByCategory(TokenCategory category) {\n        for (RustTokenId token : values()) {\n            if (token.category == category) {\n                return token;\n            }\n        }\n        throw new IllegalArgumentException(\"No token found for", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(LabelForDescriptionControlID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(LabelForTitleControlID);\n        }\n        public Control GetLabelForPercentage()\n        {", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args['Bucket'] = bucket\n        query_args['Key'] = key\n        query_string = urllib.urlencode(query_args)\n        url = self.calling_format.build_url_base(self.protocol, host, '', path) + query", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), new RectF(left, top, right, bottom), null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\nHueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x13B, 0x13B));\nHueInfo.Add(D", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(), c -> {\n                    if (c.getResultCode() == 200) {\n                        this.alertDialog.show(MSGS.certificateDeleted());", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    for filename in os.listdir(self.dbm_dir):\n        if filename.endswith(ext) and os.access(os.path.join(self.dbm_dir, filename), os.F_OK):\n            list.append(os.path.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return (filename != null ? filename : location.toExternalForm()) +\n                (description != null ? \" (\" + description + \")\" : \"\");\n    }\n    /**\n     * Returns the accessibility context for this object.\n     *\n     * @return the accessibility context for", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only include plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    connection = Connection(\n        host=module.params['host'],\n        username=module.params['username'],\n        password=module.params['password", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n            throw new IOException(\"Stream has not been marked\");\n        }\n        fileDecoder = clone(savedDecoder);\n    }\n    /**\n     * Returns the underlying object that is being decoded.\n     *\n     * @return the object being decoded.\n     */\n    public", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        # If publication does not exist, create it:\n        if not publication.exists:\n            changed = publication.create(tables, params, owner, check_mode=module.check_mode)\n        # If publication exists, update it:\n        else", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "int version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\"\"\"\n        # Note that this function requires the pre-sigmoid activation as\n        # input.  To understand why this is so you need to understand", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: This is a hack to get the FigRole to be created\n        // before the FigOrdering.  It is not a good solution.\n        // We should be able to create the FigRole and FigOrdering\n        // in the same constructor.\n        role = new Fig", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    LogManager.GetCurrentClassLogger().Error(\"Performance counter initialization failed: \" + ex.Message);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "===================\n\nHere is the code for the next line:\n\n```python\nfor i in range(10):\n    full_name = pjoin(cfg.webdav_backend_directory, \"foo-%d\" % i)\n    assert os.path.isfile(", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    label = args[0]\n#    if", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append(self.data.read(cur.offset + prog_ofs, file_len))\n\t\t\t\tlen -= file_len\n\t\t\t\tofs += file_len\n\t\t\telse:\n\t\t\t\tresult.append(self", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder(value.substring(0, startIndex));\n\t\t\twhile (startIndex != -1) {\n\t\t\t\tint endIndex = value.indexOf(\"%}\", startIndex);\n\t\t\t\tif (endIndex == -1) {\n", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(ASN1Boolean.encode(ASN1Boolean.valueOf(includeAuthNEntry)));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encode(ASN1Boolean.valueOf(includeAuthZEntry)));", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.instance();\n\t\t}\n\t}\n}\n\nThe code is a part of a library for Android called SweetBlue. It manages the storage of options in the device's shared preferences. The options include the last disconnect state, whether a device needs bond", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead, CallNumber.ToString()));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(text.indexOf(\" width=\") + 6));\n        }\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       Dlasdq.dlasdq(\"U\", i16, i15, i17, i11, i21, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // The constraint entry is a key=value pair.  Split the entry\n                // into key and value.\n                int index = constraintEntry.indexOf('=');\n                if (index < 0) {\n                    throw new IllegalArgumentException(\n                            \"Invalid", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      DefaultPort proxyPort = (DefaultPort) proxyCell.getChild(0);\n      DefaultPort devicePort = getDevicePort(deviceCell, proxyInfo.getUnit());\n      edge = new Proxy", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef write_to_disk(self, path):\n    \"\"\"Writes the collection to disk.\n    Args:\n        path: The path to write the collection to.\n    Returns:\n        None\n    \"\"\"\n    for artist in self.collection:\n        artist_sub", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Returns the configuration for this layer.\n     *\n     * @return", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tShip(order, false);\n\t\t\t}\n\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t}\n\t\t/// <summary>\n\t\t/// Gets a value indicating whether the order can be marked as paid\n\t\t/// </", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n```python\nreturn self._conf_helper('current_ch', 'sense', 'setpoint', 'output', 'output_en', 'output_mode', 'output_level', 'output_unit', 'output_scale', 'output_offset', 'output_delay', 'output", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Run the compiled code.\n   * <P>\n   * This is done by creating a new instance of the main class", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        if not solidRef:\n            raise ValueError(\"No solid found to fillet!\")\n        if len", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    # Writing final memory update 6/7 (function unknown)\n    j = 0\n    dmpUpdate = []\n    while ((j < 4) or (j < dmpUpdate[2] + 3)):\n        dmpUpdate.append(self.dmpUp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf_path = get_pdf(item.name)\n\t\t\t\tif pdf_path:\n\t\t", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.m_SetAttributes.IsEmpty)\n                    this.m_SetAttributes = new AosAttributes(this);\n                if (this.m_SetSkillBonuses.IsEmpty)\n                    this.m_SetSkillBonuses = new A", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"\\\\u\");\n         sb.append(Integer.toHexString(c));\n         sb.append(\";\");\n         return;\n      }\n      d = (c >> 8) & 0x3f;\n      if (d < 10)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.Disconnect)\n\t\t\t{\n\t\t\t\t// This is the disconnect packet, so we need to check if the player is still logged in.\n\t\t\t\tint who = e.Player;\n\t\t\t\tif (", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue[0],\n            fields={'display_name': 'new node'}\n        )\n        node.save()\n        for category in category_queue[1:]:\n            self.create_subtree_for_deletion(", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + (i * -1));\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertEquals(htmlPageAsset.getIdentifier(), newBundlePushedAssets.get(0));\n    }", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       Paging paging = getPaging(0, 100);\n\n        // As user 1: Create a file in My Files\n        String myFolderNodeId = getMyNodeId();\n        String fileName = \"file\" + RUNID + \".txt\";\n        Document", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj instanceof Number;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    // ----------------------------------------------------------------------\n    // Testing of the isLong(String) method\n    // ----------------------------------------------------------------------\n    @Test\n", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached to parent grappling part: \" + grapple);\n                                }\n                                else if (grapple.", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n    if res:\n        if replace:\n            self.unlink(cr, uid, [res.id], context=context)\n        return self._update(cr, uid, model, module, {'value': value}, xml_id=xml_id, store=True, context=", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setAction(int action) {\n            // It would", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImagePath(102100, \"images/alert.png\", new Integer(16), new", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n\n        int pos = 0;\n        for( int i = off; i < off + len; i++ ) {\n            encoded[pos++] = encode3to4( source[i], ", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecision\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu3 = v3;\n\t\t\t\tv3 = q[1];\n\t\t\t\tBigInteger temp = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = temp - q[0].magnitude[0", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message), new GLib.AbiField[] {\n\t\t\t\t\t\tnew GLib.AbiField (\"handle\", typeof (", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    name = name.substring(0, name.length() - 4);\n                }\n                Configuration.setString(\n                        PersistenceManager.KEY_PROJECT_NAME, name);\n                return", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('tutorial_detail__tutorial__level__code', False, 'Level'),\n                6: SortableHeader('tutorial_detail__tutorial__tutorial_order', False, 'Order'),\n                7: SortableHeader('t", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[] s121 = new string[] { \"hello\"};\n            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s122 = new string[] { \"world\" };\n            string[][] ss1", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
