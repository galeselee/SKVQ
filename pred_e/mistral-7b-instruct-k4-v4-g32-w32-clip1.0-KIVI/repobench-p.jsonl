{"pred": "```\n\t\t\tb1.position(s1 + r0);\n```\n\nThis line of code is setting the position of the ByteBuffer `b1` to the sum of the current position (`s1`) and the remaining capacity (`r0`) of the ByteBuffer `", "answers": ["\t\t\t\tBufferTools.returnBuffer(b1);\r"], "all_classes": null, "length": 2646}
{"pred": "\t\tself._combo_box = QComboBox()\n\t\tself._combo_box.setEditable(True)\n\t\tself._combo_box.currentIndexChanged.connect(self.on_combo_box_changed)\n\t\tlayout.addWidget(", "answers": ["\t\tself._caption_label.setMinimumWidth(100*gui_scale())"], "all_classes": null, "length": 2012}
{"pred": "\n    if config.v23_separator:\n        flags |= Frame.FLAG23_ALTERTAG\n\n    if frame.encoding:\n        flags |= Frame.FLAG23_ENCRYPT\n\n    if frame.group:\n        flags |= Frame.FLAG2", "answers": ["    if isinstance(frame, TextFrame):"], "all_classes": null, "length": 1608}
{"pred": "self.sizer.Add(self.html_window, 1, wx.EXPAND | wx.ALL-wx.TOP, 5)\n\nThis line adds the HTML window to the sizer that manages the layout of the panel. The HTML window will take up the majority of the space", "answers": ["        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3291}
{"pred": "   public static AthenaGM plugin;\n\n\n    @Override\n    public void onEnable() {\n\n        plugin = this;\n        plugin.saveDefaultConfig();\n        plugin.getServer().getPluginManager().registerEvents(new Tracker(this), this);\n        plugin.", "answers": ["    private ArenaHandler arenaHandler;"], "all_classes": null, "length": 3929}
{"pred": "               BeitragSammelLastschrift sammelLastschrift = new BeitragSammelLastschrift();\n                sammelLastschrift.setFaelligkeit(inputFaelligkeit.getDate());\n                sammelLastschrift.setBezeichnung", "answers": ["                BeitragSammelLastschrift sammelLastschrift;"], "all_classes": null, "length": 2526}
{"pred": "   private final Node bootstrapNode;\n    private final KadConfiguration config;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n", "answers": ["    private final Node bootstrapNode;"], "all_classes": null, "length": 3536}
{"pred": "   private final ServiceLoader<PathParserFactory> pathParserFactoriesLoader = new DefaultServiceLoader<>();\n\n    public OpenAPIProcessor() {\n        super(SourceVersion.RELEASE_8);\n        registerParserFactory(SpringParserFactory.class);\n    }\n\n    @Override\n   ", "answers": ["    private final ServiceLoader serviceLoader = new DefaultServiceLoader();"], "all_classes": null, "length": 925}
{"pred": "\n    self._Fault('Timed out waiting for response')\n\nYou can add the following code to handle the timeout exception:\n\n    except gevent.Timeout: # pylint: disable=E0712\n      self._Fault('Timed out waiting for response')\n", "answers": ["        err = TimeoutError()"], "all_classes": null, "length": 2130}
{"pred": "```\n            meteor_obj.jdt_ref[frame_n] = datetime2JD(datetime.datetime.utcfromtimestamp(frame_n))\n```\n\nThis line sets the Julian date reference for each frame of the meteor trajectory. The Julian date", "answers": ["            jd = datetime2JD(filenameToDatetime(ff_name) + datetime.timedelta(seconds=float(frame_n)/fps))"], "all_classes": null, "length": 2640}
{"pred": "```\n            r[group] = self._store.features(group=group)\n```\n\nThis line of code is trying to store the features for each group in the `r` dictionary. However, it seems that the `features` method of the `SpikeDetektStore`", "answers": ["            spikes = _concatenate(samples[group])"], "all_classes": null, "length": 2166}
{"pred": "```\n\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)\n```\n\nThis line of code is", "answers": ["\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)"], "all_classes": null, "length": 2032}
{"pred": "       self.motion_interval = motion_interval\n        self.last_refresh = time.time()\n        self.refresh_rate = refresh_rate\n        self.no_owls = no_owls\n        self.auth = Auth()\n        self.auth.startup()", "answers": ["        self.auth = Auth()"], "all_classes": null, "length": 2174}
{"pred": "\n    def __getattr__(self, name):\n        if name in self.defs:\n            return self.defs[name]\n        elif self.vars:\n            var = self.vars[-1]\n            if name in var:\n                return var[name]\n", "answers": ["        self._root = TypeVar[None]"], "all_classes": null, "length": 1186}
{"pred": "\n    privateKey = (RSAPrivateKey) KeyFactory.getInstance(\"RSA\").generatePrivate(\n        new PKCS8EncodedKeySpec(Base64.decodeBase64(PRIVATE_KEY.getBytes())));\n\n    locators = new VerifierProviders();\n", "answers": ["    final Verifier hmacVerifier = new HmacSHA256Verifier(SYMMETRIC_KEY);"], "all_classes": null, "length": 1353}
{"pred": " private final transient LruCache<String, ProgressMonitorListener> listeners =\n      new LruCache<>(DEFAULT_CACHE_SIZE);\n  private final transient SingleLevelMap<ProgressUpdateType, Slf4JProgress.Level> levels =\n      new SingleLevelMap<>(Slf4", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 2514}
{"pred": "\n    class InvalidLSIIndex(LocalSecondaryIndex):\n        index_name = \"invalid_index\"\n        id = Column(UUID, hash_key=True)\n        indexed_column = Column(UUID, range_key=True)\n\n\n# COLUMN =================================", "answers": ["            index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")"], "all_classes": null, "length": 2269}
{"pred": "```\n            alignment_info = run_mp(\n                compile_information_func,\n                jobs,\n                self.log_directory,\n                return_info=True,\n            )\n```\n\nThis line of code runs the `compile_information_func", "answers": ["                compile_information_func, jobs, self.working_log_directory, True"], "all_classes": null, "length": 3046}
{"pred": "\n    def process_bitmap_definition(self, state, bit_operator, descriptor):\n        \"\"\"\n        Process a bitmap definition descriptor.\n\n        :param state: The state of the processing.\n        :param bit_operator: The bit operator for read/write bits.\n        :param", "answers": ["            elif member_type is FixedReplicationDescriptor:"], "all_classes": null, "length": 1868}
{"pred": "   public TypesApi getTypesApi() {\n        return typesApi;\n    }\n\n    @Override\n    public DataStore getLocalDataStore() {\n        return localDataStore;\n    }\n\n    @Override\n    public KryptnosticClient newClient() throws ResourceNotFoundException", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 2334}
{"pred": "\n@method('node()', label='sequence type')\ndef select_node_sequence_type(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for item in context.iter_children_or_self():\n        if item", "answers": ["    XPathFunction.nud(self)"], "all_classes": null, "length": 3894}
{"pred": "```python\nelif _type['type'] == LINK:\n    record_clusterID = self._decode_field( _type['struct'][0] )\n    record_position = self._decode_field( _type['struct'][1] )\n    return OrientRecordLink( record", "answers": ["        elif _type['type'] == LINK:"], "all_classes": null, "length": 1740}
{"pred": "account = account_for_tumblr_userinfo(userinfo, person=person)\n\nThis line of code calls the function `account_for_tumblr_userinfo` with the user information obtained from Tumblr and the current person (if any). The function `", "answers": ["    account = account_for_tumblr_userinfo(userinfo, person=person)"], "all_classes": null, "length": 1774}
{"pred": "       ips.append(IPAddress(jsoned, self))\n        return ips\n\n    def get_ip(self, ip_id):\n        data = self.call_api(\"ips/%s\" % ip_id, type=\"GET\")\n        return IPAddress(data, self", "answers": ["            ip = IPAddress(jsoned, self)"], "all_classes": null, "length": 2464}
{"pred": "       registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new MarshalledResponseHandler<String[]>(STRING_ARRAY));\n        registry.put((byte) (GET_MBEAN_COUNT ^ RESPONSE_MASK), new MarshalledResponseHandler<", "answers": ["        registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new StringArrayResponseHandler());"], "all_classes": null, "length": 824}
{"pred": "       registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);\n    }\n\n    public void registerCallAction(CallAction action, int id)\n    {\n        actions.put(id, action);\n    }\n\n   ", "answers": ["        registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);"], "all_classes": null, "length": 1561}
{"pred": "       mEdSearch.addTextChangedListener(this);\n        mEdSearch.setOnEditorActionListener(this);\n        mIvEditClear.setOnClickListener(this);\n        mIvSearch.setOnClickListener(this);\n        mSwipeRefreshLayoutSearch.setOn", "answers": ["        StatusBarUtil.immersive(this);"], "all_classes": null, "length": 2979}
{"pred": "           varray[i] = f.apply(MatlabStruct.create().set(rarray[i], MatlabScalar.create(i)));\n        }\n        return varray;\n    }\n\n    protected String buildFEval(String function, String[] varray,\n                                ", "answers": ["            String safe = f.apply(new MatlabString(rarray[i]));"], "all_classes": null, "length": 2714}
{"pred": "   private int[] imgDimensions = new int[2];\n\n    public PostView(Context context) {\n        super(context);\n        ButterKnife.inject(this);\n    }\n\n    public PostView(Context context, AttributeSet attrs) {\n        super(context", "answers": ["    public Prefs prefs;"], "all_classes": null, "length": 3533}
{"pred": "               install_and_run(toolsdir, app_path, package, launcher, True)\n\n                # Get Screen Resolution\n                width, height = get_res()\n                data['width'] = width\n                data['height'] = height\n                data", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 1743}
{"pred": "\tprivate TestResourceProvider testResourceProvider;\n\tprivate TestConceptService testConceptService;\n\tprivate TestDescriptionService testDescriptionService;\n\tprivate TestRelationshipService testRelationshipService;\n\n\t@Before\n\tpublic void setup() throws RuleExecutorException {\n\t\t// Create", "answers": ["\tprivate TestConceptService conceptService;"], "all_classes": null, "length": 3889}
{"pred": "====================\n\nadmin.site.register(Membre, MembreAdmin)\n\nThis line of code registers the Membre model with the MembreAdmin class,\nwhich is defined in the Administration/actions.py file.\nThis class is used to define the behavior of the Membre model in the", "answers": ["@admin.register(Switchlink)"], "all_classes": null, "length": 2184}
{"pred": "\t\t\tTickHandler.EVENT_BUS.post(e);\n\t\t\tif (e.hasResult())\n\t\t\t\tyd = e.getResult().floatValue();\n\t\t}\n\t\tif (this.keys[5])\n\t\t\txa = 0.", "answers": ["\t\t\tTickHandler.EVENT_BUS.postEvent(e);"], "all_classes": null, "length": 3452}
{"pred": "\tprivate NetworkManager networkManager = null;\n\tprivate DataParser dataParser = null;\n\tprivate Cache cache = null;\n\tprivate LogManager logManager = null;\n\n\t/**\n\t * Builds a new APIWrapper instance using the given endpoint URL,\n\t * jurisdictionId and", "answers": ["\tprivate NetworkManager networkManager = new HTTPNetworkManager(Format.XML);"], "all_classes": null, "length": 3104}
{"pred": "       registry.put(IS_REGISTERED, new IsRegisteredHandler());\n        registry.put(NOTIFICATION, new NotificationHandler());\n        registry.put(NOTIFICATION_FILTER, new NotificationFilterHandler());\n        registry.put(OBJECT, new ObjectHandler());\n       ", "answers": ["        registry.put(IS_REGISTERED, new IsRegisteredHandler());"], "all_classes": null, "length": 931}
{"pred": "```\ncompute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)\n```\n\nThis line of code computes and updates the conflicts for the assembly points in the merged assembly. It is called after", "answers": ["    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)"], "all_classes": null, "length": 1723}
{"pred": "\t\t\t\t\tp.setAllowFlight(true);\n\t\t\t\t\tp.setFlying(true);\n\t\t\t\t\tp.setFoodLevel(20);\n\t\t\t\t\tp.setHealth(20);\n\t\t\t\t\t", "answers": ["\t\t\t\t\tp.sendMessage(ChatColor.DARK_PURPLE + Main.locale.getMessage(\"info.personal.spectating\")); // tell them"], "all_classes": null, "length": 3710}
{"pred": "\n```\nclass SequentialPortfolioConsumerType(PortfolioConsumerType):\n```\n\nThis line defines a new class called `SequentialPortfolioConsumerType` that is a subclass of `PortfolioConsumerType`. This means that it inherits all the properties and methods of `Portfolio", "answers": ["class PortfolioConsumerFrameType(FrameAgentType, PortfolioConsumerType):"], "all_classes": null, "length": 3454}
{"pred": "   if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_AVD\":\n        # adb, avd_path, reference_name, dup_name, emulator\n        avd_path = os.path.join(settings.BASE", "answers": ["                    refresh_avd(adb, settings.AVD_PATH, settings.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1547}
{"pred": "```\n    elif args.subcommand == \"history\":\n        print_history(args)\n```\n\nThis code checks if the subcommand is \"history\" and if it is, it calls the `print_history` function with the `args` argument. The `print_history`", "answers": ["            update_global_config(args)"], "all_classes": null, "length": 1540}
{"pred": "       CreditCard newCard = new CreditCard(alias, bankName, number, currency, type, cardExpirationCal, closing, due, selectedCreditCardBackground, null);\n\n        newCard.setCreditLimit(firstCreditPeriodLimit);\n\n        ExpenseManagerDAO da", "answers": ["        ExpenseManagerDAO dao = new ExpenseManagerDAO(this);"], "all_classes": null, "length": 3790}
{"pred": "\n    private AdRetriever adRetriever;\n\n    /**\n     * information to use when retrieve cue point from server\n     */\n    private CuePointsRetriever cuePointsRetriever;\n\n    /**\n     * the current state of the state machine\n    ", "answers": ["    private AdRetriever adRetriever;"], "all_classes": null, "length": 2715}
{"pred": "\n    def test_bv2pysmt_ite(self):\n        bv2pysmt = functools.partial(_bv2pysmt, env=self.env)\n        fm = self.env.formula_manager\n        tm = self.env", "answers": ["        self.assertEqual(bv2pysmt(ZeroExtend(bx, 2)), zext(px, 2))"], "all_classes": null, "length": 2534}
{"pred": "\t\tlinkers.add(new NodeToNode());\n\t\tlinkers.add(new GeometryToNode());\n\t\tlinkers.add(new SkeletonToSpatial());\n\t\tlinkers.add(new AnimationToSpatial());\n\t\tlinkers", "answers": ["\t\tlinkers.add(new AnimationToSpatial());"], "all_classes": null, "length": 1043}
{"pred": "\n    connect(DYNAMIC_TOOL_DIR)\n\nThis line of code is calling the `connect` function from the `android_dyn_shared.py` module in the `DynamicAnalyzer` package. The `connect` function is responsible for connecting to the Android device or emulator", "answers": ["    Proxy('', '', '', '')"], "all_classes": null, "length": 1562}
{"pred": "\nclass TestObject(unittest.TestCase):\n\n    def setUp(self):\n        self.sampleable = Sampleable()\n        self.sampleable.name = \"bar\"\n\n    def test_sampleable_get_sample(self):\n        self.assertEqual(\"my_", "answers": ["        self.assertIsInstance(Object.factory(\"none\", \"v1\"), ObjectNone)"], "all_classes": null, "length": 1381}
{"pred": "\n    public Observable<ApiStatus> apiStatus() {\n        return apiService.apiStatus(apiKey);\n    }\n\n    /**\n     * Returns a list of all available protocols.\n     */\n    public Observable<List<Protocol>> protocols() {\n        return apiService", "answers": ["    public Observable<ApiStatus> info() {"], "all_classes": null, "length": 2260}
{"pred": "\n                StoryDetailActivity.launch(getActivity(), mAdapter.getData().get(i).getId(), view.findViewById(R.id.iv_ribao_item_head));\n\n                }\n            }\n        });\n    }\n\n    @Override\n    public", "answers": ["                        RibaoStoryBeanDao.Properties.Id.eq(((RibaoStoryBean) mAdapter.getItem(i)).getId()))) {\r"], "all_classes": null, "length": 1936}
{"pred": "               security_role='ISS',\n                security_identification_details=SecurityIdentificationDetails(\n                    identified_role='MS',\n                    cid=bytes.fromhex('00000000000000000000", "answers": ["                security_role=SecurityRole.ISS,"], "all_classes": null, "length": 1417}
{"pred": "def app_expr(f, f_ty, cast, args):\n    \"\"\"Applies a function to a list of\n    arguments, some of which are implicit.\n    \n    Arguments:\n    - `f`: an expression denoting the function\n    - `f_ty`", "answers": ["    return Box(triv(), expr, ty)"], "all_classes": null, "length": 1771}
{"pred": "       StepCounterCollector.createDBStorage(deviceID);\n    }\n\n\n    public void writeDBStorage(String tableName, ContentValues newValues)\n    {\n        SQLiteDatabase db = this.getWritableDatabase();\n        db.insert(tableName, null, new", "answers": ["        StepCounterCollector.createDBStorage(deviceID);"], "all_classes": null, "length": 3430}
{"pred": "class URI(Signature):\n    __typeid__ = 1\n    __subtype__ = 1\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __repr__(self):\n        return '<URI: %r>' % self.uri", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   private CaptureTime time;\n    private CaptureFrame frame;\n    private FrameImporter importer;\n    private FrameExporter exporter;\n    private boolean enabled;\n\n    public CaptureSession(MinemaConfig cfg) {\n        super(cfg);\n\n        // register", "answers": ["    private CaptureTime time;"], "all_classes": null, "length": 2248}
{"pred": "\n    assert u2.dimensions == length / time / length\n\nThis line of code is incorrect because the dimensions of the unit `u2` should be\n`length / time`, not `length / time / length`. The dimensions of `u2` are `length`\ndivided by `", "answers": ["    assert u2.dimensions == rate"], "all_classes": null, "length": 2042}
{"pred": "       write_tc_script(\n            \" \".join(sys.argv), command_history, filename_suffix=\".sh\"\n        )\n\nThis line of code creates a shell script file that contains the command history of the executed tcconfig command and the tc commands that would be executed if the", "answers": ["            Tc.Command.TCSHOW, command_history, filename_suffix=\"-\".join(options.device)"], "all_classes": null, "length": 1874}
{"pred": "     throw new IOException(Language.get(\"api.init.NoWentryID\"));\n    }\n    return urlFetcher(mainApi, quality, Provider.STATION, new HashMap<String, String>() {{\n      put(\"wentry_id\", getWentryID());\n    }", "answers": ["      throw new IOException(Language.get(\"track.InvalidWentryID\"));"], "all_classes": null, "length": 2705}
{"pred": "       return new JsonObjectRequest(url);\n    }\n\n    /**\n     * Create a JSONObject type handle, custom handle method, method from {@link RequestMethod}.\n     *\n     * @param url           such as: {@code http://www.nohttp.net}.\n     *", "answers": ["        return new JsonObjectRequest(url);"], "all_classes": null, "length": 3108}
{"pred": "\t\t\ttypeSpecBuilder.addSuperinterface(className);\n\t\t}\n\n\t\treturn typeSpecBuilder;\n\t}\n\n}\n\npublic class AnalysisTransformation {\n\n\tprivate final Function<CascadingTypeAnalyzer<?, ?, ?>, CascadingTypeAnaly", "answers": ["\t\t\ttypeSpecBuilder.superclass(type(className, T));"], "all_classes": null, "length": 2674}
{"pred": "               path = joinPaths(unixPath(relativePathToPattern), fileBean.getSource());\n                parentPath = joinPaths(unixPath(relativePathToPattern), fileBean.getSource().substring(0, fileBean.getSource().lastIndexOf('/')));\n           ", "answers": ["                path = sepAtStart(normalizePath(joinPaths(relativePathToPattern, patternPathToFile, source.getName())));"], "all_classes": null, "length": 2616}
{"pred": "\t@Autowired\n\tAlertRepository alertRepository;\n\n\tpublic void loadData() throws IOException {\n\t\t//TODO: load data from the classpath\n\t\t//TODO: load data into the cluster\n\t\t//TODO: log any errors\n\t\t//TODO: log", "answers": ["\tAlertRepository alertRepository;"], "all_classes": null, "length": 1393}
{"pred": "\n    return render_to_response('redsolutioncms/custom.html', {\n        'cms_settings': cms_settings,\n    }, context_instance=RequestContext(request))\n\n    This line of code renders the 'custom.html' template and passes the `", "answers": ["                except AlreadyMadeException:"], "all_classes": null, "length": 1433}
{"pred": "```python\nself._append( ( FIELD_INT, self._tx_id ) )\n```\n\nThis line is appending the transaction id to the message. The transaction id is a unique identifier for the current transaction.\n\nThe `FIELD_INT` is a constant that defines the", "answers": ["        self._append(( FIELD_BYTE, TX_COMMIT_OP ))"], "all_classes": null, "length": 3275}
{"pred": "\tprivate final Connector connector;\n\tprivate final ConnectorComments connectorComments;\n\tprivate final ConnectorWorkLog connectorWorkLog;\n\tprivate final ImagesCacher imagesCacher;\n\tprivate final Issue issue;\n\n\tpublic ViewsForTaskDetails(TaskDetails", "answers": ["\tIssue task;"], "all_classes": null, "length": 3252}
{"pred": "   placeholderReplacer = new PlaceholderReplacer<>(typeResolverRegistry);\n    commentProcessorRegistry = new CommentProcessorRegistry(placeholderReplacer);\n    commentProcessorRegistry.registerCommentProcessor(DisplayIfProcessor.class, new DisplayIfProcessor());\n    commentProcessorRegistry.registerCommentProcessor(", "answers": ["    for (Map.Entry<Class<?>, ITypeResolver> entry : config.getTypeResolvers().entrySet()) {"], "all_classes": null, "length": 3197}
{"pred": "\nself._append( ( FIELD_STRING, self._user ) )\n\nThis line of code is appending the user name to the message header. The user name is a string and it is being appended as a field with type STRING and bytes 4. This means that the user name will", "answers": ["        self._append( ( FIELD_STRINGS, [NAME, VERSION] ) )"], "all_classes": null, "length": 1700}
{"pred": "def test_fade_in_fade_out(self):\n    s, Hz = sHz(rate=6)\n    L = line(3 * s, 1, 9)\n    L_should = [1, 2, 3, 4, ", "answers": ["    L = fadeout(2 * s)"], "all_classes": null, "length": 2605}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node)", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 2828}
{"pred": "\n    return redirect(get_login_redirect(self.request.POST.get(REDIRECT_FIELD_NAME)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            url = get_login_redirect("], "all_classes": null, "length": 1277}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\n\t\tEmployee employee = employeeRepository.findByAccountId(account.getId());\n\nThis line of code is trying to find an employee by the account id. If the account id is not found in the database, it will throw a NullPointerException. To avoid this, you should check if the", "answers": ["\t\tEmployee employee = null;\r"], "all_classes": null, "length": 3898}
{"pred": "class ByteFlag(FlagList):\n    __flags__ = {CompressionAlgorithm.ZIP: 0x01,\n                 CompressionAlgorithm.ZLIB: 0x02,\n                 CompressionAlgorithm.BZ2: 0x04}\n\n    def __init", "answers": ["    @flags.register(HashAlgorithm)"], "all_classes": null, "length": 1390}
{"pred": "class TestOr(unittest.TestCase):\n    def test_can_not_be_initialized_with_zero_arguments(self):\n        self.assertRaises(TypeError, Or)\n\n    def test_commutativity(self):\n        a = Match(\"a\", \"", "answers": ["        self.assertRaises(TypeError, Or)"], "all_classes": null, "length": 2542}
{"pred": "\tprivate CommunityService communityService;\n\tprivate BoardService boardService;\n\tprivate CommentService commentService;\n\n\t@Autowired\n\tpublic void setCommunityService(CommunityService communityService) {\n\t\tthis.communityService = communityService;\n\t}\n\n\t@Autowired", "answers": ["    CommunityService communityService;"], "all_classes": null, "length": 1818}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Save user's links\n            link_formset = LinkFormSet(request.POST, request=request)\n            link_formset.save()\n\n            # Save user's skills\n           ", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))\n\nThis line of code is testing the function `is_not_ascii` with the English message for the 16 month reminder message. It checks if the message", "answers": ["        self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))"], "all_classes": null, "length": 1549}
{"pred": "\t\tv, f = convert_fs(opts.inputfreesurfer[0])\n\t\tif opts.outputply:\n\t\t\tsave_ply(v, f, opts.outputply)\n\t\telif opts.outputfs:\n\t\t\tsave_fs(v", "answers": ["\t\tv,f = convert_fs(str(opts.inputfreesurfer[0]))"], "all_classes": null, "length": 2047}
{"pred": "\n    def __Get(self):\n        \"\"\"Get the least loaded node from the heap.\"\"\"\n        if not self._open:\n            raise ValueError(\"HeapBalancerSink is not open\")\n        if self._size == 0:\n            raise ValueError(\"No members in the pool\")\n       ", "answers": ["      msg.properties[MessageProperties.Endpoint] = n.endpoint"], "all_classes": null, "length": 1863}
{"pred": "\n    @staticmethod\n    def _decode_field(field):\n        \"\"\"\n        :param field: object\n        :return: mixed\n        \"\"\"\n        t, v = field\n        _content = None\n\n        if t['type'] == INT:\n            _content = struct", "answers": ["        elif t['type'] == BOOLEAN:"], "all_classes": null, "length": 1727}
{"pred": "\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO", "answers": ["\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};"], "all_classes": null, "length": 2783}
{"pred": "\n    def test_set_get(self):\n        \"\"\"\n        Tests that :meth:`set` and :meth:`get` work as expected.\n        \"\"\"\n        ffi, library = _ffi()\n        loader = Loader()\n\n        loader.set(ff", "answers": ["        mock = patch.object(Loader, \"cache\", None)"], "all_classes": null, "length": 2141}
{"pred": "\n        self.velocity_schema = VelocitiesSchema()\n\n        super(VelocitiesResource, self).__init__(self.velocities,\n                                                self.velocity_schema)\n\n\nclass OrientationResource(ObjectResource):\n    \"\"\"The O", "answers": ["        self.velocities_schema = VelocitiesSchema()"], "all_classes": null, "length": 1623}
{"pred": "               hasJsonPath(\"hits.total\", equalTo(records.size())));\n\n        // check if all fields are present\n        for (SourceRecord record : records) {\n            String id = record.getId();\n            String query = \"http://localhost:9200/\"", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       ImageDialog imageDialog = new ImageDialog(this);\n        imageDialog.addBitmap(bitmap);\n        imageDialog.addTitle(getString(R.string.notification));\n        imageDialog.show();\n\n        String phoneNum = Tools.getTelNum(result);\n        if", "answers": ["        ImageDialog dialog = new ImageDialog(this);"], "all_classes": null, "length": 3804}
{"pred": "   private final InputProcessor inputProcessor = new InputMultiplexer(creationInputProcessor, editionInputProcessor, testInputProcessor);\n\n    public RigidBodiesScreen(Canvas canvas) {\n        this.canvas = canvas;\n        drawer = new RigidBodiesScreen", "answers": ["    private final List<Label> labels = new ArrayList<Label>();"], "all_classes": null, "length": 3762}
{"pred": "       .castRepositoryModule(new CastRepositoryModule())\n        .moviesRepositoryModule(new MoviesRepositoryModule())\n        .build();\n    }\n\n    public ApplicationComponent getApplicationComponent() {\n        return applicationComponent;\n    }\n\n    public BrowseMoviesComponent get", "answers": ["                .castRepositoryModule(new CastRepositoryModule())"], "all_classes": null, "length": 785}
{"pred": "           renderable = SVGGroup(self, e, parent)\n\n            if not parent:\n                self._paths.append(renderable)\n\n            for child in e.getchildren():\n                self._parse_element(child, renderable)\n        elif e.tag", "answers": ["            renderable = SVGGroup(self, e, parent)"], "all_classes": null, "length": 1523}
{"pred": "           // FragmentObservable<SearchContactFragment, User> observable = ObservableRegistry.getObservable(SearchContactFragment.class);\n            // observable.notifyFragment(user);\n            // Instead of the above line of code, we use the following line of code:\n            FragmentObserv", "answers": ["            FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs ="], "all_classes": null, "length": 2784}
{"pred": "def print_app(expr):\n    \"\"\"Takes an application and prints it in the following manner:\n    if the application is of the form (..(f a0)... an), print\n    f(a0,...,an), or (a0 f a1) if f is inf", "answers": ["        root, args = root_app(expr)"], "all_classes": null, "length": 1696}
{"pred": "====================\n\ndef check_args(args, fn_type, env):\n    fn_type = check(fn_type, env)\n    with env.errors.module_ctx(fn_type.__module__):\n        for arg, arg_type in zip(args, fn_", "answers": ["LET_TYPE = Func[[__var.bindings, __var.expr], __var.result]"], "all_classes": null, "length": 1468}
{"pred": "class RegistrationView(ConfirmationMixin, XMPPAccountView):\n    purpose = PURPOSE_REGISTER\n\n    def get_form_class(self):\n        return RegistrationForm\n\n    def get_success_url(self):\n        return reverse('xmpp_account", "answers": ["    form_class = RegistrationForm"], "all_classes": null, "length": 1292}
{"pred": "\t@Autowired\n\tprivate UpdateProvider updateProvider;\n\n\t@Autowired\n\tprivate DeleteProvider deleteProvider;\n\n\t@Autowired\n\tprivate InsertItem insertItem;\n\n\t@Autowired\n\tprivate InsertItemProvider insertItemProvider;\n\n\t@Autowired\n\tprivate DataSource dataSource", "answers": ["\tprivate InsertItem insertItem;\r"], "all_classes": null, "length": 917}
{"pred": "\n    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {\n        return assertThat(result(whenStep));\n    }\n\n    public static AbstractObjectAssert<?> resultOf(CheckedObjectSupplier whenStep) {\n        return assertThat(result(whenStep));", "answers": ["    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {"], "all_classes": null, "length": 1467}
{"pred": "\n```python\nclass User(BaseModel):\n    id = Column(String, hash_key=True)\n    email = Column(String)\n    name = Column(String)\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    if base_name == 'V':\n        bases.append(vertex)\n\nThis line of code is checking if the base class name is 'V', which is the name of the base class for vertexes in OrientDB. If it is, it appends the vertex class to the list", "answers": ["            is_edge = bases and bases[0].decl_type == DeclarativeType.Edge"], "all_classes": null, "length": 3757}
{"pred": "\n  def load_bytecode(self, co):\n    \"\"\"\n      Loads the bytecode from the code object.\n    \"\"\"\n    self.bytecode = []\n    self.main_module = ModuleDeclaration(self.pyc_file, co)\n    self.main_", "answers": ["    if isinstance(visitor, BytecodeVisitor):"], "all_classes": null, "length": 2071}
{"pred": "\n    bind_column(NotAModel, \"other\", column)\n\n\ndef test_bind_column_hash():\n    \"\"\"bind_column sets hash_key\"\"\"\n    class MyModel(BaseModel):\n        class Meta(IMeta):\n            pass\n        data = Column(", "answers": ["        bind_column(NotAModel, \"c\", column)"], "all_classes": null, "length": 2265}
{"pred": "       LinkedEdgeTest.class,\n        LinkedVertexTest.class,\n        ManyToManyTest.class,\n        ManyToManyEdgeTest.class,\n        ManyToOneTest.class,\n        MultiPropertiesTest.class,\n        PropertyTest.class,\n        VertexPropertyTest", "answers": ["        LinkedEdgeTest.class,"], "all_classes": null, "length": 2012}
{"pred": "\n    def fetch_response(self):\n        \"\"\"\n        # Decode header and body\n        # If flag continue is set( Header already read ) read only body\n        :param _continue:\n        :return:\n        \"\"\"\n        if len(self._body) is not 0", "answers": ["        elif isinstance(operation, RecordDeleteMessage):"], "all_classes": null, "length": 3043}
{"pred": "   StationSeed seed = new StationSeed(track);\n    Station station = getApi().getStationApi().create(seed, \"TestStation\", false);\n    assertNotNull(station);\n    assertNotNull(station.getName());\n    assertNotNull(station.getId());\n    List<", "answers": ["    assume(track);"], "all_classes": null, "length": 3038}
{"pred": "       // dMeta.interval.expandIntervalByDay(62);\n        dMeta.filterSegments(broker.getSegmentsInRange(dMeta.dataSource, dMeta.interval));\n        dPgm.print(printToConsole);\n        return overlord.fire", "answers": ["        Interval expandedInterval = dMeta.interval.expandEndTimeByDay(62);"], "all_classes": null, "length": 3924}
{"pred": "       startGameCommand.setFromUser(UserSession.getInstance().getUsername());\n        networkInterface.sendMessage(startGameCommand.serialize());\n        isGameStarted = true;\n    }\n\n    public void sendBombExplosion(BombModel bombModel, World world", "answers": ["        startGameCommand.setFromUser(UserSession.getInstance().getUsername());"], "all_classes": null, "length": 6404}
{"pred": "class Movie(Video, Playable, AdvancedSettingsMixin, ArtMixin, PosterMixin, RatingMixin, SplitMergeMixin, UnmatchMatchMixin,\n                                                                                                                     CollectionMixin,\n                                                                                                                     CountryMixin,", "answers": ["        CollectionMixin, CountryMixin, DirectorMixin, GenreMixin, LabelMixin, ProducerMixin, WriterMixin):"], "all_classes": null, "length": 5015}
{"pred": "       OhaBackupHelper.IOhaBackupHelper {\n\n    private static final int LOADER_ID_ENERGY_USE_DAY = 1;\n    private static final int LOADER_ID_ENERGY_USE_BILL = 2;\n    private static final", "answers": ["        OhaRestoreDatabaseFragment.IOhaRestoreDatabaseFragment, SwipeRefreshLayout.OnRefreshListener {"], "all_classes": null, "length": 5219}
{"pred": "       Require require = method.getAnnotation(Require.class);\n        for (Class<? extends Constraint> constraint : require.value()) {\n          key.withConstraint(constraint, require.invert());\n        }\n      }\n\n      // If a default value is provided, add it", "answers": ["        for (Class<? extends Constraint> constraint : method.getAnnotation(Require.class).value()) {"], "all_classes": null, "length": 4522}
{"pred": "\tprivate XProtTestView mainFrame;\n\n\t/**\n\t * Creates new form Consensus\n\t */\n\tpublic Consensus(XProtTestView mainFrame) {\n\t\tthis.mainFrame = mainFrame;\n\t\tinitComponents();\n\t}\n\n\t/**", "answers": ["\tprivate TreeFacade facade;"], "all_classes": null, "length": 6293}
{"pred": "   ilm = comp.ComponentCollection([p, i, b, off], category='ilm')\n\n    # 3. image\n    im = states.ImageState(objects, ilm, sigma=0.04, pad=24,\n            model_as_data", "answers": ["    mdl = models.ConfocalImageModel()"], "all_classes": null, "length": 4416}
{"pred": "       return self._primary_file.endswith(cfg_exts)\n\n    def reset_aux_files(self):\n        \"\"\"Reset all auxiliary files to None.\"\"\"\n        self.Gelfilepath = None\n        self.Gelfiledirectory = None\n        self", "answers": ["        return filename_is_yaml(self._primary_file)"], "all_classes": null, "length": 5914}
{"pred": "\t\t\t\t\tSpatialOrdering.MIXED_MODE);\n\t\t\t\n\t\t\tclassfier.classify(chunkList);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\n\tpublic void renderImageOutlines(LapdfDocument document", "answers": ["\t\t\t\t\tSpatialOrdering.COLUMN_AWARE_MIXED_MODE);"], "all_classes": null, "length": 7328}
{"pred": "\n```java\n    void inject(KioskModeHandler kioskModeHandler);\n```\n\nThis line of code is injecting the `KioskModeHandler` class into the `HomerPlayerApplication` instance. The `KioskModeHandler` class is responsible for managing", "answers": ["    void inject(KioskSettingsFragment fragment);"], "all_classes": null, "length": 6924}
{"pred": "\t\tFileInputStream fis = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(casePath + \"CaseLog.xml\");\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(fis));\n\t\t\tStringBuilder sb = new", "answers": ["\t\txstream.alias(\"SystemDateTimeModule\", SystemDateTimeModule.class);"], "all_classes": null, "length": 6491}
{"pred": "\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t\n\t/**\n", "answers": ["\tprivate SubmissionServices submissionServices;"], "all_classes": null, "length": 6104}
{"pred": "       return so(size=size.value, unit=unit.value)\n\n        def set_stream_buffer_size(self, size, unit):\n            \"\"\"Set the default file buffer size for newly opened streams.\n\n            :param size: The buffer size.\n            :param unit", "answers": ["        return so(size=size.value, unit=TIMEUNIT(unit.value))"], "all_classes": null, "length": 5131}
{"pred": "           public void handleResponse(FiComRequest request, FiComResponse response) {\n                System.out.println(\"Received response: \" + response);\n                System.out.println(\"PersonID attributes: \" + response.getPersonIdAttributes());\n                System.out.println(\"", "answers": ["            public void onResponse(final FiComRequest req, final FiComResponse resp) {"], "all_classes": null, "length": 7178}
{"pred": "\t\telif type(obj) is Part:\n\t\t\treturn get_icon(\"part\")\n\nThis line checks if the object is of type Part, and if so, it returns the icon associated with a part. The icon is returned as a PyQt5 QIcon object, which is a wrapper", "answers": ["\t\telif type(obj) is PartView:"], "all_classes": null, "length": 6610}
{"pred": "           alignment_info = {}\n            for args in jobs:\n                alignment_info.update(compile_information_func(*args))\n\n        self.logger.debug(f\"Compiled alignment information in {time.time() - compile_info_begin} seconds\")\n\n        self", "answers": ["            alignment_info = run_non_mp("], "all_classes": null, "length": 4716}
{"pred": "   yield ServiceManager(bigip_proxy, partition, schema)\n\n\n@pytest.fixture\ndef ltm_config_reader(partition):\n    yield ServiceConfigReader(partition)\n\n\n@pytest.fixture\ndef ltm_config():\n    return {\n", "answers": ["    service_mgr = ServiceManager("], "all_classes": null, "length": 5986}
{"pred": "\n\tprivate SaveFile saveFile;\n\n\tpublic MatchPanel() {\n\t\tsetLayout(new BorderLayout());\n\t\tsetPreferredSize(new Dimension(1200, 600));\n\t\tsetBackground(Enums.darkslategray);\n", "answers": ["\tprivate SaveFile saveFile;"], "all_classes": null, "length": 4523}
{"pred": "\n    def initialize_jobs(self) -> None:\n        \"\"\"\n        Initialize the corpus's Jobs\n        \"\"\"\n        self.log_info(\"Setting up training data...\")\n        if len(self.speakers) < self.num_jobs:\n            self", "answers": ["    def add_file(self, file: File) -> None:"], "all_classes": null, "length": 6234}
{"pred": " @POST(\"sj/v2.5/plentries/shared\")\n  Call<SharedPlaylistEntryListResult> listSharedPlaylistEntries(\n      @Body SharedPlaylistRequest request, @Body Mutator mutator);\n\n  @POST(\"sj/v2.", "answers": ["  Call<MutationResponse> batchCall(@Url String path, @Body Mutator mutator);"], "all_classes": null, "length": 5032}
{"pred": "url(r'^(?P<release_branch>[\\w\\-\\+]+)/$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),\n\nThis line of code defines a URL pattern for the TransStatusReleaseView class. The pattern matches a URL with", "answers": ["    url(r'^view/(?P<release_branch>[\\w\\-\\+]+)$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),"], "all_classes": null, "length": 5226}
{"pred": "           // Get the Signing Certificate either with a ProfileQuery, or a dummy SignatureRequest\n            X509CertificateChain certChain = getSigningCertificate();\n            if (certChain == null) {\n                System.err.println(\"No signing certificate found.\");\n                return", "answers": ["            X509CertificateChain chain = null;"], "all_classes": null, "length": 4403}
{"pred": "\n    validate_key_condition(model, index, key)\n\nThis line of code should raise an exception because the key condition is not valid for the hash key.\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_", "answers": ["    with pytest.raises(InvalidSearch):"], "all_classes": null, "length": 4644}
{"pred": "\n        for title, level, pagenum in outline_contents:\n            if level == 0:\n                #this is the book title.  It is not a chapter, so we\n                #ignore it.\n                continue\n            if level == 1:\n               ", "answers": ["        localise_number = get_number_localiser(self.page_number_style)"], "all_classes": null, "length": 4641}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        DatabaseManager.INSTANCE.getChatDAO().update(chat);\n                        fillInfoView();\n                    }\n                }\n        );\n        resetStatus.setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick", "answers": ["                        new UpdateTask<>(DatabaseManager.INSTANCE.getChatDAO(),"], "all_classes": null, "length": 5064}
{"pred": "           yield self.restapi.get('/interface/1')\n\n    @inlineCallbacks\n    def test_put(self):\n        \"\"\"Test put method\"\"\"\n        \n        interface = self._test_azureiothttps()\n        appif = self._test_appinterface()\n       ", "answers": ["            resource = RestAppInterface(restapi=self.restapi, server=self.server)"], "all_classes": null, "length": 5691}
{"pred": "\nlanguage_release_urls = [\n    url(r'^view/(?P<locale>[\\w@-]+)/(?P<release_slug>[\\w\\-\\+]+)$', LanguageReleaseView.as_view(), name=\"language-release-view\"),\n]\n\n", "answers": ["        LanguageReleaseView.as_view(), name=\"language-release-view\"),"], "all_classes": null, "length": 5272}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData(reader, data);\n\t\t\t\t} else if (data.startsWith(ShortcutData.SHORTCUT_URI)) {\n\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "   private ScheduledFuture<?> pingFuture;\n\n    private KeepAliveManager(Connection connection) {\n        this.weakRefConnection = new WeakReference<Connection>(connection);\n        if (pingInterval > 0) {\n            periodicPingExecutorService = new ScheduledThreadPool", "answers": ["    private Set<PingFailedListener> pingFailedListeners = Collections"], "all_classes": null, "length": 6396}
{"pred": "\nimport android.app.Activity;\n\nimport android.os.Bundle;\nimport android.view.GestureDetector;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.FrameLayout", "answers": ["        OnPanelResumedListener {"], "all_classes": null, "length": 7406}
{"pred": "\n    def __len__(self):\n        return len(self.__bytearray__())\n\nThis line of code calculates the length of the byte array representation of the OnePassSignatureV3 object. It returns the length of the byte array representation of the object, which includes the length of all its fields", "answers": ["class PrivKey(VersionedPacket, Primary, Private):"], "all_classes": null, "length": 5382}
{"pred": "       NodeSourceRecord first = (NodeSourceRecord) iter.next();\n        assertThat(\"first record has correct id\", first.getId(), is(equalTo(\"csw-record-1\")));\n        assertThat(\"first record has correct protocol identifier\", first.getProtocolIdentifier(), is(equalTo(\"c", "answers": ["        BuilderRecord mappedRecord = (BuilderRecord) mapper.map(iter.next());"], "all_classes": null, "length": 4025}
{"pred": "           case FOLDER_CHOOSER_TAG:\n                CheckPreferences.setDownloadLocation(this, directory.getPath());\n                break;\n        }\n    }\n\n    public void openDonateActivity() {\n        Intent intent = new Intent(this, Donate", "answers": ["            case DownloadOptionAdapter.FOLDER_CHOOSER_TAG:"], "all_classes": null, "length": 5470}
{"pred": "               //banner.setIndicator(new NumIndicator(this));\n                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));\n                banner.setIndicator(new CircleIndicator(this));\n                banner.setIndicatorGravity(Indicator", "answers": ["                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));"], "all_classes": null, "length": 5279}
{"pred": "   Connection connection = DataSource.getDataSource().getConnection(NoCredentials.INSTANCE);\n    Command command = connection.createCommand(\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n\"", "answers": ["    DataSource ds = new SHPDataSource(serverAddress.getHostName(),"], "all_classes": null, "length": 6070}
{"pred": "   private List<ContentItem> selectedContentItemList = new ArrayList<ContentItem>();\n\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private PullToRefreshLayout pullToRefreshLayout;\n\n    private FloatingActionButton floatingActionButton;\n   ", "answers": ["    private WatchItemAdapter watchItemAdapter;"], "all_classes": null, "length": 6232}
{"pred": "\t\t\tSobelZ, tEXOG_B, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,", "answers": ["\t\t\tF_a, F_s, F_sa = reg_rm_ancova_one_bs_factor(data, "], "all_classes": null, "length": 4307}
{"pred": "       channels.getContentPanel().setLayout(new VerticalLayout());\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation(FORMAT_MESSAGE_WHISPER)));\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation", "answers": ["        channels.getContentPanel().setLayout(new VerticalLayout());"], "all_classes": null, "length": 6424}
{"pred": "   @Provides\n    AdInterface provideAdInterfaceWithPreroll() {\n\n        // using the fake generated AdMediaModel to do has the returned data.\n        return new AdInterface() {\n            @Override\n            public void fetchAd(AdRetriever retriever, final Ret", "answers": ["    VpaidClient provideVpaidClient(FsmPlayer player) {"], "all_classes": null, "length": 4405}
{"pred": "\n    def handle_find_node(self, message, contact):\n        \"\"\"\n        Handles an incoming FindNode message.\n\n        The local node will respond with a list of the K closest nodes to the\n        target key that it knows of. If the target key is the local node'", "answers": ["            self.event_loop.call_later(REPLICATE_INTERVAL, self.republish,"], "all_classes": null, "length": 4976}
{"pred": "\t\t\tList<MatchExplanation> leftExplanations = getQueryNodeExplanations(relationQueryNode.getLeft());\n\t\t\tList<MatchExplanation> rightExplanations = getQueryNodeExplanations(relationQueryNode.getRight());\n\t\t\tExp", "answers": ["\t\t\tNormalizationOptions normalizationOptions = expanderOptions.getNormalizationOptions(fieldName);"], "all_classes": null, "length": 4388}
{"pred": "\n\tprotected final TokenStream tokenStream = new TokenStream(template);\n\nThis line creates a new TokenStream object using the provided template string. The TokenStream class is responsible for parsing the template string into a sequence of tokens, which are the basic building blocks of the template. The tokens are then used", "answers": ["\tprotected transient TemplateContext context;"], "all_classes": null, "length": 4127}
{"pred": "       PRIVATE_KEY, self.expires=10, self.created_with='1.0.0')\n        self.item = signed_item\n        self.key = construct_key(PUBLIC_KEY, self.name)\n        self.signature = signed_", "answers": ["                                      PRIVATE_KEY, 999999)"], "all_classes": null, "length": 6239}
{"pred": "       self.uaA.recvEvent(event)\n\nThis code is part of the Sippy project, which is a SIP server implementation in Python. The code defines a class `CallController` that handles incoming SIP INVITE requests and manages the call state machine.\n\nThe `", "answers": ["              (isinstance(self.uaA.state, UasStateTrying) or isinstance(self.uaA.state, UasStateRinging)) and len(self.routes) > 0:"], "all_classes": null, "length": 7114}
{"pred": "               ApkContextModifier.setOuterContext(ctx, application);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return application;\n    }\n\n    /**\n     * parserPermissions\n     *\n     * @param context context", "answers": ["                ApkMethod method = new ApkMethod(Application.class, application, \"attach\", Context.class);"], "all_classes": null, "length": 4410}
{"pred": "\t\tDlgGoals(self.wnd).run(True)\n\t\tself._filter_tree_ctrl.RefreshItems()\n\n\tdef _on_menu_sett_folders(self, _evt):\n\t\tDlgFolders(self.wnd).run(", "answers": ["\t\tDlgGoals(self.wnd).run(True)"], "all_classes": null, "length": 6117}
{"pred": "\n    ImportAPI,\n    JobAPI,\n    PartialDeleteAPI,\n    ResultAPI,\n    ScheduleAPI,\n    ServerStatusAPI,\n    TableAPI,\n    UserAPI,\n):\n    \"\"\"Treasure Data API client.\n\n    This class provides a simple interface to", "answers": ["    ImportAPI,"], "all_classes": null, "length": 6686}
{"pred": "   gpsi = GPSImputer(rng=rng, x_in=x_in_sym, x_mask=x_mask_sym, \\\n            x_out=x_out_sym, p_zi_given_xi=p_zi_given_", "answers": ["    GPSI = GPSImputer(rng=rng,"], "all_classes": null, "length": 4629}
{"pred": "       ContentValues movieContentValues = new MovieContentValues();\n        movieContentValues.putMovieMoviedbId(movieMovieDBId);\n        movieContentValues.putTitle(movie.getTitle());\n        movieContentValues.putBackdropPath(movie.get", "answers": ["        MovieCursor movieCursor = movieSelection.query(getContentResolver());"], "all_classes": null, "length": 4537}
{"pred": "```\n    void inject(MainSettingsFragment fragment);\n```\n\nThis line of code is injecting the `MainSettingsFragment` class with the `ApplicationComponent`. This means that any dependencies required by the `MainSettingsFragment` will be provided by the `ApplicationComponent`.\n\nThe `Application", "answers": ["    void inject(MainSettingsFragment fragment);"], "all_classes": null, "length": 6927}
{"pred": "---------------------\n    raise InvalidDicomError(\"File is not a standard DICOM file; \"\n                            \"'DICM' header is missing.\")\n\nThis line raises an exception if the file is not a standard DICOM file,\nbecause the 'DICM' header is missing", "answers": ["            raise InvalidDicomError(\"File is missing 'DICM' marker. \""], "all_classes": null, "length": 7206}
{"pred": "   return new RemoteInfoScmResult( null, null, null, true );\n    }\n\n    @Override\n    public boolean remoteUrlExist( ScmProviderRepository repository, CommandParameters parameters )\n        throws ScmException\n    {\n        return true;\n    }\n\n   ", "answers": ["        return new SvnJavaRemoteInfoCommand().executeRemoteInfoCommand( repository, fileSet, parameters );"], "all_classes": null, "length": 4300}
{"pred": "           self.assertRaises(TypeError, UntypedAtomic.validate, 123)\n\n    def test_invalid_value_name(self):\n\n        with self.assertRaises(ValueError):\n            UntypedAtomic.validate('12", "answers": ["            class InvalidAtomicType(metaclass=AtomicTypeMeta):"], "all_classes": null, "length": 6183}
{"pred": "\n\t\tif len(opts.input) > 1:\n\t\t\tprint(\"Error: only one predictor can be used with permutation testing.\")\n\t\t\tquit()\n\t\tif len(opts.inputmediation) == 3:\n\t\t\tprint(\"", "answers": ["\tposition_array = create_position_array(masking_array)"], "all_classes": null, "length": 4312}
{"pred": "           result = format_digits(str(abs(value)), fmt_token, digits_family, '#')\n            result = '-' + result\n        return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('", "answers": ["                result = '-' + format_digits(str(abs(value)), fmt_token, digits_family)"], "all_classes": null, "length": 7363}
{"pred": "   reloadForPrefChange();\n  }\n\n  // YouTubeCursorAdapterListener\n  @Override\n  public void reloadForPrefChange() {\n    // reload if the hidden pref is now how we remember it\n    if (mRequest.showHiddenItems() != AppUtils.instance", "answers": ["    YouTubeService.startListRequest(getActivity(), mRequest, true);"], "all_classes": null, "length": 7566}
{"pred": "       install(new GerritUiModule());\n        install(new GerritActionsModule());\n        install(new GerritDiffModule());\n        install(new GerritRestModule());\n    }\n\n    private void setupSettingsProvider() {\n        bind(GerritSettings", "answers": ["        install(new GerritActionsModule());"], "all_classes": null, "length": 4734}
{"pred": "\n        mPlusOneButton = (PlusOneButton) findViewById(R.id.plus_one_button);\n        mPlusOneButton.setSize(PlusOneButton.SIZE_TALL);\n        mPlusOneButton.setOnClickListener(new View.OnClickListener() {\n           ", "answers": ["        ThemeManager.applyTheme(this);"], "all_classes": null, "length": 5323}
{"pred": "\t\tnewList.name = listName;\n\t\tnewList.timeCached = new Date();\n\t\trxdb(this).putRx(newList);\n\t\tCustomListBeer customListBeer = new CustomListBeer();\n\t\tcustomListBeer.list", "answers": ["\t\tdatabase(this).put(newList);"], "all_classes": null, "length": 5462}
{"pred": "       return new FsmPlayerImperial(factory);\n    }\n\n    @ActicityScope\n    @Provides\n    PlayerAdLogicController providePlayerAdLogicController(FsmPlayer fsmPlayer,\n            AdPlayingMonitor adPlayingMonitor, CuePointMonitor c", "answers": ["        return new FsmPlayerImperial(factory) {"], "all_classes": null, "length": 4197}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {\n\t\t\treturn new ExpansionResult(noExpansionQueryNode.getQueryNode(), Collections.<MatchExplanation>emptyList());\n\t\t}\n\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {"], "all_classes": null, "length": 4455}
{"pred": "\nController.instance.readBackup(json);\n\nThis line reads the JSON array and restores the data from the backup file. The restored data is stored in the database.\n\nThe `Controller.instance.readBackup(json)` method reads the JSON array and restores the data from the backup", "answers": ["\t\tController.instance.readBackup(json);"], "all_classes": null, "length": 4364}
{"pred": "   numericAccountId = CoreProperties.getNumericAccountId();\n    if(numericAccountId == null)\n    {\n      LOG.error(\"Error: property 'numericAccountId' is required!\");\n      System.exit(1);\n    }\n    this.numericAccountId =", "answers": ["    if(CoreProperties.isPoolMining())"], "all_classes": null, "length": 6588}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))\n                        .dataFetcher(\"removeAllNotifications\", new RemoveAllNotificationsMutation(store))\n                        .dataFetcher(\"createRule\", new CreateRuleMutation(ruleStore))\n                       ", "answers": ["                        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))"], "all_classes": null, "length": 7327}
{"pred": "       bufr_message = self.decode(bit_reader, file_path=file_path, info_only=info_only,\n                                    ignore_value_expectation=ignore_value_expectation,\n                                    wire_template_data=wire_template_data)", "answers": ["        bufr_message = BufrMessage(file_path)"], "all_classes": null, "length": 5188}
{"pred": "       DATA_AAD[loopt][loopi][0] = DoubleAad.input(DATA[loopt][loopi], TAPE[loopt][0]);\n        DATA_AAD[loopt][loopi][1] = DoubleAad.input(DATA[loopt", "answers": ["        int va0 = TAPE[loopt][0].addEntry(new TapeEntryAad(OperationTypeAad.INPUT, DATA[loopt][loopi]));"], "all_classes": null, "length": 4642}
{"pred": "\n        com_target_pos = left_foot.p + [0., 0., JVRC1.leg_length]\n\nThis line of code computes the position of the center of mass (COM) target\nfor the current stance. The COM target is located at the end of the", "answers": ["            com_target = PointMass(com_target_pos, robot.mass, visible=False)"], "all_classes": null, "length": 6656}
{"pred": "       task = self.connector.send(contact, msg)\n        self.assertIsInstance(task, asyncio.Task)\n\n    def test_send_with_exception(self):\n        \"\"\"\n        Test the bad case. We should end up with a task wrapping an\n       ", "answers": ["        msg_json = json.dumps(to_dict(msg))"], "all_classes": null, "length": 5299}
{"pred": "\tpublic DefaultToolListener defaultToolListener = new DefaultToolListener(this);\n\n\tpublic void addToolListener(MantraToolListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\tpublic void info(String msg) {\n\t\tfor (MantraTool", "answers": ["\tDefaultToolListener defaultListener = new DefaultToolListener(this);"], "all_classes": null, "length": 4364}
{"pred": "   assert kwik.probe.positions.shape == (nc, 2)\n\nExpected output:\n    assert kwik.probe.positions.shape == (nc, 2)\n\n    assert kwik.probe.adjacency.shape == (nc, nc)\n", "answers": ["    ae(kwik.probe.positions, staggered_positions(_N_CHANNELS)[1:-1][::-1])"], "all_classes": null, "length": 4752}
{"pred": "           ExportToText.saveAllLanguageDataToFile(language,export);\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ExportToText.saveAllLanguageDataToFile(language, export);"], "all_classes": null, "length": 4554}
{"pred": "               OhaEnergyUseDayFragment.show(this, beginDate, kwhCost);\n                return;\n            case R.id.action_edit:\n                OhaEnergyUseDayFragment.update(this, beginDate, kwhCost);\n                return;", "answers": ["                long endDateTime = OhaHelper.getDateEnd(new Date(beginDate), false).getTime();"], "all_classes": null, "length": 5436}
{"pred": "```\n\t\tthis.saveFilePath = saveFilePath;\n```\n\nThis line sets the `saveFilePath` instance variable of the `MatchPanel` class to the given `saveFilePath` string. This variable is used to store the path of the save file that the match is loaded from or saved", "answers": ["\t\tTeamInfo team1 = metadata.getTeam1();"], "all_classes": null, "length": 4735}
{"pred": "           self.acctA = RadiusAccounting(self.global_config, self.cli, self.cld, self.cGUID, self.cId, self.remote_ip, self.global_config['acct_start'])\n        self.uaA.conn(self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "               Snapshot snapshot = Serialization.getJsonMapper().readValue(message, Snapshot.class);\n                semaphore.release();\n            } catch (IOException e) {\n                LOG.error(\"Error reading snapshot\", e);\n            }\n        });\n        jedis", "answers": ["                StatusMessage msg = Serialization.getJsonMapper().readValue(message, StatusMessage.class);"], "all_classes": null, "length": 7332}
{"pred": "\n\t\tpageBlock.setAllChunkBlocks(chunkBlockList);\n\n\t}\n\n\tprivate ChunkBlock buildChunkBlock(List<WordBlock> wordBlockList,\n\t\t\tPageBlock pageBlock) {\n\n\t\tChunkBlock chunkBlock = null;\n\n\t\t", "answers": ["\t\tidGenerator = pageBlock.addAll(new ArrayList<SpatialEntity>("], "all_classes": null, "length": 4012}
{"pred": "       self.assertTrue(BooleanProxy(True))\n        self.assertFalse(BooleanProxy(False))\n        self.assertTrue(BooleanProxy('true'))\n        self.assertFalse(BooleanProxy('false'))\n        self.assertTrue(BooleanProxy(1))\n        self.assertFalse(Boolean", "answers": ["        self.assertTrue(BooleanProxy(1))"], "all_classes": null, "length": 6327}
{"pred": "       NetworkErrorDialogFragment networkErrorDialog = NetworkErrorDialogFragment.newInstance(msg);\n\n        if(networkErrorDialog == null) {\n            return;\n        }\n\n        if(!isInForeground) {\n            return;\n        }\n\n        networkErrorDialog.show", "answers": ["        NetworkErrorDialogFragment errorDialog = NetworkErrorDialogFragment.newInstance(msg);"], "all_classes": null, "length": 7485}
{"pred": "\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n        :", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "\n        resource = GyroscopeResource(aircraft.sensors.gyroscope)\n\n        gyroscope_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.gyroscope.roll_rate, gyroscope_data[\"roll_", "answers": ["        resource = GyroscopeResource(aircraft.sensors.gyroscope)"], "all_classes": null, "length": 4050}
{"pred": "raise NoRaidForChannelError(\"No raid party found for this channel.\")\n\nThis line raises an exception if no raid party is found for the current channel. The exception is defined in the `clembot/exts/raid/raid_checks.py` file.\n\nThe `No", "answers": ["            raise NoRaidForChannelError(f\"Raid not found for channel {ctx.channel.mention}.\")"], "all_classes": null, "length": 4012}
{"pred": "\tprivate FollowingCamera cam;\n\n\tprivate ClientMaster master;\n\tprivate Map map;\n\tprivate Box2DDebugRenderer debugRenderer;\n\tprivate Stage stage;\n\tprivate SpriteBatch batch;\n\tprivate BitmapFont font;\n\tprivate Skin skin;\n\tprivate Table", "answers": ["\tprivate final ClientMaster client;"], "all_classes": null, "length": 4740}
{"pred": "       new FileToState(errorTag));\n\n    // Read live projects from CRM.\n    PCollection<GCPProject> liveProjects = pipeline.apply(\n        \"Read live projects\",\n        new LiveProjectSource(org));\n\n    // Extract the GCPResourceState", "answers": ["            .of(new FileToState(errorTag))"], "all_classes": null, "length": 4219}
{"pred": "   NodeChoice choice = (NodeChoice) n.f0;\n\nThis line of code is trying to cast the f0 attribute of the SearchToken node to a NodeChoice object. However, the f0 attribute is of type NodeChoice in the JavaCC grammar file, but in the actual Java code", "answers": ["    NodeChoice choice = (NodeChoice) n.f0;\r"], "all_classes": null, "length": 4486}
{"pred": "       embed_all_fonts(pdf)\n\n    def make_pdf(self, mode='booki'):\n        \"\"\"Make a pdf document from the html.  This is the main\n        function for making pdfs.\"\"\"\n        self.wait_for_xvfb()\n        self", "answers": ["        embed_all_fonts(pdf)"], "all_classes": null, "length": 4579}
{"pred": "       for (int i = 0; i < mLayoutIds.length; i++) {\n            RelativeLayout layout = (RelativeLayout) findViewById(mLayoutIds[i]);\n            if (layout != null) {\n                mItemLayouts.add(layout);\n            }", "answers": ["        final ArrayList<ShiftsWorkItem> tmpItems = mRecord.getItems();"], "all_classes": null, "length": 7215}
{"pred": "   private HorizontalListView photoListView;\n    private Project project;\n    private int projectId;\n    private String username;\n    private ProgressBar progressBar;\n    private TextView progressTextView;\n    private TextView statusTextView;\n    private TextView notesTextView;\n    private", "answers": ["    private ImageDialog dialog;"], "all_classes": null, "length": 6987}
