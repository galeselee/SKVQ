{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        source.get()  # Consume the opening bracket.\n        if source.get() == class_name:\n            source.get()  # Consume the class name.\n            close_brace = source.get()\n            if", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "# Predict the number of the test image\n#nr = find_number(image28_28)\nnr = knn.predict(image28_28)\nprint(nr)\n# Print the number of the predicted image\n#print(nr)\n# Print the percentage", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 1L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelectWhere()\n    {\n        String stmtText = \"select id from S0", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\tpublic void setFile(File file, boolean constrainAspect) {\n\t\tthis.file = file;\n\t\tthis.constrainAspect = constrain", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of this code is, but it seems to be setting up a translator between GTK events and Pygame events. The Translator class is initialised with a main window and an inner event box, and it connect", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\n    if kwargs[\"stability\"]:\n        logger.warning(\"--stability is deprecated; please use --verify instead!\")\n        kwargs['verify_max_time'] = None\n        kwargs['verify_chaos_mode'] = False\n        kwargs['verify_repeat_", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength of the wavemeter in nm (vac).\n        @return float: current wavelength\n        \"\"\"\n        # lock the thread to avoid race conditions\n        self.threadlock.lock()\n", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE,\n            PresenceStatus.DND,\n            PresenceStatus.XA,\n            PresenceStatus.AWAY,\n            PresenceStatus.ERROR,\n            Pres", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await poll.Setup(null, options);\n            ActivePoll = poll;\n            pollTimer.Interval = MapVoteTime * 1000", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 12);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = AppDomain.CurrentDomain.Load (name);\n\t\t\t\t}\n\t\t\t\tif (assembly == null && throwOnMissing)\n\t\t\t\t\tthrow new Exception", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        interface=dict(type='str', required=True)\n    ))\n    module = AnsibleModule(argument_spec=argument_spec)\n    link_status", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   return s.matches(\"\\\\d+(\\\\s*,\\\\d+)*\");\n  }\n  public void setProperties(ISVNLocalResource resource) throws SVNException {\n    if (resource instanceof ISVNRemoteResource) {\n      ISVNRemoteResource remoteResource = (", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_l", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(284, 284);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = []\nfor observation in observations:\n    behavior.append({\n        'id': observation['id'],\n        'code': observation['code'],\n        'category': translations_dict[observation['code']]['category'],\n        'note': translations_dict", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        Get the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for handle in handles:\n            person = self.report.database[handle", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"ensure vehicle stays put until it is ready to fly\"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT_TKOFF_ALT", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayloadAsBytes(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn buffered", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            // Save memento to the underlying E4 model\n            final IMemento memento = getSite().getPerspective().getPerspectiveModel().getMemento();\n            final String factoryID = OPIBuilderPlugin.getFactoryID", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (launcher != null) {\n    launcher.launchMenu(e);\n}\n}\n    }\n}\n\nI'm not sure what the purpose of the `ContextMenuHandler` class is, but it seems to be related to handling context menus for editable comb", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        names = [\n            (\"John \\nWilliam\", \"John William\"),\n            (\"John \\nWilliam \\nJames\", \"John William James\"),\n            (\"John \\nWilliam \\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('display_name')\n        else", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                {\n                    return false;\n                }\n                Current = list[index];\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    repo = localrepo.localrepository(ui, os.path.join(parentpath, path))\n\n    return unionrepository(ui, path, False)\n\n# vim: set filetype=python tabstop=4 shiftwidth=4 expandtab:", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\n    record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info, **kwargs)\n\nThis line creates a new LogRecord object with the given parameters. The LogRecord object is a container for the log event data, including the name of the logger,", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\",\n                                   text=auth_message, navtrail=navtrail)\n\nThis line of code is handling the case when the user is not authorized to perform the requested action. It returns a page with an error", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nimport os\nimport re\nimport sys\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\nfrom ansible.utils.compat import (\n    PY2,\n    PY3,\n    PY35,\n   ", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.get(x).__orderby;\n\t\t\tif(index < 0)\n\t\t\t\tindex = x;\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    if page_count:\n        record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record if it is available. The page count is stored in the '", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n\nThis class represents the Send Unit Data command field in the EtherNet/IP protocol. It is a subclass of the `BaseSendPacket`", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridEnvelope(sourceFile.toURI().toURL());\n\t\t\n\t\t// Extracting the CRS\n\t\tCoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();\n\t\t\n\t\t// Ex", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCreatureType(this);\n        }\n        return e;\n    }\n}\n\nI'm not sure what you're trying to achieve with the last line of code, but if you're trying to set the creature type of the entity, you", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions):\n        return reader\n```\n\nThis code searches through the list of supported readers to find the one that can read the given file. It does this by checking if the file name ends with", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\t// find the parent cell\n\t\t\t\t\t\tCell parent = null;\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 188: // -/ key\n                if (down)\n                {\n                    Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                    Program.keyB_SPC = (Program.keyB_SPC &", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Distortion matrix weights']\nout_units += ['']\n\nPlease add the above line of code to complete the code. This line of code adds the distortion matrix weights to the list of outputs. The dist", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n    obj = obj.strip()\n    if obj.startswith(b\"\\ufeff\"):\n        obj = obj[4:]\n\n    lines = obj.split(\"\\n\")\n    if implementation == RisImplementation.WOK:\n        return list(Wok(lines,", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(FXCollections.observableArrayList(\n                strength));\n        this.scoreTable.", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 100) listLog.remove(", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    # If the makefiles exist, we can build OpenSSL.\n    if os.path.isfile(makefile):\n        print(\"Building OpenSSL...\")\n        sys.stdout.flush()\n        # If we are building for 64bit, we need to fix the", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self):\n        \"\"\"tests running the convert command\"\"\"\n        self.test_simpleentry()\n        self.test_convertprop()\n        self.test_no_value_entry()\n        self.test_no_separator_entry()\n        self", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\n# The following line of code is used to manipulate the FortiGate API request based on the state\n# of the resource (merged_data) being configured.\n#", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Published.HasValue ? c.Published.Value.Year.ToString() : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteWithMultipleResponses(self):\n        \"\"\"\n        TCP: Short write to client with multiple responses\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static RustTokenId getByCategory(TokenCategory category) {\n        for (RustTokenId kind : values()) {\n            if (kind.category == category) {\n                return kind;\n            }\n        }\n        throw new IllegalArgumentException(\"No token found for", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(DescriptionControlID) as Label;\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(TitleControlID) as Label;\n        }\n        public Control GetLabelForPercentage()\n", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
