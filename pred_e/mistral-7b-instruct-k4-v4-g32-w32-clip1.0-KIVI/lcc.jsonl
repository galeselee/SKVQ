{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        source.get()  # Consume the opening bracket.\n        if source.get() == class_name:\n            source.get()  # Consume the class name.\n            close_brace = source.get()\n            if", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "# Predict the number of the test image\n#nr = find_number(image28_28)\nnr = knn.predict(image28_28)\nprint(nr)\n# Print the number of the predicted image\n#print(nr)\n# Print the percentage", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 1L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelectWhere()\n    {\n        String stmtText = \"select id from S0", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\tpublic void setFile(File file, boolean constrainAspect) {\n\t\tthis.file = file;\n\t\tthis.constrainAspect = constrain", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of this code is, but it seems to be setting up a translator between GTK events and Pygame events. The Translator class is initialised with a main window and an inner event box, and it connect", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\n    if kwargs[\"stability\"]:\n        logger.warning(\"--stability is deprecated; please use --verify instead!\")\n        kwargs['verify_max_time'] = None\n        kwargs['verify_chaos_mode'] = False\n        kwargs['verify_repeat_", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength of the wavemeter in nm (vac).\n        @return float: current wavelength\n        \"\"\"\n        # lock the thread to avoid race conditions\n        self.threadlock.lock()\n", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE,\n            PresenceStatus.DND,\n            PresenceStatus.XA,\n            PresenceStatus.AWAY,\n            PresenceStatus.ERROR,\n            Pres", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await poll.Setup(null, options);\n            ActivePoll = poll;\n            pollTimer.Interval = MapVoteTime * 1000", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 12);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = AppDomain.CurrentDomain.Load (name);\n\t\t\t\t}\n\t\t\t\tif (assembly == null && throwOnMissing)\n\t\t\t\t\tthrow new Exception", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        interface=dict(type='str', required=True)\n    ))\n    module = AnsibleModule(argument_spec=argument_spec)\n    link_status", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   return s.matches(\"\\\\d+(\\\\s*,\\\\d+)*\");\n  }\n  public void setProperties(ISVNLocalResource resource) throws SVNException {\n    if (resource instanceof ISVNRemoteResource) {\n      ISVNRemoteResource remoteResource = (", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, start, stop, hub_threshld, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_l", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(284, 284);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = []\nfor observation in observations:\n    behavior.append({\n        'id': observation['id'],\n        'code': observation['code'],\n        'category': translations_dict[observation['code']]['category'],\n        'note': translations_dict", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        Get the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for handle in handles:\n            person = self.report.database[handle", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"ensure vehicle stays put until it is ready to fly\"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT_TKOFF_ALT", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayloadAsBytes(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn buffered", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            // Save memento to the underlying E4 model\n            final IMemento memento = getSite().getPerspective().getPerspectiveModel().getMemento();\n            final String factoryID = OPIBuilderPlugin.getFactoryID", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (launcher != null) {\n    launcher.launchMenu(e);\n}\n}\n    }\n}\n\nI'm not sure what the purpose of the `ContextMenuHandler` class is, but it seems to be related to handling context menus for editable comb", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        names = [\n            (\"John \\nWilliam\", \"John William\"),\n            (\"John \\nWilliam \\nJames\", \"John William James\"),\n            (\"John \\nWilliam \\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('display_name')\n        else", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                {\n                    return false;\n                }\n                Current = list[index];\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    repo = localrepo.localrepository(ui, os.path.join(parentpath, path))\n\n    return unionrepository(ui, path, False)\n\n# vim: set filetype=python tabstop=4 shiftwidth=4 expandtab:", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\n    record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info, **kwargs)\n\nThis line creates a new LogRecord object with the given parameters. The LogRecord object is a container for the log event data, including the name of the logger,", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\",\n                                   text=auth_message, navtrail=navtrail)\n\nThis line of code is handling the case when the user is not authorized to perform the requested action. It returns a page with an error", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nimport os\nimport re\nimport sys\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\nfrom ansible.utils.compat import (\n    PY2,\n    PY3,\n    PY35,\n   ", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.get(x).__orderby;\n\t\t\tif(index < 0)\n\t\t\t\tindex = x;\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    if page_count:\n        record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record if it is available. The page count is stored in the '", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n\nThis class represents the Send Unit Data command field in the EtherNet/IP protocol. It is a subclass of the `BaseSendPacket`", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridEnvelope(sourceFile.toURI().toURL());\n\t\t\n\t\t// Extracting the CRS\n\t\tCoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();\n\t\t\n\t\t// Ex", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCreatureType(this);\n        }\n        return e;\n    }\n}\n\nI'm not sure what you're trying to achieve with the last line of code, but if you're trying to set the creature type of the entity, you", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions):\n        return reader\n```\n\nThis code searches through the list of supported readers to find the one that can read the given file. It does this by checking if the file name ends with", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\t// find the parent cell\n\t\t\t\t\t\tCell parent = null;\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 188: // -/ key\n                if (down)\n                {\n                    Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                    Program.keyB_SPC = (Program.keyB_SPC &", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Distortion matrix weights']\nout_units += ['']\n\nPlease add the above line of code to complete the code. This line of code adds the distortion matrix weights to the list of outputs. The dist", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n    obj = obj.strip()\n    if obj.startswith(b\"\\ufeff\"):\n        obj = obj[4:]\n\n    lines = obj.split(\"\\n\")\n    if implementation == RisImplementation.WOK:\n        return list(Wok(lines,", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(FXCollections.observableArrayList(\n                strength));\n        this.scoreTable.", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 100) listLog.remove(", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    # If the makefiles exist, we can build OpenSSL.\n    if os.path.isfile(makefile):\n        print(\"Building OpenSSL...\")\n        sys.stdout.flush()\n        # If we are building for 64bit, we need to fix the", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self):\n        \"\"\"tests running the convert command\"\"\"\n        self.test_simpleentry()\n        self.test_convertprop()\n        self.test_no_value_entry()\n        self.test_no_separator_entry()\n        self", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\n# The following line of code is used to manipulate the FortiGate API request based on the state\n# of the resource (merged_data) being configured.\n#", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Published.HasValue ? c.Published.Value.Year.ToString() : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteWithMultipleResponses(self):\n        \"\"\"\n        TCP: Short write to client with multiple responses\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static RustTokenId getByCategory(TokenCategory category) {\n        for (RustTokenId kind : values()) {\n            if (kind.category == category) {\n                return kind;\n            }\n        }\n        throw new IllegalArgumentException(\"No token found for", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(DescriptionControlID) as Label;\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(TitleControlID) as Label;\n        }\n        public Control GetLabelForPercentage()\n", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args['Bucket'] = bucket\n        query_args['Key'] = key\n        query_args = urllib.urlencode(query_args)\n        path += '?' + query_args\n        url = self.calling_format.build_url_base(self", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), new RectF(left, top, right, bottom), null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>\n            {\n                { DyeType.WindAzul, new Tuple<int, int>(0x3B2, 1060585) }, // Wind Azul\n              ", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(),\n                        c -> {\n                            if (c.isSuccess()) {\n                                refresh();\n                            } else {\n                                this.alertDialog.", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    for filename in os.listdir(self.dbm_dir):\n        if filename.endswith(ext):\n            list.append(os.path.join(self.dbm_dir, filename))\n\n    return list\n\n    def do_open(self,", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return (filename != null) ? filename : location.toExternalForm();\n    }\n    /**\n     * Returns the locale-specific string representation of this image.\n     *\n     * @param locale the locale for the string representation\n     * @return the locale-specific string representation of this", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=True)\n\n# The following line of code is used to transform the Ansible fact\n# into a FortiOS API client connection.\n# You can call fortios_client.get", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n        throw new IOException(\"Stream not marked\");\n        }\n        fileDecoder = clone(savedDecoder);\n    }\n    /**\n     * Skips bytes of data from this input stream.\n     *\n     * @param n the number of bytes to skip over.\n     * @return", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        if not publication.exists:\n            changed = publication.create(tables, params, owner)\n        else:\n            changed = publication.update(tables, params, owner)\n    elif state == 'absent':\n        if publication.exists:\n", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "int version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\n        Note that this function requires the pre-sigmoid activation as\n        input.  To understand why this is so you need to understand a\n       ", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: I18N\n        role = new FigRole(figEdge.getOwner(), figEdge.getSettings());\n        ordering = new FigOrdering(figEdge.getOwner(), figEdge.getSettings());\n        addFig(role);\n        addFig(ordering", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    LogManager.GetCurrentClassLogger().Error(ex);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "===================\n    for i in range(10):\n        full_name = pjoin( cfg.webdav_backend_directory, \"foo-%d\" % i )\n        assert os.path.isfile( full_name )\n        with open(full_name, \"rb", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    label = args[0]\n#    if", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append((ofs, ofs + len, 0))\n\t\t\t\tlen = 0\n\t\t\t\tofs += len\n\t\t\t\tcontinue\n\t\t\tnew_data = self.data.read(cur.offset + prog_ofs", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(value.substring(0, startIndex));\n\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"}\", startIndex));\n\t\t\tString macroValue = macroHandler.", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(new ASN1Boolean(false));\n    }\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n     ", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.getInstance();\n\t\t}\n\t}\n}\n\nI'm not sure what the issue is, but it seems like the `getPreviouslyConnectedDevices()` method is returning an `EmptyIterator` if the `Map` returned by `prefs", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead, CallNumber.ToString()));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n        // TODO: check that width is valid\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       i20 = i18 + 1;\n      }\n    }\n  }\n}", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // TODO: Add support for the \"denyAfter\" constraint\n                // The \"denyAfter\" constraint is not supported yet.\n                // It is used to specify a date after which the algorithm\n                // will be allowed.  The date is specified in the format\n              ", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      DeviceInfo deviceInfo = (DeviceInfo) deviceCell.getUserObject();\n      int unitNum = proxyInfo.getUnitNum();\n      DefaultPort proxyPort = (DefaultPort) proxyCell.get", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef write_to_file(self, file_path):\n    \"\"\"Writes the collection to a file.\n    Args:\n        file_path: The path to write the collection to.\n    Returns:\n        None\n    \"\"\"\n    with open(file_path,", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetOrderStatus(order, OrderStatus.Complete, false);\n\t\t\t}\n\t\t}\n\t\t/// <", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n    return self._conf_helper('current_ch', options)\n\nThis line of code is used to define the current channel that the instrument is controlling. It is used in the _fetch_helper function to determine which channels to read when using the fetch command.\n\nHere, the _conf_", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Run the sketch.\n   * <P>\n   * This is the final step in the build process.\n   *", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).edges(\"+Z\").fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        if len(self.objects) < 1:\n            raise ValueError(\"At least one edge must be selected\")", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    # Writing final memory update 6/7 (function unknown)\n    j = 0\n    dmpUpdate = []\n    while ((j < 4) or (j < dmpUpdate[2] + 3)):\n        dmpUpdate.append(self.dmpUp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf_path = pdfkit.from_string(get_pdf(item), False)\n\t\t\t\tif", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.MixedSet)\n                    list.Add(1073493); // Part of a Weapon/Armor Set (~1_val~ pieces)\n                else\n                    list.Add(1072378); // Part", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append((char) (d + 87));\n      }\n      d = (c >> 8) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0'", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.Login)\n\t\t\t{\n\t\t\t\t// This is the login packet.\n\t\t\t\t// We need to check if the player is allowed to connect.\n\t\t\t\t// If they are, we need to send them the", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue.pop(0),\n            fields={'display_name': category_queue[0]}\n        )\n        if category_queue:\n            for child in node.get_children():\n                self.create_subtree_for", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + (i >= 0 ? i : -i));\n                                }\n                                else {    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(newBundlePushedAssets, bundle.getPushedAssets().stream()\n                .map(PushedAsset::getIdentifier)\n                .collect(", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String myFolderNodeId = getMyNodeId();\n        String fileName = \"file-\" + RUNID + \".txt\";\n        Document doc = createTextFile(myFolderNodeId, fileName, content);\n        String docId = doc.getId();\n\n        // Create shared link", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj instanceof Number;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    @Test\n    public void testIsLong() {\n        assertFalse(\"isLong(null) failed\", NumberUtils.isLong(null));\n        assert", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple,", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n        if replace:\n            self.unlink(cr, uid, [res_id], context=context)\n\nThis line of code is used to delete any existing record in the ir_values table that matches the given criteria (model, key, name, res_id, key2). The", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode(IsolateThread vmThread)", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tEdischargeAlertsEtc = new ImageHelper(102179, \"images/EdischargeAlerts", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n\n        int encodedIndex = 0;\n        for( int i = off; i < off + len; i++ ) {\n            encoded[encodedIndex++] = encode3to4( encoded, encoded", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tBigInteger temp = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = temp;\n\t\t\t\ttemp = u", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct ();\n\t\t\t\t\t_abi_info.AddField (\"type\", typeof (int), 4, 0);\n\t\t\t\t\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_EXTENSION,\n                            \".xmi\");\n                } else {\n                    Configuration.setString(\n                            Pers", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "\n            field = opts.get_field(unique_check[0])\n            params['field'] = unique_check[0]\n            params['field_label'] = six.text_type(capfirst(field.verbose_name))\n        # A unique_together constraint\n       ", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\n    paramout.write(\"%-3s \\t %.5f\\n\" % (key,value))\n\nThis line writes the parameter name and its value to a file named \"list_param.out\". The file is opened in write mode (\"w\") and the parameters are written in a tab", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\ndef handlecheckheads(op, inpart):\n    \"\"\"check that head of the repo did not change\n    This is used to detect a push race when using unbundle.\n    This replaces the \"heads\" argument of unbundle.\"\"\"\n    h = inpart.read(20)", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n        cell_attributes = literal_eval(cas_data_str)\n\nThis line of code is used to parse the cell attributes data that was copied\nto the clipboard. The data is a string that was encoded as bytes using the\n`repr` function. The `literal", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[y * (width / 8) + x / 8] |= (byte)(1 <<", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the operatories that are flagged for Web Sched.\n\t\t\tforeach(long opNum in listWebSchedOpNums) {\n\t\t\t\tOperatory operatory=Operatories.GetOperatory(opNum);\n\t\t\t\t//", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       Debug.Assert( pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );\n        //if( pMem1.enc==SQLITE_UTF16LE || pMem1.enc==SQLITE_UTF16", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "               data.PowerRegenFlatModifier[i] = packet.ReadSingle(\"PowerRegenFlatModifier\", indexes, i);\n                }\n                }\n            }\n            if (changesMask[135])\n            {\n                for (var i =", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       seq = seqs[nidx]\n        seqarr = np.array(list(seq))\n        enter each SNP\n        for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n            for t", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index[] classIndexes = indexByTagAndClass[tag];\n            if (classIndexes == null) {\n                classIndexes = new Index[allClasses.size()];\n                indexByTagAndClass[tag] = classIndexes;\n            }\n            Index", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"Quote of the day:\";\n            this.quoteLabel.Visible = false;\n            //", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           data['recurrency'] = True\n            data['rrule_type'] = rrule_type[rule._freq - 1]\n            data['interval'] = rule._interval\n            data['count'] = rule._count\n            data['end_type'] = rule._until\n           ", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the current row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n           ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return DefaultInstance; }\n    }\n\n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n\n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_object_", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;\n                        AMainDs.AAnalysisAttribute.DefaultView.RowFilter = String.Format(\"{0}='{1}'\",\n                            AAnalysisAttributeTable.GetAccountCode", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (CanSeeReward)\n\t\t\t\t{\n\t\t\t\t\t// reward the player\n\t\t\t\t\tReward();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void Reward()\n\t\t{\n", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, 0, items.Length, new", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               if (AControlLabel != null)\n                {\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                }\n                ArgumentPanel.Controls.Add(AControl);\n                if (AAutomaticClearButton)\n                {\n                    Button", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Legal values for the Dyn d_tag field for PowerPC64 specific entries.\nDT_PPC64_PLTGOT = (DT_LOPROC + 1)\nDT_PPC64_PLTRELSZ = (DT_LOPROC + 2)", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to complete\n\t\t\tif(!mReadDone.WaitOne(1000, false))", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n    if p == 1:\n        sd[node.split_dim] = np.abs(node.split - x[node.split_dim])\n        min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightFirst2()\n\t{\n\t\tString acn = \"1. Nf3 d5\";\n\t\tGame game = game(", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (InvalidRelationException e)\n    {\n      // ignore\n    }\n    return null;\n  }\n  /**\n   *  Draw the given feature into the given Graphics object.  The feature is\n   *  drawn on the frame lines if frame_features_flag", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Link the new sector to the new lines\n\t\t\t\t\t\t\t\t\tforeach(LinedefSide ls in", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = Document.objects.create(\n            parent_topic=parent_doc,\n            locale=document_locale,\n            title=parent_doc.title,\n            slug=parent_doc.slug,\n            category=Document.CATEGORIES[0][0],", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create new rows and columns\n            lNewWidths = new float[lTotalColumns];\n            newRows = new ArrayList(lTotalRows);\n            for (i", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Common code for making each trait\n\t\t\t\t\t\t\tAction<string, string, string> addTrait = (type, newType, values) =>", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\n    return self.__class__(values, key=self._key)\n\nThis line of code creates a new instance of the SortedKeyList class with the\nupdated values and the same key function as the original sorted-key list. This\nensures that the new sorted-key list will maintain the", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the state of loaded instances,\n        including expiration and autoflush.\n        \"\"\"\n        for state in states:\n            if state.is_new:\n                self._new[state] =", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t};\n\t\t}\n\t}\n}", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "       return ToJson(result);\n    }\n    private void CleanupFiles(object sender, EventArgs e)\n    {\n        foreach (string file in cleanupFiles)\n        {\n            try\n            {\n                File.Delete(file);\n            }\n            catch (Exception", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[last + BZip2Constants.NUM_OVERSHOOT_BYTES + 2];\n\t\t}\n\t}\n}", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        //                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        //                        int y = args[2] + ScreenTop;\n                        //                        int obj = findBlastObject(x, y);\n                        //                ", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (iFile != null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tdouble\n\tdistance( final P pt1\n\t         , final P pt2\n\t         )\n\t{\n\t\t", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(), B()> ByVal value As Object, <C(A1:=false, A2:=true), D()> ByRef __exception As Integer) As Integer{0}\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxQ\",\n                    Slot = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            newHouse.MoveToWorld(m_House.Location, m_House.Map);\n                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n            m_From.SendGump(new HouseSwapG", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(getFirstString(), getNextString(), getLastString());\n\t\tplotID = plot.getID();\n\t\tplot.setFrameSize((int)getFirstArg(), (int)getLastArg());\n\t\tplot.setLimits(getFirstArg", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if widgetName == \"\":\n                widgetName = LANGUAGE(32053)\n            keyboard = xbmc.Keyboard( widgetName, xbmc.getLocalizedString(528), False )\n            keyboard.doModal()\n            if ( keyboard", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes(source, 0, source.length, NO_OPTIONS);\n    }\n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int)} but returns\n     * a byte array instead of instantiating a String. This is more efficient", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n    def run_command(self, cmd, input_data=None, sudo=False, shell=True,\n                     executable=None, cwd=None, env=None,\n                     timeout=None, stdout_callback=None, stderr_callback=None,", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i] == null)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + pixelStride > data.length) {\n            // integer overflow\n            throw new RasterFormatException(\"Incorrect scanline stride: \"\n                    + scanlineStride);\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "\n    def get_used_mem(self):\n        \"\"\"\n        Returns the VM's used memory (RSS).\n        :return: Used memory (MB)\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get used memory info from dead VM", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   return delta_sync(g.namespace, args['cursor'], args['exclude_types'],\n                      args['include_types'], args['timeout'], args['view'],\n                      args['exclude_folders'], args['exclude_account'],\n                      args['exclude_", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   objects = CourseEnrollmentManager()\n\nThis line of code creates a custom manager for the CourseEnrollment model,\nwhich provides additional methods for querying the model.\n\nThe custom manager is named \"CourseEnrollmentManager\", and it is assigned to\nthe \"objects\" attribute of the Course", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\n    system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.removeCustomValues(self.session,\n                                           system_id,\n                                           keys)\n\nThis code is part of", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "\n    'xNotesOn': {\n        'signature': ('ly:music?',),\n        'type': 'ly:music-function?',\n    },\n\nPlease complete the code for the 'xNotesOn' function. This function should take no arguments and return a", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Renders the current instance, encoded in a specified\n\t\t///    ID3v2 version.\n\t\t///", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.CollidingObj = false;\n                chr.CollidingGround = false;\n                chr.CollidingWater = false;\n                chr.CollidingPrim = false;\n                chr.CollidingTerrain = false;\n                chr.Colliding", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "       for i in xrange(number_threads):\n            ts[i].start()\n        # wait for all threads to finish\n        for i in xrange(number_threads):\n            ts[i].join()\n        # update the status\n        status_updater = StatusUpdater", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "   price_subtotal = fields.Float(string='Subtotal', compute='_compute_price', store=True, readonly=True)\n\nThis line of code computes the subtotal of the invoice line based on the price unit, discount, taxes, quantity, product, partner, and currency", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def _get_parameters(self, *names):\n        \"\"\"\n        Return the current values of the specified parameters.\n        \"\"\"\n        if self.local:\n            return [self.get_parameters()[name] for name in names]\n        else:\n            return [self.", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand)", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianRMis\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    @Override\n    public void deleteNode(Long nodeId)\n    {\n        Node node = getNodeNotNull(nodeId, false);\n        deleteNodeImpl(nodeId", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (isMainAxisRow) {\n        mainDim += sizeConsumedOnCurrentLine;\n        crossDim = paddingAndBorderAxisCross;\n      } else {\n        crossDim += sizeConsumedOnCurrentLine;\n        mainDim = paddingAndBorderAxisMain;\n      }\n", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis y2Axis", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\");\n            return ret;\n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param name", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof PlainView) {\n                    PlainView pv = (PlainView) c;\n                    pv.setAlignment(Alignment.LEFT);\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n        /**\n", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tcomments_seen = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (c == '/') {\n\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "\n    for dep in self.__deps:\n        dep.recipe.prepare(depEnv, sandboxEnabled, states, depSandbox, depTools, stack + [self.__packageName])\n\nThis loop iterates over all dependencies of the recipe. For each dependency\nthe prepare()", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"ResizeWidth\", ResizingPanel.GetResizeWidth(pane).ToString());\n            xmlWriter.WriteAttributeString(\"ResizeHeight\", ResizingPanel.GetResizeHeight(pane).ToString());\n            xmlWriter.WriteAttributeString(\"EffectiveSize\", new Size", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearchadmin.", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "=====================\ndef _number(text):\n    \"\"\"Converts a string to a number.\"\"\"\n    try:\n        return float(text)\n    except ValueError:\n        return None\ndef _url_safe(text):\n    \"\"\"Converts a string to a url-safe string.\"\"\"", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "\n                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (\n                                     field[1], field[0], desc))\n                except:\n                    pass\n", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "   # Update the permanences of the connected synapses\n    masterValidPermanence += rfPermChanges\n    # Update the potential synapses\n    masterPotential[coincSlice] += rfPermChanges\n    # Update the connected synapses\n    masterConnected[", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\n    self.lu.LogInfo(\"Checking if node %s is drained\", self.new_node_uuid)\n\nThis line checks if the new node specified for the secondary is drained or not.\nIf the node is drained, the replacement of disks will not be performed.", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if isBoolean(vmap, 'optType'):\n        complt += '\\t\\t\\t\\t\\t\"-' + optionPrefix + vmap['optName'] + '\" && ret=0\\n'\n    elif hasDescription(vmap):\n        complt += '\\", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "               if (m_ControlOrder == OrderType.Release)\n                {\n                    if (m_ControlMaster != null)\n                    {\n                        m_ControlMaster.Followers -= ControlSlots;\n                        if (m_ControlMaster is PlayerMobile)\n                ", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       Container parent = getParent();\n        if (parent != null) {\n            if (parent.getStyle().getClip() != null) {\n                Point p = new Point(x, y);\n                if (!parent.visibleBoundsContains(p)) {\n                    contains =", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (bmp_mono[n1] != bmp_mono[n1 + 1])\n                            {\n                                side1++;\n                                hits1++;\n                            }\n                        }\n                        if (y + r < image_height", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = 1.0 / 3.0 * (Math.sqrt(3.0) - 2.0);\n\t\t\t z[1] = 1.0 / 3.0 * (", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tString[] fieldsInTable = getTableFields(tableName);\n\n\t\t// Get the fields that are in the row:\n\t\tString[] fieldsInRow = new String[fields.size()];\n\t\tfor (int i=0;i<fields.size();i++)", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"IMPROVED TRACKING\"};\n\t\t\tbonusFeats[4] = new String[] {\"FIND TRACKS\"};\n\t\t\tbonusFeats[6] = new String[] {\"IMPRO", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "       self.SetHoverItem(None)\n        \"\"\"\n        \n        self.SetHoverItem(None)\n        self.SetToolTipString(\"\")\n        self.StopPreviewTimer()\n    def OnEnterWindow(self, event):\n        \"\"\"\n        Handles the ``", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverbWetLevel   (float reverbwetlevel)\n        {\n            return FMOD_EventCategory_SetReverbWetLevel(eventcategoryraw, re", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can you please", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    \n/* ********  I N P U T  ", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "               if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            if self.layoutNode == None:\n                log.log(0,\"error\",_(\"Unable to find layout node", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                if(numBits == 1)\n                    return new BigInteger(1);\n                else\n                    throw (new ArithmeticException(\"Cannot compute square root of odd number of bits.\"));\n            }\n            int numBytes = numBits >> 3;", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
