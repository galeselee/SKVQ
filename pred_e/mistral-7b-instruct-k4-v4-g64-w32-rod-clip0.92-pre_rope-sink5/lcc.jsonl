{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.match(class_name):\n        return class_contents\n    return None\n\nThe code is a regular expression parser written in Python. It uses a recursive descent parser to parse a regular expression string into a `Pattern` object. The parser recognizes various regular expression constructs such as", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "# Predict the number of the test image\n#nr = find_number(image28_28)\nnr = knn.predict(image28_28.reshape(1,784))\nprint(nr)\n# Print the number of the test image\n#", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 2L);\n        assertEquals(2L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelectWhere()\n    {\n        String stmtText = \"select id from S0", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setSelected(true);\n                if (item.getItemCount() > 0) {\n                    restoreSelection(selectionText, item.getItems());\n                }\n                break;\n            }\n        }\n    }\n    private void saveSettings() {", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\tbitmap.recycle();\n\t\tbitmap = BitmapFactory", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of this code is, but it seems to be setting up a translator between GTK events and Pygame events. The Translator class is initialised with a main window and an inner event box, and it connect", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\nif __name__ == \"__main__\":\n    setup_logging(level=wptlogging.LogLevel.INFO)\n    sys.exit(wptcommandline.main(sys.argv[1:], **kwargs))\n```\nThis code sets up the logging and then", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength of the wavemeter in nm.\n        @return float: current wavelength in nm\n        \"\"\"\n        # lock the thread to avoid race conditions\n        self.threadlock.lock()\n", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.BUSY.getStatusName(),\n            PresenceStatus.CHAT.getStatusName(),\n            PresenceStatus.DND", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await StartVote(null, options, null, MapVoteTime, poll);\n            return true;\n        }\n        private void MapVoteEnd", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 12);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = AppDomain.CurrentDomain.Load (name);\n\t\t\t\t}\n\t\t\t\tif (assembly == null && throwOnMissing)\n\t\t\t\t\tthrow new Exception", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        interface=dict(type='str', required=True)\n    ))\n    module = AnsibleModule(argument_spec=argument_spec)\n    link_status", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   return s.matches(\"\\\\d+(\\\\s*,\\\\d+)*\");\n  }\n  public void setProperties(ISVNLocalResource resource) throws SVNException {\n    if (resource instanceof ISVNRemoteResource) {\n      ISVNRemoteResource remoteResource = (", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = getNeighbours(nodemap, c_sead, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            for (int k = 0; k <", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 280);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = []\nfor observation in observations:\n    behavior.append({\n        'id': observation['id'],\n        'code': observation['code'],\n        'category': translations_dict[observation['code']]['category'],\n        'note': translations_dict", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, people):\n        \"\"\"\n        Return the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for person in people:\n            if person.get_sex() == Person", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"ensure vehicle stays put until it is ready to fly\"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT_TKOFF_ALT", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayloadAsBytes(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn buffered", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            saveMemento();\n        }\n    }\n    /** Save memento to the underlying E4 model */\n    public void saveMemento()\n    {\n        if (opiRuntimeDelegate == null)\n            return;\n", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && component.isEnabled() && component.isFocusOwner() && component.getBounds().contains(e.getPoint())) {\n// TODO: Add code to handle the contextual menu\n}\n}\n    }\n}\n\nI'm not sure what the TODO comment", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        names = [\n            (\"John \\nWilliam\", \"John William\"),\n            (\"John \\nWilliam \\nJames\", \"John William James\"),\n            (\"John \\nWilliam \\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('displayname')\n        else:", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                {\n                    return false;\n                }\n                Current = list.objects[index];\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    repo = localrepo.localrepository(ui, os.path.join(parentpath, path))\n\nThis line creates a new instance of the localrepository class, passing the\nUI object, the path to the repository, and the parent path as arguments.\nThe parent path is used to find", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\n    record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info, **kwargs)\n\nThis line creates a new LogRecord object with the given parameters. The LogRecord object is a container for the log event data, including the name of the logger,", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\",\n                                   text=auth_message, navtrail=navtrail)\n\nThis line of code is handling the case when the user is not authorized to perform the requested action. It returns a page with an error", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nimport os\nimport re\nimport sys\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\nfrom ansible.utils.display import Display\nfrom ansible.utils.compat import (\n    PY2,\n    PY3", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.add();\n\n\t\t\tdataString += encodeNASMessage(x);\n\t\t}\n\n\t\treturn dataString;\n\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    if page_count:\n        record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis code checks if the `page_count` variable is not `None` and if it is not, it adds", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n\nThis class represents the Send Unit Data command field in the EtherNet/IP protocol. It is a subclass of the `BaseSendPacket`", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridEnvelope(sourceFile.toURI().toURL());\n\t\t\n\t\t// Extracting the GeoTIFF file's CRS\n\t\tCoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();\n", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"Creatures.\" + this.name() + \".Name\"));\n        }\n        return e;\n    }\n}\n\nI want to set the custom name of the creature when it is spawned.", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions):\n        return reader\n```\n\nThis code searches through the list of supported readers to find the one that matches the file extension of the given filename. If no match is found, it returns", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\t// find the parent cell\n\t\t\t\t\t\tCell parent = null;\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           case 189: // -/ key\n                if (down)\n                {\n                    Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                    Program.keyB_SPC = (Program.keyB_SPC &", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of the distortion matrix']\nout_units += ['']\n\nPlease add the missing line of code to complete the code. The variable `out_list` should be updated with the weights of the", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\n    obj = obj.strip()\n    if obj.startswith(b\"\\ufeff\"):\n        obj = obj[4:]\n\n    lines = obj.split(\"\\n\")\n    return list(implementation.value.parse(lines, mapping, strict))", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateSinglePlayerTableStrength(opponent.getValue(),\n                    opponentPlayers);\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(strength);\n        this.scoreTable.add", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 100) listLog.remove(", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    if arch == \"x86\":\n        # If we're building for 32-bit, we need to fix the makefile\n        # to use the 32-bit version of nasm.\n        fix_makefile(makefile)\n\n    # Now we", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self, tmpdir):\n        \"\"\"tests converting a properties file to a po file\"\"\"\n        propsource = \"SAVEENTRY=Save file\\n\"\n        proptemplate = \"msgid %s\\nmsgstr \\\"%s\\\"\\n\"\n", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm.IsValid)\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t}\n\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n\n# Inventory of required to parameters as per the option list above.\n# The following parameters are considered mandatory for the task.\n    if not (module.params['host']", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(\n                    Enumerable.Range(0, (prevChildren.Length - StartPagingTreshold + PageSize - 1) / PageSize)\n                    .Select(i => childFactory(", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteWithTrailingData(self):\n        \"\"\"\n        TCP: Short write to client with trailing data\n        \"\"\"\n        name = 'short-write-trailing-data.tcp-short.tests.powerdns.com.'\n        query = dns.", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static RustTokenId getByCategory(TokenCategory category) {\n        for (RustTokenId kind : values()) {\n            if (kind.category == category) {\n                return kind;\n            }\n        }\n        throw new IllegalArgumentException(\"No token found for", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(DescriptionControlID) as Label;\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(TitleControlID) as Label;\n        }\n        public Control GetLabelForPercentage()\n", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       url = self.generate_url(query_args['expires'], method, bucket, key, headers, query_args['query_auth'], query_args['force_http'])\n\nI want to add a new parameter 'location' to the query_args dictionary.\n\nHow can I", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), new RectF(left, top, right, bottom), null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tPaint p = Tool", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>\n            {\n                { DyeType.WindAzul, new Tuple<int, int>(0x384, 1060585) }, // Wind Azul\n              ", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(),\n                        c -> {\n                            if (c.isSuccess()) {\n                                refresh();\n                            } else {\n                                this.alertDialog.", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n        for filename in os.listdir(self.dbm_dir):\n            if filename.endswith(ext):\n                list.append(os.path.join(self.dbm_dir, filename))\n        return list\n\n    def do_open(self,", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return (filename != null) ? filename : location.toExternalForm();\n    }\n    /**\n     * Returns the locale-specific string representation of this image.\n     *\n     * @param locale the locale for which to return the string\n     * @return the locale-specific string representation", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=True)\n\n# induce code here\n\n# execute module\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.connection import Connection", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n        throw new IOException(\"Stream not marked\");\n        }\n        fileDecoder = clone(savedDecoder);\n    }\n    /**\n     * Skips the specified number of bytes.\n     *\n     * @param n the number of bytes to skip.\n     * @return     the number", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        if not publication.exists:\n            changed = publication.create(tables, params, owner)\n        else:\n            changed = publication.update(tables, params, owner)\n    elif state == 'absent':\n        if publication.exists:\n", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "int version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\n        Note that this function requires the pre-sigmoid activation as\n        input.  To understand why this is so you need to understand a\n       ", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        super(edge.getLayer());\n\n        // TODO: I18N\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n        setEditable(false);\n        setLineColor(Color.black);\n       ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    throw new TargetException(\"Error initializing performance counter: \" + ex.Message, ex);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "===================\n    for i, (name, checksum) in enumerate(checksums.queue):\n        full_name = pjoin( cfg.webdav_backend_directory, name )\n        assert os.path.isfile( full_name )\n        with open(full", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    self.stack_count = args[0]", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append((ofs, ofs + len, 0))\n\t\t\t\tlen = 0\n\t\t\t\tofs += len\n\t\t\t\tcontinue\n\t\t\tnew_data = self.data.read(cur.offset + prog_ofs", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tbuilder.append(value.substring(0, startIndex));\n\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"}\", startIndex));\n\t\t\tString macroValue = macroHandler.", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(new ASN1Boolean(false));\n    }\n    if (attributes != null && ! attributes.isEmpty())\n    {\n      elements", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.getInstance();\n\t\t}\n\t}\n}\n\nI have added the missing line of code in the getPreviouslyConnectedDevices() method. The missing line is:\n\nreturn EmptyIterator.getInstance();\n\nThis line returns an empty iterator when", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n        // TODO: check that width is a positive integer\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       i20 = i18 + 1;\n      }\n    }\n  }\n}", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // TODO: Add support for \"denyAfter\" constraint\n                // Add constraint to the map\n                constraintsMap.put(constraintEntry, new HashSet<>());\n            }\n        }\n        public boolean permits(Key key) {\n            if (key == null)", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     // Get the unit number from the proxy cell's user object.\n      ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      int unitNum = proxyInfo.getUnitNum();\n\n      // Get the device cell's unit port with the given unit number", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef write_to_disk(self, path):\n    \"\"\"Writes the collection to disk.\n    Args:\n        path: The path to write the collection to.\n    Returns:\n        None\n    \"\"\"\n    for artist in self.collection:\n        artist_sub", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetOrderStatus(order, OrderStatus.Processing, false);\n\t\t\t}\n\t\t}\n\t\t/// <", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n    return self._conf_helper('current_ch', options)\n\nThis line of code is used to define the configuration of the device. In this case, it is setting the current channel as the only configuration option. The `_conf_helper` function is a method inherited from the `BaseIn", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Run the sketch.\n   * <P>\n   * This is the final step in the build process.\n   *", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).edges(\"+Z\").fillet(0.2)\n        \"\"\"\n        solidRef = self.findSolid()\n        if len(self.objects) < 1:\n            raise ValueError(\"At least one edge must be selected\")", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    # Writing final memory update 6/7 (function unknown)\n    j = 0\n    dmpUpdate = []\n    while ((j < 4) or (j < dmpUpdate[2] + 3)):\n        dmpUpdate.append(self.dmpUp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf_file = get_pdf(item, \"Item\", \"pdf\")\n\t\t\t\tpdfkit.from", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.MixedSet)\n                    list.Add(1073493); // Part of a Weapon/Armor Set (~1_val~ pieces)\n                else\n                    list.Add(1072378); // Part", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append((char) (d - 10 + 'a'));\n      }\n      d = (c >> 8) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.Login)\n\t\t\t{\n\t\t\t\t// This is the login packet.\n\t\t\t\t// We need to check if the player is allowed to connect.\n\t\t\t\t// If they are, we need to send them the", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue.pop(0),\n            fields={'display_name': category_queue[0]}\n        )\n        if category_queue:\n            self.create_subtree_for_deletion(node.location, category_queue", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + (-i));\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i < 0", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(newBundlePushedAssets, list(htmlPageAsset.getIdentifier()));\n    }\n    /**\n     * Method to Test: {@link DependencyBund", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String myFolderNodeId = getMyNodeId();\n        String fileName = \"file-\" + RUNID + \".txt\";\n        Document doc = createTextFile(myFolderNodeId, fileName, content);\n        String docId = doc.getId();\n        // Create shared link with", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj instanceof Number;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    //-----------------------------------------------------------------------\n    //----------------", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple,", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n        if replace:\n            self.unlink(cr, uid, [res.id], context=context)\n\nThis line of code is used to delete any existing record in the ir_values table that matches the given criteria (model, key, name, res_id, key2). This", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode(IsolateThread thread) {", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tEdischargeAlertsEtc = new ImageHelper(102179, \"images/EdischargeAlerts", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n\n        int encodedIndex = 0;\n        int sourceIndex = off;\n        int numSigBytes = 0;\n\n        while( sourceIndex < off + len ) {\n            numSig", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger temp = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = temp;\n\t\t\t\ttemp = u3;\n\t\t\t\tu3 = v3;\n\t\t\t\tv3 = q[1", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct ();\n\t\t\t\t\t_abi_info.AddField (\"type\", typeof (Gst.MessageType), 4);\n\t\t\t\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_EXTENSION,\n                            \".xmi\");\n                } else {\n                    Configuration.setString(\n                            Pers", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "\n            field = opts.get_field(unique_check[0])\n            params['field'] = six.text_type(capfirst(field.verbose_name))\n            params['field_name'] = unique_check[0]\n        # A unique_together constraint\n       ", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\n    paramout.write(\"%-3s \\t %.5f\\n\" % (key,value))\n\nThis line writes the parameter name and its value to a file named \"list_param.out\". The file is opened in write mode (\"w\") and the parameters are written in a tab", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n    for line in h.splitlines():\n        heads.append(line.strip())\n\nThis code is used to split the binary data into lines and strip any leading\nand trailing whitespace. It is used to parse the list of heads provided by the\nremote.\n\nThe code can be", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n        cell_attributes = literal_eval(cas_data_str)\n\nThis line of code is used to parse the cell attributes data that was copied\nto the clipboard. The data is a string that was encoded as bytes using the\n`repr` function. The `literal", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[y * (width / 8) + x / 8] |= (byte)(1 <<", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the operatories that are flagged for Web Sched.\n\t\t\tforeach(long opNum in listWebSchedOpNums) {\n\t\t\t\tOperatory operatory=Operatories.GetOperatory(opNum);\n\t\t\t\t//", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       Debug.Assert( pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );\n        //assert( pMem1.enc==SQLITE_UTF8 || pMem1.enc==SQLITE_UTF16LE ||", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "               data.PowerRegenFlatModifier[i] = packet.ReadSingle(\"PowerRegenFlatModifier\", indexes, i);\n                }\n                if (changesMask[135 + i])\n                {\n                    data.PowerRegenInterruptedFl", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       seq = seqs[nidx]\n        seqarr = np.array(list(seq))\n        # enter each SNP\n        for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n            for", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index[] indexes = indexByTagAndClass[tag];\n            if (indexes == null) {\n                indexes = new Index[allClasses.size()];\n                indexByTagAndClass[tag] = indexes;\n            }\n            int i = 0", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"Quote:\";\n            this.quoteLabel.Visible = false;\n            // --------------------------------", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           data['recurrency'] = True\n            data['rrule_type'] = rrule_type[rule._freq - 1]\n            data['interval'] = rule._interval\n            data['count'] = rule._count\n            data['end_type'] = 'count'\n           ", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the current row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n           ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return global::bnet.protocol.exchange_object_provider.ReportRefundRequest.DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::Message", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        AApAnalAttribAccess.LoadViaAApDocumentDetail(MainDs, Row.ApDocumentId,\n                            ((AApDocumentDetailRow)rv.Row).DetailNumber, ReadTransaction);\n                    }\n                }\n                // I also need a full list", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (CanSeeReward)\n\t\t\t\t{\n\t\t\t\t\t// reward the player\n\t\t\t\t\tReward();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void Reward()\n\t\t{\n", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, 0, items.Length, new", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               if (AControlLabel != null)\n                {\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                }\n                ArgumentPanel.Controls.Add(AControl);\n                if (AAutomaticClearButton)\n                {\n                    Button", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Legal values for d_tag (dynamic entry type).\nDT_PPC64_PLTGOT = (DT_LOPROC + 1)\nDT_PPC64_PLTRELSZ = (DT_LOPROC + 2)\nDT_PPC64", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to complete\n\t\t\tif(!mReadDone.WaitOne(1000, false))", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n    if p == 1:\n        sd[node.split_dim] = np.abs(node.split - x[node.split_dim])\n        min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void pawnFirst()\n\t{\n\t\tString acn = \"1. e4\";\n\t\tGame game = game(null, acn", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (Exception e)\n    {\n      return null;\n    }\n  }\n  /**\n   * Draw the given feature into the given Graphics object.\n   * @param g The object to draw into.\n   * @param segment_borders The vector of SegmentB", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t\tGeneral.Map.Map.AddSector(", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = Document.objects.create(\n            parent_topic=parent_doc,\n            locale=document_locale,\n            title=parent_doc.title,\n            slug=parent_doc.slug,\n            category=parent_doc.category,\n            is_localizable", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create new rows and columns\n            lNewWidths = new float[lTotalColumns];\n            newRows = new ArrayList(lTotalRows);\n            for (i", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Common code for making each trait\n\t\t\t\t\t\t\tAction<string, string, string> addTrait = (type, newType, values) =>", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\n    return self.__class__(values, key=self._key)\n\nThis line of code creates a new instance of the SortedKeyList class with the\nupdated list of values and the same key function as the original SortedList.\nThis ensures that the new SortedKeyList will maintain the", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the loaded state of a set of instances.\n        This method is called by the :meth:`.Session.flush` method\n        after all instances have been loaded.  It is responsible for\n        ensuring that all", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221,", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "       return ToJson(result);\n    }\n    private void CleanupFiles(object sender, EventArgs e)\n    {\n        foreach (string file in cleanupFiles)\n        {\n            try\n            {\n                File.Delete(file);\n            }\n            catch (Exception", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[last + BZip2Constants.NUM_OVERSHOOT_BYTES + 2];\n\t\t}\n\t}\n}", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        //                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        //                        int y = args[2] + ScreenTop;\n                        //                        int obj = findBlastObject(x, y);\n                        //                ", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (iFile != null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tdouble\n\tdistance( final P pt1\n\t\t\t, final P pt2\n\t\t\t)\n\t{\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(), System.ParamArrayAttribute(), B()> ByVal value As Object, <C(A1:=false, A2:=true), D()> ByRef __exception As Integer) As", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxQ\",\n                    Slot = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            newHouse.MoveToWorld(m_House.Location, m_House.Map);\n                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n            m_From.SendGump(new HouseSwapG", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(getFirstString(), getNextString(), getNextString(), getLastString());\n\t\tplotID = plot.getID();\n\t}\n\tvoid showPlot() {\n\t\tif (plot==null)\n\t\t\tinterp.error(\"No", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if self.widgetRename:\n                if widgetName.startswith(\"$\"):\n                    widgetName = xbmc.getInfoLabel( widgetName )\n                keyboard = xbmc.Keyboard( widgetName, xbmc.getLocalizedString(528", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes(source, 0, source.length, NO_OPTIONS);\n    }\n\n    /**\n     * Encodes a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   GZIP", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n    if __name__ == '__main__':\n        main()\n\nThis line of code is the entry point for the script. It calls the `main()` function, which is defined later in the script. This function is responsible for parsing command-line arguments, loading the module, and", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i] == null)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + pixelStride > data.length) {\n            throw new RasterFormatException(\"Incorrect scanline stride: \"\n                    + scanlineStride);\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "\n    def get_used_mem(self):\n        \"\"\"\n        Returns the VM's used memory (RSS).\n        :return: Used memory (MB)\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get used memory from dead VM.\")", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   return delta_sync(g.namespace, args['cursor'], args['exclude_types'],\n                      args['include_types'], args['timeout'], args['view'],\n                      args['exclude_folders'], args['exclude_account'],\n                      args['exclude_", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   objects = CourseEnrollmentManager()\n\nThis line of code creates a manager for the CourseEnrollment model.\nThe manager is a class that provides a custom interface for querying the database.\nIn this case, the manager provides methods for querying the database based on the course_id.\n\n", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\n    system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.removeCustomValues(self.session, system_id, keys)\n\nThis code is part of the Spacewalk Shell script, a command", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "\n    'xNotesOn': {\n        'signature': ('ly:music?',),\n        'type': 'ly:music-function?',\n    },\n\nPlease complete the code for the 'xNotesOn' function. This function should take no arguments and return a", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Renders the current instance, encoded in a specified\n\t\t///    ID3v2 version.\n\t\t///", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.IsColliding = false;\n                chr.CollidingObj = false;\n                chr.CollidingGround = false;\n                chr.CollidingPrim = false;\n                chr.CollidingTerrain = false;\n                chr.Colliding", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "       for i in xrange(number_threads):\n            ts[i].start()\n        for i in xrange(number_threads):\n            ts[i].join()\n        # update the status\n        status_updater = StatusUpdater(total_recs, finished_queue", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "   price_subtotal = fields.Function(\n        _compute_price,\n        string='Subtotal',\n        store={\n            'account.invoice': (_get_invoice_lines, ['invoice_line_tax_id', 'discount', 'quantity', 'price", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def _create_cells(self):\n        \"\"\"\n        Create the arrays of cell ids.\n        \"\"\"\n        self.all_cells = numpy.arange(self.size)\n        self._mask_local = numpy.ones(self.size, dtype=numpy", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand)", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.Sk", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    @Override\n    public void deleteNode(Long nodeId)\n    {\n        Node node = getNodeNotNull(nodeId, false);\n        deleteNodeImpl(nodeId", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (performLayout) {\n        // If we're being asked to perform a full layout, we need to set the\n        // dimensions of the node and the positions of the children.\n        node.layout.measuredDimensions[DIMENSION_WIDTH] = mainDim;", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis y2Axis", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\");\n            return ret;\n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param name", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof PlainView) {\n                    PlainView pv = (PlainView) c;\n                    pv.setBidi(getBidi());\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n        /**", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tcomments_seen = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (c == '/') {\n\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "\n    for dep in self.__deps:\n        dep.recipe.prepare(depEnv, sandboxEnabled, states, depSandbox, depTools, stack + [self.__packageName])\n\nThis code is responsible for traversing the dependency tree of the recipe.\nThe dependencies are", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"ResizeWidth\", ResizingPanel.GetResizeWidth(pane).ToString());\n            xmlWriter.WriteAttributeString(\"ResizeHeight\", ResizingPanel.GetResizeHeight(pane).ToString());\n            xmlWriter.WriteAttributeString(\"EffectiveSize\", new Size", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><span class=\"warning\">The external collections do not match.</span>\n                        <br />", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "=====================\ndef _number(text):\n    \"\"\"Converts a string to a number.\"\"\"\n    if text.isdigit():\n        return int(text)\n    else:\n        return float(text)\ndef _url_safe(text):\n    \"\"\"Converts a string", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "\n                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (\n                                     field[0], field[1], desc))\n                except:\n                    pass\n", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "   # Update the permanences of the connected synapses\n    masterValidConnected[masterValidPermanence > 0] += rfPermChanges\n    # Update the permanences of the potential synapses\n    masterPotential[coincSlice][masterValidPermanence > ", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\n    self.node_secondary_ip = self.remote_node_info.GetIP(\n        self.cfg.GetClusterInfo().secondary_ip_policy)\n\nThis line of code retrieves the IP address of the remote node for the\nsecondary IP policy specified in the cluster configuration.", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if isBoolean(vmap, 'optType'):\n        complt += '\\t\\t\\t\\t\\t\"-' + vmap['optLong'] + '\" && ret=0\\n'\n    elif hasDescription(vmap):\n        complt += '\\t\\t", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "               if (m_ControlOrder == OrderType.Release)\n                {\n                    if (m_ControlMaster != null)\n                    {\n                        m_ControlMaster.SendLocalizedMessage(1073556); // You release your pet.\n                   ", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (getParent() != null) {\n            Container parent = getParent();\n            if (!parent.isVisible()) {\n                contains = false;\n            }\n            if (parent.getAbsoluteX() + parent.getScrollX() + parent.getWidth() <= x)", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (bmp_mono[n1] != bmp_mono[n1 + 1])\n                            {\n                                side1++;\n                                hits1++;\n                            }\n                        }\n                        if (y + r < image_height", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = 1.0 / 3.0 * (Math.sqrt(3.0) - 2.0);\n\t\t\t z[1] = 1.0 / 3.0 * (", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tString[] fieldsInTable = getFieldsInTable(tableName);\n\n\t\t// Get the fields that are in the row:\n\t\tString[] fieldsInRow = new String[fields.size()];\n\t\tfor (int i=0;i<fields.size();i", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"IMPROVED TRACKING\"};\n\t\t\tbonusFeats[4] = new String[] {\"FAR SHOT\"};\n\t\t\tbonusFeats[6] = new String[] {\"IMPROVED", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "       self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.SetToolTipString(\"\")\n        self.StopPreviewTimer()\n        \"\"\"\n        \n        self.SetHoverItem(None)\n        self.SetPressedItem(", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverbWetLevel   (float reverbwetlevel)\n        {\n            return FMOD_EventCategory_SetReverbWetLevel(eventcategoryraw, re", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can you please", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    \n/* ********  F I L E   I", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "               if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            if self.layoutNode == None:\n                log.log(0,\"error\",_(\"Unable to find layout node", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                if(numBits == 1)\n                    return new BigInteger(1);\n                else\n                    throw (new ArithmeticException(\"Cannot compute square root of odd number of bits.\"));\n            }\n            int numBytes = (int)(numBits >>", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       if cdata:\n            # We have a constant index, so we can remove the subtensor\n            return cdata\n    elif isinstance(node.op, AdvancedSubtensor1):\n        idx_list = node.op.idx_list\n        if len(idx_list) == ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```\n    cls.add_method('Get',\n                   'bool',\n                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')],\n                   is_const=True, is_virtual=True, is", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Node.JspBody jspBody = (Node.JspBody)body.getNode(0);\n                    if (jspBody != null) {\n                        Node.Nodes subElements = jspBody.getBody();\n                        if (subElements != null) {\n                ", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (e.IsHandled)\n\t\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYS", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "       if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n        # load\n        mantidsimple.LoadNexus(Filename=md_", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "\n    if package == '__main__':\n        package = None\n\nThis line of code is checking if the package name is equal to '__main__'. If it is, then it sets the package variable to None. This is done because '__main__' is a special name used to represent", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateImplicitConversionError(diagnostics, syntax, conversion, expression, targetType);\n\n                // This is a method group, so we need to resolve it to a method.\n                // If the method is not found, we'll report an error.\n                //", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "           search_reg_str = search_terms.replace(' ', r'\\b\\w+\\b')\n            #search_reg_str = search_terms.replace(' ', r'\\b\\w+\\b')\n        try:\n            search_regx = re.compile(search", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "               if not self.__GetNextToken():\n                    raise Warning(\"expected FV name At Line \", self.FileName, self.CurrentLineNumber)\n                FvImageSectionObj.FvName = self.__Token\n\n            Obj.SectionList.append(FvImage", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "   headers_phase = self.GetBuildPhaseByType(PBXShellScriptBuildPhase)\n    if headers_phase is None:\n      raise ValueError, 'No headers phase found for target ' + \\\n                        self._properties['name']\n    return headers_phase\n  def Sources", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "   node_locations = remote_instance.fetch(url, post={'node_ids': ','.join(map(str, x))})\n\n    # Now generate DataFrame\n    df = pd.DataFrame(node_locations, columns=['node_id', 'x',", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (decimalPos >= 0) {\n                                throw new IllegalArgumentException(\"Decimal separator and exponent separator in pattern \\\"\" +\n                                    pattern + '\"');\n                            }\n                            useExponentialNotation = true;\n                            if (minExponent", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\n        EndBatchUndo(self) -> bool\n        Ends the batch undo operation.\n        \"\"\"\n        return _richtext.RichTextCtrl_EndBatchUndo(*args, **kwargs)\n\nBut", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " exec /usr/sbin/lighttpd -f /etc/lighttpd/lighttpd.conf\n  \"\"\" )\n        fd.close()\n        os.chmod( runFile, self.gDefaultPerms )\n      except Exception:\n        error = 'Failed to", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "   if state == 'suspended':\n        ret = vms_module.create(\n            entity=vm,\n            result_state=otypes.VmStatus.SUSPENDED if vm is None else None,\n            clone=module.params['clone'],\n            clone_", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (subChans.size() > 0) {\n            m = ModeFactory.getMode(\"Channel_queries\", \"subscribed_systems_in_set\");\n        }\n        else {\n            m = ModeFactory.getMode(\"Channel_queries\", \"un", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltin) {\n                        //", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  given  seed.\n         ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\n        group.add_option(\"--exclude\", dest=\"exclude\", action=\"append\",\n                help=_(\"exclude packages matching the given pattern\"),\n                metavar=\"PATTERN\")\n\nThis line of code is adding an option to the OptionGroup named \"Yum", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (Iterator i = values.keySet().iterator(); i.hasNext();) {\n                String name = (String) i.next();\n                Object value = values.get(name);\n                DataElement d = (DataElement) data.get(name);\n              ", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        existingDoc.SourceHash = existingDoc.SourceHash.Combine(guid);\n                        continue;\n                    }\n                }\n                // pragma does not match a file path on an actual tree.\n                // Dev12 compiler gives a warning in this case.", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    while True:\n                        if self.tok[0] == ')':\n                            self.NextToken()\n                            break\n                        if self.tok[0] == ',':\n                            self.NextToken()\n                            continue\n                        if self.tok[0", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "       option_value = json_d.get('option', None)\n        if not isinstance(option_value, basestring):\n            option_value = None\n\n    def check_hint_condition(self, hxml_set, student_answers):\n        \"\"\"\n       ", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.explain == 2 )\n        {\n         ", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n            pid = json_data['pid']\n       ", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               disk_type = expected_disk_spec.get('type', 'thin').lower()\n                valid_disk_type = ['thin', 'eagerzeroedthick']\n                if disk_type not in valid_disk_type:\n                    self.module", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\n\t\t\t// This is a hack to avoid having to define a new method for each operator\n\t\t\t//\n\t\t\t//return \"op_\" + names [(int) ot].Replace (\" \", \"_\");\n", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.Children = null;\n            }\n            /// <summary>\n            /// Collapse this branch\n            /// </summary>\n            public virtual void Collapse() {\n                this.IsExpanded = false;\n                foreach (Branch b in this.ChildBranches)", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       if not journal_id:\n            raise osv.except_osv(_('Error!'),  _('Can not create Journal Entry, Journal defined on this product is missing.'))\n        return {'account_id': acc_src, 'account_valuation_id': acc_valuation", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the adjusted\n        dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busday_count : Counts how many", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "               return coord._intersect_derive_subset(points, bounds,\n                                                      inside_indices,\n                                                      non_zero_step_indices)\n            else:\n                return None\n        elif isinstance(coord, iris.coords.AuxCoord):", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n\tif (region != null) {\n\t\tOS.InvalidateRect (handle, null, true);\n\t}\n}\n/**\n * Sets the receiver's size to the size specified by the arguments.\n * The <code>width</code>", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if paper in autoclaim_ticket:\n                        autoclaim_ticket.remove(paper)\n                autoclaim_data = {'ticket': autoclaim_ticket,\n                                   'papers_to_autoclaim", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "   track.views.server_track(request, \"change-email1-settings\", {\"receive_emails\": receive_emails, \"course\": course_key.to_deprecated_string()}, page='dashboard')\n\nThis line of code is used to track an event in the analytics", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "   if len(arrayObjectMemberTypes) > 0:\n        # We need to handle the case where the array is empty.\n        # We can't just use the normal conversion code, because that\n        # would return a null value, and we need to return an empty array.\n       ", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "   def postParse( self, instring, loc, tokenlist ):\n        for i,tok in enumerate(tokenlist):\n            if len(tok) == 0:\n                continue\n            ikey = tok[0]\n            if isinstance(ikey,int):\n              ", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "   if matched_zero and (\n        not Match(r'^\\s*PureVirtual\\s*\\(\\w+\\)\\s*=\\s*0;', line) or\n        not Match(r'^\\s*const\\s*Function\\s*\\(\\w+\\)\\s*const\\", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": " if before:\n    self.hashes[filename] = (before, after)\n  else:\n    self.hashes[filename] = (None, after)\n  svndiff.append(line)\n  if line.startswith(\"@@\"):\n    svndiff", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = field_get_subfield_values(fft, 'a')[0]\n            # Let's discover the format\n            format = _get_subfield_value(fft, 'f')\n            # Let's discover the name\n            name = _get_", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       int[] allowedIfds = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << i)) != 0) {\n                allowedIfds[counter++] = i;", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n           ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "       public static readonly string[][] B_3 = new string[][]\n        {\n            new string[] { \"\\x00C0\\x00E0\", /* 00C0; 00E0; Case map */ },\n            new string[] { \"\\x00", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, op, x, y, null);\n    }\n    public void drawImage(BufferedImage bImg,\n                          BufferedImageOp op,\n                          int x,\n                          int y,\n                          ImageObserver observer) {\n        if (", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     return JavaModelManager.getJavaModelManager().getPackageFragment(fileName, pkgEnd);\n    }\n  }\n  public static IPackageFragmentRoot getPackageFragmentRoot(char[] fileName, int pkgEnd, int jarSeparator) {\n    if (jarSeparator != -1)", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\n    if lhs in names:\n        if adding:\n            if properties:\n                rhs = rhs.replace(\"$[\", properties.get(\"\", \"\"))\n                rhs = rhs.replace(\"]$\", \"\")\n            raw[lhs] = rhs\n        else:\n           ", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           if end_line == t[2][0]:\n                # This is a continuation line.\n                logical[-1] += text\n                previous = None\n            else:\n                # This is a new line.\n                logical.append((end_line, end", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, filename):\n        \"\"\" Parse a polynomial from a file and return it as a Polynomials\n        object.\n        \"\"\"\n        try:\n            poly = Polynomials(open(filename, \"r\").readlines())\n        except (OSErr", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length == 3)\n\t\t\t\t{\n\t\t\t\t\tstring inputFilePattern = mediaEncoderItems[0].Trim();\n\t\t\t\t\tstring outputFilePattern = mediaEncoderItems[1].Trim();\n\t\t", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                #print '%s - %s' % (self.splitKeyHash[k].br.len, tree2.splitKeyHash[k].br.len)\n                theSum +=", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "       result = aggregator.aggregate(rolling_window_data, axis=dimension,\n                                      **kwargs)\n\n        # TODO: add support for lazy evaluation\n        # TODO: add support for weighted aggregation\n        # TODO: add support for circular coordinates\n        #", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "\ndef _query_events_hold(query):\n    \"\"\"Hold onto listeners against a query.\"\"\"\n    pass\n\nThis code defines a function `_query_events_hold` which takes a query object as an argument and does nothing. This function is not used anywhere in the code, and it", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               setMargins(\n                        a.getDimensionPixelOffset(LEFT_MARGIN, UNDEFINED),\n                        a.getDimensionPixelOffset(TOP_MARGIN, UNDEFINED),\n                        a.getDimensionPixelOffset(RIGHT_MARGIN", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * Returns the connection type\n     *\n     * @return int\n     */\n    int getConnectionType()\n    {\n        return connectionType;\n    }\n    /**\n     * Returns the subject associated with the logged-on", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(leftType,\n                                                             OperatorFacts.BinaryOperatorNameFromOperatorKind(op),\n                                                             returnType,\n                                                             isChecked);\n            }\n        }\n        private static void Get", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "       self.invoke('atEvaluate', expression=expression, locals=locals)\n        try:\n            result = eval(expression, locals, self.globals)\n        except SyntaxError, e:\n            self.fail(e)\n        except:\n            self.fail(", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int[][] cliqueFeatures = new int[windowSize][];\n        for (int k = 0; k < windowSize; k++) {\n          cliqueFeatures[k] = new int[document", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "   internal struct LeafNestedType\n    {\n        // internal ushort leaf;      // LF_NESTTYPE [TYPTYPE]\n        /// <summary>\n        /// </summary>\n        internal uint index; // (type index) index to type record of nested type\n", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))\n                contextProfile = _CONTEXT_ES_PROFILE_BIT;\n            // MAJOR & MINOR only introduced in GL {,ES} 3.0\n            GL.GetInteger(GetP", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
