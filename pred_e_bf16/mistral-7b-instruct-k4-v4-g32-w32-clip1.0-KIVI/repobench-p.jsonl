{"pred": "```\n\t\t\tb1.clear();\n```\n\nThis line of code clears the position and limit of the ByteBuffer `b1`, so that it can be reused to store new data. The `clear()` method sets the position to 0 and the limit to the capacity", "answers": ["\t\t\t\tBufferTools.returnBuffer(b1);\r"], "all_classes": null, "length": 2646}
{"pred": "\t\tself._combo_box = QComboBox()\n\t\tself._combo_box.setEditable(True)\n\t\tself._combo_box.currentIndexChanged.connect(self.on_combo_box_changed)\n\t\tlayout.addWidget(", "answers": ["\t\tself._caption_label.setMinimumWidth(100*gui_scale())"], "all_classes": null, "length": 2012}
{"pred": "\n    if frame.encoding:\n        flags |= frame.encoding\n\n    if frame.unsynch:\n        flags |= 0x80\n\n    if frame.group:\n        flags |= 0x20\n\n    if frame.group_id:\n        flags |=", "answers": ["    if isinstance(frame, TextFrame):"], "all_classes": null, "length": 1608}
{"pred": "self.html_window = wx.html.HtmlWindow(self, style=wx.SUNKEN_BORDER)\n\nThis line creates a wx.html.HtmlWindow widget, which is a control that displays HTML content. The widget is added to the sizer of the FraisGardePanel", "answers": ["        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3291}
{"pred": "   public static AthenaGM plugin;\n\n\n    @Override\n    public void onEnable() {\n\n        plugin = this;\n        plugin.saveDefaultConfig();\n        plugin.getServer().getPluginManager().registerEvents(new Tracker(this), this);\n        plugin.", "answers": ["    private ArenaHandler arenaHandler;"], "all_classes": null, "length": 3929}
{"pred": "               BeitragSammelLastschrift sammelLastschrift = new BeitragSammelLastschrift();\n                sammelLastschrift.setFaelligkeit(inputFaelligkeit.getDate());\n                sammelLastschrift.setBezeichnung", "answers": ["                BeitragSammelLastschrift sammelLastschrift;"], "all_classes": null, "length": 2526}
{"pred": "   private final Node bootstrapNode;\n    private final KadConfiguration config;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n", "answers": ["    private final Node bootstrapNode;"], "all_classes": null, "length": 3536}
{"pred": "   private final ServiceLoader<PathParserFactory> pathParserFactoriesLoader = new DefaultServiceLoader<>();\n\n    public OpenAPIProcessor() {\n        super(SourceVersion.RELEASE_8);\n        registerParserFactory(SpringParserFactory.class);\n    }\n\n    private void registerParser", "answers": ["    private final ServiceLoader serviceLoader = new DefaultServiceLoader();"], "all_classes": null, "length": 925}
{"pred": "\n    self._Fault('Timed out waiting for response')\n\nYou can handle the timeout by adding the following code:\n\n    self._processing = None\n    self._Fault('Timed out waiting for response')\n\nHere is the complete code:\n\nscales/socket_", "answers": ["        err = TimeoutError()"], "all_classes": null, "length": 2130}
{"pred": "```\n            meteor_obj.jdt_ref = datetime2JD(datetime.datetime.utcfromtimestamp(frame_n))\n```\n\nThis line sets the reference Julian date of the meteor observation to the Julian date of the first frame of the meteor", "answers": ["            jd = datetime2JD(filenameToDatetime(ff_name) + datetime.timedelta(seconds=float(frame_n)/fps))"], "all_classes": null, "length": 2640}
{"pred": "```\n            r[group] = self._store.features(group=group)\n```\n\nThis line of code is trying to get the features for each group in the probe. It is using the `features()` method of the `SpikeDetektStore` class to get the", "answers": ["            spikes = _concatenate(samples[group])"], "all_classes": null, "length": 2166}
{"pred": "```\n\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)\n```\n\nYou can modify the function", "answers": ["\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)"], "all_classes": null, "length": 2032}
{"pred": "       self.motion_interval = motion_interval\n        self.last_refresh = time.time()\n        self.refresh_rate = refresh_rate\n        self.no_owls = no_owls\n        self.auth = Auth()\n        self.auth.startup()", "answers": ["        self.auth = Auth()"], "all_classes": null, "length": 2174}
{"pred": "\n    def __getattr__(self, name):\n        if name in self.defs:\n            return self.defs[name]\n        elif name in self.vars[-1]:\n            return self.vars[-1][name]\n        else:\n            raise AttributeError(name", "answers": ["        self._root = TypeVar[None]"], "all_classes": null, "length": 1186}
{"pred": "\n    privateKey = (RSAPrivateKey) KeyFactory.getInstance(\"RSA\").generatePrivate(\n        new PKCS8EncodedKeySpec(Base64.decodeBase64(PRIVATE_KEY.getBytes())));\n\n    locators = new VerifierProviders();\n", "answers": ["    final Verifier hmacVerifier = new HmacSHA256Verifier(SYMMETRIC_KEY);"], "all_classes": null, "length": 1353}
{"pred": " private final transient LruCache<String, ProgressMonitorListener> listeners =\n      new LruCache<>(DEFAULT_CACHE_SIZE);\n  private final transient SingleLevelMap<ProgressUpdateType, Slf4JProgress.Level> levels =\n      new SingleLevelMap<>(Slf4", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 2514}
{"pred": "\n    class InvalidLSI(BaseModel):\n        class Meta:\n            abstract = True\n        id = Column(UUID, hash_key=True)\n        index = LocalSecondaryIndex(\n            hash_key=\"id\",\n            range_key=\"id\",\n            read_units", "answers": ["            index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")"], "all_classes": null, "length": 2269}
{"pred": "```\n            alignment_info = run_mp(\n                compile_information_func,\n                jobs,\n                self.log_directory,\n                return_info=True,\n            )\n```\n\nThis line of code runs the `compile_information_func", "answers": ["                compile_information_func, jobs, self.working_log_directory, True"], "all_classes": null, "length": 3046}
{"pred": "\n    def process_bitmap_definition(self, state, bit_operator, descriptor):\n        \"\"\"\n        Process a bitmap definition descriptor.\n\n        :param state: The state of the processing.\n        :param bit_operator: The bit operator for read/write bits.\n        :param", "answers": ["            elif member_type is FixedReplicationDescriptor:"], "all_classes": null, "length": 1868}
{"pred": "   public TypesApi getTypesApi() {\n        return typesApi;\n    }\n\n    @Override\n    public DataStore getLocalDataStore() {\n        return localDataStore;\n    }\n\n    @Override\n    public KryptnosticClient newClient() throws ClassNotFoundException", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 2334}
{"pred": "\n@method('node()', label='sequence type')\ndef select_node_sequence_type(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for item in context.iter_children_or_self():\n        if item", "answers": ["    XPathFunction.nud(self)"], "all_classes": null, "length": 3894}
{"pred": "```python\nelif _type['type'] == LINK:\n    record_clusterID = self._decode_field( _type['struct'][0] )\n    record_position = self._decode_field( _type['struct'][1] )\n    return OrientRecordLink( record", "answers": ["        elif _type['type'] == LINK:"], "all_classes": null, "length": 1740}
{"pred": "account = account_for_tumblr_userinfo(userinfo, person=person)\n\nThis line of code calls the function `account_for_tumblr_userinfo` with the user information obtained from Tumblr and the current person (if any). The function `", "answers": ["    account = account_for_tumblr_userinfo(userinfo, person=person)"], "all_classes": null, "length": 1774}
{"pred": "       ips.append(IPAddress(jsoned, self))\n        return ips\n\n    def get_ip(self, ip_id):\n        data = self.call_api(\"ips/%s\" % ip_id, type=\"GET\")\n        return IPAddress(data, self", "answers": ["            ip = IPAddress(jsoned, self)"], "all_classes": null, "length": 2464}
{"pred": "       registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new MarshalledResponseHandler<String[]>(STRING_ARRAY));\n        registry.put((byte) (GET_MBEAN_COUNT ^ RESPONSE_MASK), new MarshalledResponseHandler<", "answers": ["        registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new StringArrayResponseHandler());"], "all_classes": null, "length": 824}
{"pred": "       registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);\n    }\n\n    public void registerCallAction(CallAction action, int id)\n    {\n        actions.put(id, action);\n    }\n\n   ", "answers": ["        registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);"], "all_classes": null, "length": 1561}
{"pred": "       mEdSearch.addTextChangedListener(this);\n        mEdSearch.setOnEditorActionListener(this);\n        mIvEditClear.setOnClickListener(this);\n        mIvSearch.setOnClickListener(this);\n        mSwipeRefreshLayoutSearch.setOn", "answers": ["        StatusBarUtil.immersive(this);"], "all_classes": null, "length": 2979}
{"pred": "           varray[i] = f.apply(MatlabStruct.create().set(rarray[i], MatlabScalar.create(i)));\n        }\n        return varray;\n    }\n\n    protected String buildFEval(String function, String[] varray,\n                                ", "answers": ["            String safe = f.apply(new MatlabString(rarray[i]));"], "all_classes": null, "length": 2714}
{"pred": "   private int[] imgDimensions = new int[2];\n\n    public PostView(Context context) {\n        super(context);\n        ButterKnife.inject(this);\n    }\n\n    public PostView(Context context, AttributeSet attrs) {\n        super(context", "answers": ["    public Prefs prefs;"], "all_classes": null, "length": 3533}
{"pred": "               install_and_run(toolsdir, app_path, package, launcher, True)\n\n                # Get Screen Resolution\n                res = get_res()\n                if res:\n                    data['res'] = res\n                else:\n                    data", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 1743}
{"pred": "\tprivate TestResourceProvider testResourceProvider;\n\tprivate TestConceptService testConceptService;\n\tprivate TestDescriptionService testDescriptionService;\n\tprivate TestRelationshipService testRelationshipService;\n\n\t@Before\n\tpublic void setup() throws RuleExecutorException {\n\t\t// Create", "answers": ["\tprivate TestConceptService conceptService;"], "all_classes": null, "length": 3889}
{"pred": "====================\n\nadmin.site.register(Membre, MembreAdmin)\n\nThis line of code registers the Membre model with the MembreAdmin class,\nwhich is defined in the Administration/actions.py file.\nThis class is used to define the behavior of the Membre model in the", "answers": ["@admin.register(Switchlink)"], "all_classes": null, "length": 2184}
{"pred": "\t\t\tTickHandler.EVENT_BUS.post(e);\n\t\t\tif (e.getResult().floatValue() > 0.0f) {\n\t\t\t\tyd = e.getResult().floatValue();\n\t\t\t}\n\t\t}\n\t\tif", "answers": ["\t\t\tTickHandler.EVENT_BUS.postEvent(e);"], "all_classes": null, "length": 3452}
{"pred": "\tprivate NetworkManager networkManager = null;\n\tprivate DataParser dataParser = null;\n\tprivate Cache cache = null;\n\tprivate LogManager logManager = null;\n\n\t/**\n\t * Builds a new APIWrapper instance using the given endpoint URL,\n\t * jurisdiction ID and", "answers": ["\tprivate NetworkManager networkManager = new HTTPNetworkManager(Format.XML);"], "all_classes": null, "length": 3104}
{"pred": "       registry.put(IS_REGISTERED, new IsRegisteredHandler());\n        registry.put(NOTIFICATION, new NotificationHandler());\n        registry.put(NOTIFICATION_FILTER, new NotificationFilterHandler());\n        registry.put(OBJECT, new ObjectHandler());\n       ", "answers": ["        registry.put(IS_REGISTERED, new IsRegisteredHandler());"], "all_classes": null, "length": 931}
{"pred": "```\ncompute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)\n```\n\nThis line of code computes and updates the conflicts for the assembly points in the `merged_assembly_points", "answers": ["    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)"], "all_classes": null, "length": 1723}
{"pred": "\t\t\t\t\tp.setAllowFlight(true);\n\t\t\t\t\tp.setFlying(true);\n\t\t\t\t\tp.setFoodLevel(20);\n\t\t\t\t\tp.setHealth(20);\n\t\t\t\t\t", "answers": ["\t\t\t\t\tp.sendMessage(ChatColor.DARK_PURPLE + Main.locale.getMessage(\"info.personal.spectating\")); // tell them"], "all_classes": null, "length": 3710}
{"pred": "\n```\nclass SequentialPortfolioConsumerType(PortfolioConsumerType):\n```\n\nThis line defines a new class called `SequentialPortfolioConsumerType` that is a subclass of `PortfolioConsumerType`. This means that it inherits all the properties and methods of `Portfolio", "answers": ["class PortfolioConsumerFrameType(FrameAgentType, PortfolioConsumerType):"], "all_classes": null, "length": 3454}
{"pred": "   if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_AVD\":\n        # Get AVD Path\n        avd_path = os.path.join(settings.BASE_DIR, 'DynamicAnalyzer/avds/')\n       ", "answers": ["                    refresh_avd(adb, settings.AVD_PATH, settings.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1547}
{"pred": "```\n    elif args.subcommand == \"history\":\n        print_history(args)\n```\n\nThis code checks if the subcommand is \"history\" and if it is, it calls the `print_history` function with the `args` argument. The `print_history`", "answers": ["            update_global_config(args)"], "all_classes": null, "length": 1540}
{"pred": "       CreditCard newCard = new CreditCard(alias, bankName, number, currency, type, cardExpirationCal, closing, due, selectedCreditCardBackground, null);\n\n        newCard.setCreditLimit(firstCreditPeriodLimit);\n\n        ExpenseManagerDAO da", "answers": ["        ExpenseManagerDAO dao = new ExpenseManagerDAO(this);"], "all_classes": null, "length": 3790}
{"pred": "\n    private AdRetriever adRetriever;\n\n    /**\n     * information to use when retrieve cue point from server\n     */\n    private CuePointsRetriever cuePointsRetriever;\n\n    /**\n     * the current state of the state machine\n    ", "answers": ["    private AdRetriever adRetriever;"], "all_classes": null, "length": 2715}
{"pred": "\n    def test_bv2pysmt_ite(self):\n        bv2pysmt = functools.partial(_bv2pysmt, env=self.env)\n        fm = self.env.formula_manager\n        tm = self.env", "answers": ["        self.assertEqual(bv2pysmt(ZeroExtend(bx, 2)), zext(px, 2))"], "all_classes": null, "length": 2534}
{"pred": "\t\tlinkers.add(new NodeToNode());\n\t\tlinkers.add(new GeometryToNode());\n\t\tlinkers.add(new SkeletonToSpatial());\n\t\tlinkers.add(new AnimationToSpatial());\n\t\tlinkers", "answers": ["\t\tlinkers.add(new AnimationToSpatial());"], "all_classes": null, "length": 1043}
{"pred": "\n    connect(DYNAMIC_TOOL_DIR)\n\nThis line of code is calling the `connect` function from the `android_dyn_shared.py` module in the `DynamicAnalyzer` package. The `connect` function is responsible for connecting to the Android device or emulator", "answers": ["    Proxy('', '', '', '')"], "all_classes": null, "length": 1562}
{"pred": "\nclass TestObject(unittest.TestCase):\n\n    def setUp(self):\n        self.sampleable = Sampleable()\n        self.sampleable.name = \"bar\"\n\n    def test_sampleable_get_sample(self):\n        self.assertEqual(\"my_", "answers": ["        self.assertIsInstance(Object.factory(\"none\", \"v1\"), ObjectNone)"], "all_classes": null, "length": 1381}
{"pred": "\n    public Observable<ApiStatus> apiStatus() {\n        return apiService.apiStatus(apiKey);\n    }\n\n    /**\n     * Returns a list of all available protocols.\n     */\n    public Observable<List<Protocol>> protocols() {\n        return apiService", "answers": ["    public Observable<ApiStatus> info() {"], "all_classes": null, "length": 2260}
{"pred": "\n                StoryDetailActivity.launch(getActivity(), mAdapter.getData().get(i).getId(), view.findViewById(R.id.iv_ribao_item_head));\n\n                }\n            }\n        });\n    }\n\n    @Override\n    public", "answers": ["                        RibaoStoryBeanDao.Properties.Id.eq(((RibaoStoryBean) mAdapter.getItem(i)).getId()))) {\r"], "all_classes": null, "length": 1936}
{"pred": "               security_role='ISS',\n                security_identification_details=SecurityIdentificationDetails(\n                    identified_role='MS',\n                    cid=bytes.fromhex('00000000000000000000", "answers": ["                security_role=SecurityRole.ISS,"], "all_classes": null, "length": 1417}
{"pred": "def app_expr(f, f_ty, cast, args):\n    \"\"\"Applies a function to a list of\n    arguments, some of which are implicit.\n    \n    Arguments:\n    - `f`: an expression denoting the function\n    - `f_ty`", "answers": ["    return Box(triv(), expr, ty)"], "all_classes": null, "length": 1771}
{"pred": "       StepCounterCollector.createDBStorage(deviceID);\n    }\n\n\n    public void writeDBStorage(String tableName, String sql)\n    {\n        SQLiteDatabase db = this.getWritableDatabase();\n        db.execSQL(sql);\n    }\n\n", "answers": ["        StepCounterCollector.createDBStorage(deviceID);"], "all_classes": null, "length": 3430}
{"pred": "class URI(Signature):\n    __typeid__ = 1\n    __subtype__ = 1\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __repr__(self):\n        return '<URI: %r>' % self.uri", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   private CaptureTime time;\n    private CaptureFrame frame;\n    private FrameImporter importer;\n    private FrameExporter exporter;\n    private boolean enabled;\n\n    public CaptureSession(MinemaConfig cfg) {\n        super(cfg);\n\n        // register", "answers": ["    private CaptureTime time;"], "all_classes": null, "length": 2248}
{"pred": "\n    assert u2.dimensions == energy / length / length\n\nThis line of code is incorrect because the dimensions of the unit `u2` should be energy / length^2, not energy / length / length. The correct line of code should be:\n\n    assert u2.dimensions", "answers": ["    assert u2.dimensions == rate"], "all_classes": null, "length": 2042}
{"pred": "       write_tc_script(\n            \" \".join(sys.argv), command_history, filename_suffix=\".sh\"\n        )\n\nThis line of code generates a shell script file that describes the tc commands to be executed. The script can be executed without the tcconfig package installation.", "answers": ["            Tc.Command.TCSHOW, command_history, filename_suffix=\"-\".join(options.device)"], "all_classes": null, "length": 1874}
{"pred": "     throw new IOException(Language.get(\"api.init.NoStationTrack\"));\n    }\n    return urlFetcher(mainApi, quality, Provider.STATION, new HashMap<String, String>() {{\n      put(\"wentry_id\", getWentryID());\n    }});", "answers": ["      throw new IOException(Language.get(\"track.InvalidWentryID\"));"], "all_classes": null, "length": 2705}
{"pred": "       return new JsonObjectRequest(url);\n    }\n\n    /**\n     * Create a JSONObject type handle, custom handle method, method from {@link RequestMethod}.\n     *\n     * @param url           such as: {@code http://www.nohttp.net}.\n     *", "answers": ["        return new JsonObjectRequest(url);"], "all_classes": null, "length": 3108}
{"pred": "\t\t\ttypeSpecBuilder.addSuperinterface(className);\n\t\t}\n\n\t\treturn typeSpecBuilder;\n\t}\n\n}\n\npublic class AnalysisTransformation {\n\n\tprivate final Function<CascadingTypeAnalyzer<?, ?, ?>, CascadingTypeAnaly", "answers": ["\t\t\ttypeSpecBuilder.superclass(type(className, T));"], "all_classes": null, "length": 2674}
{"pred": "               path = joinPaths(unixPath(relativePathToPattern), fileBean.getSource());\n                parentPath = joinPaths(unixPath(relativePathToPattern), fileBean.getSource().substring(0, fileBean.getSource().lastIndexOf('/')));\n           ", "answers": ["                path = sepAtStart(normalizePath(joinPaths(relativePathToPattern, patternPathToFile, source.getName())));"], "all_classes": null, "length": 2616}
{"pred": "\t@Autowired\n\tAlertRepository alertRepository;\n\n\tpublic void loadData() throws IOException {\n\t\t//load the data from the CSV files\n\t\tloadCustomers();\n\t\tloadProducts();\n\t\tloadTransactions();\n\t\tloadMarkups();\n\t\t", "answers": ["\tAlertRepository alertRepository;"], "all_classes": null, "length": 1393}
{"pred": "\n    return render_to_response('redsolutioncms/custom.html', {\n        'cms_settings': cms_settings,\n    }, context_instance=RequestContext(request))\n\n    This line of code renders the 'custom.html' template and passes the `", "answers": ["                except AlreadyMadeException:"], "all_classes": null, "length": 1433}
{"pred": "```python\nself._append( ( FIELD_INT, self._tx_id ) )\n```\n\nThis line is appending the transaction id to the message. The transaction id is a unique identifier for the current transaction.\n\nThe `FIELD_INT` is a constant that defines the", "answers": ["        self._append(( FIELD_BYTE, TX_COMMIT_OP ))"], "all_classes": null, "length": 3275}
{"pred": "\tprivate Connector connector;\n\tprivate ConnectorComments connectorComments;\n\tprivate ConnectorWorkLog connectorWorklog;\n\tprivate ImagesCacher imagesCacher;\n\tprivate Issue issue;\n\tprivate List<Comment> comments;\n\tprivate List<WorkLog>", "answers": ["\tIssue task;"], "all_classes": null, "length": 3252}
{"pred": "   placeholderReplacer = new PlaceholderReplacer<>(typeResolverRegistry);\n    commentProcessorRegistry = new CommentProcessorRegistry(placeholderReplacer);\n    commentProcessorRegistry.registerCommentProcessor(DisplayIfProcessor.class);\n    commentProcessorRegistry.registerCommentProcessor(RepeatProcessor.class", "answers": ["    for (Map.Entry<Class<?>, ITypeResolver> entry : config.getTypeResolvers().entrySet()) {"], "all_classes": null, "length": 3197}
{"pred": "\nself._append( ( FIELD_STRING, self._user ) )\n\nThis line of code is appending the user name to the message header. The user name is a string and it is being appended as a field with type STRING and bytes 4. This means that the user name will", "answers": ["        self._append( ( FIELD_STRINGS, [NAME, VERSION] ) )"], "all_classes": null, "length": 1700}
{"pred": "def test_fade_in_fade_out(self):\n    s, Hz = sHz(rate=6)\n    L = fadein(2 * s)\n    L_should = [.1, .2, .3, .4, .5, .6", "answers": ["    L = fadeout(2 * s)"], "all_classes": null, "length": 2605}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node)", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 2828}
{"pred": "\n    return redirect(get_login_redirect(self.request.POST.get(REDIRECT_FIELD_NAME)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            url = get_login_redirect("], "all_classes": null, "length": 1277}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\n\t\tEmployee employee = employeeRepository.findByAccountId(account.getId());\n\nThis line of code is trying to find an employee by the account id. If the account id is not found in the database, it will throw a NullPointerException because the findByAccountId method returns null if", "answers": ["\t\tEmployee employee = null;\r"], "all_classes": null, "length": 3898}
{"pred": "class ByteFlag(FlagList):\n    __flags__ = {CompressionAlgorithm.ZIP: 0x01,\n                 CompressionAlgorithm.ZLIB: 0x02,\n                 CompressionAlgorithm.BZ2: 0x04}\n\n    def __init", "answers": ["    @flags.register(HashAlgorithm)"], "all_classes": null, "length": 1390}
{"pred": "class TestOr(unittest.TestCase):\n    def test_can_not_be_initialized_with_zero_arguments(self):\n        self.assertRaises(TypeError, Or)\n\n    def test_commutativity(self):\n        a = Match(\"a\", \"", "answers": ["        self.assertRaises(TypeError, Or)"], "all_classes": null, "length": 2542}
{"pred": "\tprivate CommunityService communityService;\n\tprivate BoardService boardService;\n\tprivate CommentService commentService;\n\n\t@Autowired\n\tpublic void setCommunityService(CommunityService communityService) {\n\t\tthis.communityService = communityService;\n\t}\n\n\t@Autowired", "answers": ["    CommunityService communityService;"], "all_classes": null, "length": 1818}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Save user's links\n            formset = LinkFormSet(request.POST, request=request)\n            formset.save()\n\n            # Save user's skills\n            formset = Base", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))\n\nThis line of code is testing the function `is_not_ascii` with the English message for the 16 month reminder one day. It checks if the", "answers": ["        self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))"], "all_classes": null, "length": 1549}
{"pred": "\t\tv, f = convert_fs(opts.inputfreesurfer[0])\n\t\tif opts.outputply:\n\t\t\tsave_ply(v, f, opts.outputply)\n\t\telif opts.outputfs:\n\t\t\tsave_fs(v", "answers": ["\t\tv,f = convert_fs(str(opts.inputfreesurfer[0]))"], "all_classes": null, "length": 2047}
{"pred": "\n    def __Get(self):\n        \"\"\"Get the least loaded node from the heap.\"\"\"\n        if not self._open:\n            raise ValueError(\"The sink is not open\")\n        if self._size == 0:\n            raise ValueError(\"The pool is empty\")\n        with self._", "answers": ["      msg.properties[MessageProperties.Endpoint] = n.endpoint"], "all_classes": null, "length": 1863}
{"pred": "\n    @staticmethod\n    def _decode_field(field):\n        \"\"\"\n        :param field: object\n        :return: mixed\n        \"\"\"\n        t, v = field\n        _content = None\n\n        if t['type'] == INT:\n            _content = struct", "answers": ["        elif t['type'] == BOOLEAN:"], "all_classes": null, "length": 1727}
{"pred": "\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO", "answers": ["\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};"], "all_classes": null, "length": 2783}
{"pred": "\n    def test_set_and_get(self):\n        \"\"\"\n        Tests that :meth:`set` and :meth:`get` work as expected.\n        \"\"\"\n        ffi, library = _ffi()\n        loader = Loader()\n\n        loader.set", "answers": ["        mock = patch.object(Loader, \"cache\", None)"], "all_classes": null, "length": 2141}
{"pred": "\n        self.velocity_schema = VelocitiesSchema()\n\n        super(VelocitiesResource, self).__init__(self.velocities,\n                                                 self.velocity_schema)\n\n\nclass OrientationResource(ObjectResource):\n    \"\"\"The Orient", "answers": ["        self.velocities_schema = VelocitiesSchema()"], "all_classes": null, "length": 1623}
{"pred": "               hasJsonPath(\"hits.total\", equalTo(records.size())));\n\n        // check if all fields are present\n        for (SourceRecord record : records) {\n            String query = \"http://localhost:9200/\" + mapping.getIndex() + \"/\"", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       ImageDialog imageDialog = new ImageDialog(this);\n        imageDialog.addBitmap(bitmap);\n        imageDialog.addTitle(getString(R.string.notification));\n        imageDialog.show();\n\n        String phoneNum = Tools.getTelNum(result);\n        if", "answers": ["        ImageDialog dialog = new ImageDialog(this);"], "all_classes": null, "length": 3804}
{"pred": "   private final InputProcessor inputProcessor = new InputMultiplexer(creationInputProcessor, editionInputProcessor, testInputProcessor);\n\n    public RigidBodiesScreen(Canvas canvas) {\n        this.canvas = canvas;\n        drawer = new RigidBodiesScreen", "answers": ["    private final List<Label> labels = new ArrayList<Label>();"], "all_classes": null, "length": 3762}
{"pred": "       .castRepositoryModule(new CastRepositoryModule())\n        .moviesRepositoryModule(new MoviesRepositoryModule())\n        .build();\n    }\n\n    public void inject(PopularMoviesApplication target) {\n        applicationComponent.inject(target);\n    }\n\n   ", "answers": ["                .castRepositoryModule(new CastRepositoryModule())"], "all_classes": null, "length": 785}
{"pred": "           renderable = SVGGroup(self, e, parent)\n\n            if not parent:\n                self._paths.append(renderable)\n\n            for child in e.getchildren():\n                self._parse_element(child, renderable)\n        elif e.tag", "answers": ["            renderable = SVGGroup(self, e, parent)"], "all_classes": null, "length": 1523}
{"pred": "           // FragmentObservable<SearchContactFragment, User> observable = ObservableRegistry.getObservable(SearchContactFragment.class);\n            // observable.notifyFragment(user);\n            // This is not working, because the observable is not of the correct type\n            // I think I", "answers": ["            FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs ="], "all_classes": null, "length": 2784}
{"pred": "def print_app(expr):\n    \"\"\"Takes an application and prints it in the following manner:\n    if the application is of the form (..(f a0)... an), print\n    f(a0,...,an), or (a0 f a1) if f is inf", "answers": ["        root, args = root_app(expr)"], "all_classes": null, "length": 1696}
{"pred": "====================\n\ndef check_args(args, fn_type, env):\n    for arg, arg_type in zip(args, fn_type.__args__):\n        check_arg(arg, arg_type, env)\n\n    if fn_type.__result__ is Nothing:", "answers": ["LET_TYPE = Func[[__var.bindings, __var.expr], __var.result]"], "all_classes": null, "length": 1468}
{"pred": "class RegistrationView(ConfirmationMixin, XMPPAccountView):\n    purpose = PURPOSE_REGISTER\n\n    def get_form_class(self):\n        return RegistrationForm\n\n    def get_success_url(self):\n        return reverse('xmpp_account", "answers": ["    form_class = RegistrationForm"], "all_classes": null, "length": 1292}
{"pred": "\n\t@Autowired\n\tprivate UpdateProvider updateProvider;\n\n\t@Autowired\n\tprivate DeleteProvider deleteProvider;\n\n\t@Autowired\n\tprivate InsertItem insertItem;\n\n\t@Autowired\n\tprivate InsertItemProvider insertItemProvider;\n\n\t@Autowired\n\tprivate DataSource data", "answers": ["\tprivate InsertItem insertItem;\r"], "all_classes": null, "length": 917}
{"pred": "\n    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {\n        return assertThat(result(whenStep));\n    }\n\n    public static AbstractObjectAssert<?> resultOf(CheckedObjectSupplier whenStep) {\n        return assertThat(result(whenStep));", "answers": ["    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {"], "all_classes": null, "length": 1467}
{"pred": "\n```python\nclass User(BaseModel):\n    id = Column(String, hash_key=True)\n    email = Column(String)\n    name = Column(String)\n    joined = Column(DateTime, dynamo_name=\"j\")\n\n    def __init__(self", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    if base_name == 'V':\n        bases.append(vertex)\n\nThis line of code is checking if the base class name is 'V', which is the name of the base class for vertexes in OrientDB. If it is, it appends the vertex class to the list", "answers": ["            is_edge = bases and bases[0].decl_type == DeclarativeType.Edge"], "all_classes": null, "length": 3757}
{"pred": "\n  def load_bytecode(self, co):\n    \"\"\"\n      Loads the bytecode from the code object.\n    \"\"\"\n    self.bytecode = []\n    self.main_module = ModuleDeclaration(self.pyc_file, co)\n    self.main_", "answers": ["    if isinstance(visitor, BytecodeVisitor):"], "all_classes": null, "length": 2071}
{"pred": "\n    bind_column(NotAModel, \"other\", column)\n\n\ndef test_bind_column():\n    \"\"\"bind_column adds a column to a model\"\"\"\n    class MyModel(BaseModel):\n        class Meta(IMeta):\n            pass\n        data = Column(", "answers": ["        bind_column(NotAModel, \"c\", column)"], "all_classes": null, "length": 2265}
{"pred": "       LinkedEdgeTest.class,\n        LinkedVertexTest.class,\n        ManyToManyTest.class,\n        ManyToManyEdgeTest.class,\n        ManyToOneTest.class,\n        MultiPropertiesTest.class,\n        PropertyTest.class,\n        VertexPropertyTest", "answers": ["        LinkedEdgeTest.class,"], "all_classes": null, "length": 2012}
{"pred": "\n    def commit(self):\n        \"\"\"\n        Commit the current transaction\n        \"\"\"\n        self._append( ( FIELD_BYTE, TX_COMMIT_OP ) )\n        self._append( ( FIELD_SHORT, int(self._session_id) ) )\n       ", "answers": ["        elif isinstance(operation, RecordDeleteMessage):"], "all_classes": null, "length": 3043}
{"pred": "   StationSeed seed = new StationSeed(track);\n    Station station = getApi().getStationApi().create(seed, \"TestStation\", false);\n    assertNotNull(station);\n    assertNotNull(station.getName());\n    assertNotNull(station.getId());\n    List<", "answers": ["    assume(track);"], "all_classes": null, "length": 3038}
{"pred": "       // dMeta.interval.expandIntervalByDay(62);\n        dMeta.filterSegments(broker.getSegmentsInRange(dMeta.dataSource, dMeta.interval));\n        dPgm.print(printToConsole);\n        return overlord.fire", "answers": ["        Interval expandedInterval = dMeta.interval.expandEndTimeByDay(62);"], "all_classes": null, "length": 3924}
{"pred": "       startGameCommand.setFromUser(UserSession.getInstance().getUsername());\n        networkInterface.sendMessage(startGameCommand.serialize());\n        isGameStarted = true;\n    }\n\n    public void sendBombExplosion(BombModel bombModel, World world", "answers": ["        startGameCommand.setFromUser(UserSession.getInstance().getUsername());"], "all_classes": null, "length": 6404}
{"pred": "class Movie(Video, Playable, AdvancedSettingsMixin, ArtMixin, PosterMixin, RatingMixin, SplitMergeMixin, UnmatchMatchMixin,\n                                                                                                                     CollectionMixin,\n                                                                                                                     CountryMixin,", "answers": ["        CollectionMixin, CountryMixin, DirectorMixin, GenreMixin, LabelMixin, ProducerMixin, WriterMixin):"], "all_classes": null, "length": 5015}
{"pred": "       OhaBackupHelper.IOhaBackupHelper {\n\n    private static final int LOADER_ID_ENERGY_USE_DAYS = 0;\n    private static final int LOADER_ID_ENERGY_USE_BILL = 1;\n    private static", "answers": ["        OhaRestoreDatabaseFragment.IOhaRestoreDatabaseFragment, SwipeRefreshLayout.OnRefreshListener {"], "all_classes": null, "length": 5219}
{"pred": "       Require require = method.getAnnotation(Require.class);\n        for (Class<? extends Constraint> constraint : require.value()) {\n          key.withConstraint(constraint, require.invert());\n        }\n      }\n\n      // If a default value is provided, add it", "answers": ["        for (Class<? extends Constraint> constraint : method.getAnnotation(Require.class).value()) {"], "all_classes": null, "length": 4522}
{"pred": "\tprivate XProtTestView mainFrame;\n\n\t/**\n\t * Creates new form Consensus\n\t */\n\tpublic Consensus(XProtTestView mainFrame) {\n\t\tthis.mainFrame = mainFrame;\n\t\tinitComponents();\n\t}\n\n\t/**", "answers": ["\tprivate TreeFacade facade;"], "all_classes": null, "length": 6293}
{"pred": "   ilms = models.ConfocalImageModel(objects, p, i, b, off)\n\n    # 3. image\n    img = states.ImageState(ilms, shape=(100,100,100), float_precision=np.float6", "answers": ["    mdl = models.ConfocalImageModel()"], "all_classes": null, "length": 4416}
{"pred": "       return self._primary_file.endswith(cfg_exts)\n\n    def reset_aux_files(self):\n        \"\"\"Reset all auxiliary files to None.\"\"\"\n        self.Gelfilepath = None\n        self.Gelfiledirectory = None\n        self", "answers": ["        return filename_is_yaml(self._primary_file)"], "all_classes": null, "length": 5914}
{"pred": "\t\t\t\t\tSpatialOrdering.MIXED_MODE);\n\t\t\t\n\t\t\tclassfier.classify(chunkList);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\n\tpublic void renderImageOutlines(LapdfDocument document", "answers": ["\t\t\t\t\tSpatialOrdering.COLUMN_AWARE_MIXED_MODE);"], "all_classes": null, "length": 7328}
{"pred": "\n```java\n    void inject(KioskModeHandler kioskModeHandler);\n```\n\nThis line of code is injecting the `KioskModeHandler` class into the `HomerPlayerApplication` instance. The `KioskModeHandler` class is a singleton", "answers": ["    void inject(KioskSettingsFragment fragment);"], "all_classes": null, "length": 6924}
{"pred": "\t\tFileInputStream fis = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(casePath + \"CaseLog.xml\");\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(fis));\n\t\t\tStringBuilder sb = new", "answers": ["\t\txstream.alias(\"SystemDateTimeModule\", SystemDateTimeModule.class);"], "all_classes": null, "length": 6491}
{"pred": "\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t\n\t/**\n", "answers": ["\tprivate SubmissionServices submissionServices;"], "all_classes": null, "length": 6104}
{"pred": "       return so(size=size.value, unit=unit.value)\n\n        def get_memory_stats(self):\n            \"\"\"Get the current memory usage of FMOD.\n\n            :rtype: Structobject with the following members:\n\n                total (int)\n                ", "answers": ["        return so(size=size.value, unit=TIMEUNIT(unit.value))"], "all_classes": null, "length": 5131}
{"pred": "           public void handleResponse(FiComRequest request, FiComResponse response) {\n                System.out.println(\"Received response: \" + response);\n                System.out.println(\"PersonID attributes: \" + response.getPersonIdAttributes());\n                System.out.println(\"", "answers": ["            public void onResponse(final FiComRequest req, final FiComResponse resp) {"], "all_classes": null, "length": 7178}
{"pred": "\t\telif type(obj) is Part:\n\t\t\treturn get_icon(\"part\")\n\nThis line of code checks if the type of the object is Part. If it is, it returns the icon associated with a part, which is represented by the get_icon(\"part\") function call.", "answers": ["\t\telif type(obj) is PartView:"], "all_classes": null, "length": 6610}
{"pred": "           alignment_info = {}\n            for args in jobs:\n                alignment_info.update(compile_information_func(*args))\n\n        self.logger.debug(f\"Compiled alignment information in {time.time() - compile_info_begin} seconds\")\n\n        self", "answers": ["            alignment_info = run_non_mp("], "all_classes": null, "length": 4716}
{"pred": "   yield ServiceManager(bigip_proxy, partition, schema)\n\n\ndef test_ltm_service_manager_apply_config(ltm_service_manager,\n                                          ltm_service_config):\n    \"\"\"Test the ServiceManager apply_config method.\"\"\"\n    #", "answers": ["    service_mgr = ServiceManager("], "all_classes": null, "length": 5986}
{"pred": "\n\tprivate SaveFile saveFile;\n\n\tpublic MatchPanel() {\n\t\tsetLayout(new BorderLayout());\n\t\tsetPreferredSize(new Dimension(1200, 600));\n\t\tsetBackground(Enums.darkslategray);\n", "answers": ["\tprivate SaveFile saveFile;"], "all_classes": null, "length": 4523}
{"pred": "\n    def initialize_jobs(self) -> None:\n        \"\"\"\n        Initialize the corpus's Jobs\n        \"\"\"\n        self.log_info(\"Setting up training data...\")\n        if len(self.speakers) < self.num_jobs:\n            self", "answers": ["    def add_file(self, file: File) -> None:"], "all_classes": null, "length": 6234}
{"pred": " @POST(\"sj/v2.5/plentries/shared\")\n  Call<SharedPlaylistEntryListResult> listSharedPlaylistEntries(\n      @Body SharedPlaylistRequest request, @Header(\"X-Device-ID\") String androidID);\n\n  @POST(\"", "answers": ["  Call<MutationResponse> batchCall(@Url String path, @Body Mutator mutator);"], "all_classes": null, "length": 5032}
{"pred": "urlpatterns = [\n    url(r'^', include(app_urls)),\n    url(r'^api/', include(api_urls)),\n    url(r'^docs/', include_docs_urls(title='TranStats API', public=True)),\n   ", "answers": ["    url(r'^view/(?P<release_branch>[\\w\\-\\+]+)$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),"], "all_classes": null, "length": 5226}
{"pred": "           // Get the Signing Certificate either with a ProfileQuery, or a dummy SignatureRequest\n            X509CertificateChain certChain = getSigningCertificate();\n\n            // Construct the DTBS\n            DTBS dtbs = new DTBS(this.doc.getContent(), DTBS", "answers": ["            X509CertificateChain chain = null;"], "all_classes": null, "length": 4403}
{"pred": "\n    validate_key_condition(model, index, key)\n\nThis line of code should raise an exception because the key condition is not valid for the hash key.\n\nThe test case is using pytest's parametrize decorator to generate multiple test cases for different combinations of model and", "answers": ["    with pytest.raises(InvalidSearch):"], "all_classes": null, "length": 4644}
{"pred": "\n        for title, level, pagenum in outline_contents:\n            if level == 0:\n                #this is the book title\n                header += row_tmpl % (chapter, title, '')\n                chapter += 1\n                continue\n\n            if", "answers": ["        localise_number = get_number_localiser(self.page_number_style)"], "all_classes": null, "length": 4641}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        DatabaseManager.INSTANCE.getChatDAO().update(chat);\n                        fillInfoView();\n                    }\n                }\n        );\n        resetStatus.setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick", "answers": ["                        new UpdateTask<>(DatabaseManager.INSTANCE.getChatDAO(),"], "all_classes": null, "length": 5064}
{"pred": "           response = yield self.restapi.appinterfaces.get(1)\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response.json, {'type': 'AzureIotHttps',\n                                              'id': 1", "answers": ["            resource = RestAppInterface(restapi=self.restapi, server=self.server)"], "all_classes": null, "length": 5691}
{"pred": "\nlanguage_release_urls = [\n    url(r'^view/(?P<locale>[\\w@-]+)/(?P<release_slug>[\\w\\-\\+]+)$', LanguageReleaseView.as_view(),\n    name=\"language-release-view\"),\n]", "answers": ["        LanguageReleaseView.as_view(), name=\"language-release-view\"),"], "all_classes": null, "length": 5272}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData(data.substring(AppData.COMPONENT.length()).trim());\n\t\t\t\t} else if (data.startsWith(ShortcutData.", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "   private long lastPingSent = System.currentTimeMillis();\n    private long lastPongReceived = System.currentTimeMillis();\n    private PacketCollector pingCollector;\n    private PacketCollector pongCollector;\n    private PingFailedListener pingFailedListener", "answers": ["    private Set<PingFailedListener> pingFailedListeners = Collections"], "all_classes": null, "length": 6396}
{"pred": "\nimport android.app.Activity;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        OnPanelResumedListener {"], "all_classes": null, "length": 7406}
{"pred": "\n    def __len__(self):\n        return len(self.__bytearray__())\n\nThis line of code calculates the length of the byte array representation of the OnePassSignatureV3 object. It does this by calling the `len()` function on the `__bytearray__()` method", "answers": ["class PrivKey(VersionedPacket, Primary, Private):"], "all_classes": null, "length": 5382}
{"pred": "       SourceRecord record = iter.next();\n        assertThat(\"first record has correct id\", record.getId(), is(equalTo(\"1\")));\n        assertThat(\"first record has correct protocol identifier\", record.getProtocolIdentifier(), is(equalTo(\"1\")));\n\n        record = iter.next();\n", "answers": ["        BuilderRecord mappedRecord = (BuilderRecord) mapper.map(iter.next());"], "all_classes": null, "length": 4025}
{"pred": "           case FOLDER_CHOOSER_TAG:\n                CheckPreferences.setDownloadLocation(this, directory.getPath());\n                break;\n        }\n    }\n\n    public void showPlusOneDialog() {\n        AlertDialog.Builder builder = new Alert", "answers": ["            case DownloadOptionAdapter.FOLDER_CHOOSER_TAG:"], "all_classes": null, "length": 5470}
{"pred": "               //banner.setIndicator(new NumIndicator(this));\n                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));\n                banner.setIndicator(new CircleIndicator(this));\n                banner.setIndicatorGravity(Indicator", "answers": ["                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));"], "all_classes": null, "length": 5279}
{"pred": "   Connection connection = DataSource.getDataSource().getConnection(NoCredentials.INSTANCE);\n    Command command = connection.createCommand(\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n\"", "answers": ["    DataSource ds = new SHPDataSource(serverAddress.getHostName(),"], "all_classes": null, "length": 6070}
{"pred": "   private List<ContentItem> selectedContentItemList = new ArrayList<ContentItem>();\n\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private PullToRefreshLayout pullToRefreshLayout;\n\n    private FloatingActionButton floatingActionButton;\n   ", "answers": ["    private WatchItemAdapter watchItemAdapter;"], "all_classes": null, "length": 6232}
{"pred": "\t\t\tSobelZ, tEXOG_B, tEXOG_A, reduced_data = reg_rm_ancova_one_bs_factor(data, dmy_factor1, dmy_subjects, dformat, dmy_covariates, output_sig", "answers": ["\t\t\tF_a, F_s, F_sa = reg_rm_ancova_one_bs_factor(data, "], "all_classes": null, "length": 4307}
{"pred": "       channels.getContentPanel().setLayout(new VerticalLayout());\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation(FORMAT_MESSAGE_WHISPER)));\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation", "answers": ["        channels.getContentPanel().setLayout(new VerticalLayout());"], "all_classes": null, "length": 6424}
{"pred": "   @Provides\n    AdInterface provideAdInterfaceWithPreroll() {\n\n        // using the fake generated AdMediaModel to do has the returned data.\n        return new AdInterface() {\n            @Override\n            public void fetchAd(AdRetriever retriever, final Ret", "answers": ["    VpaidClient provideVpaidClient(FsmPlayer player) {"], "all_classes": null, "length": 4405}
