{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        source.get()\n        if source.get() == class_name:\n            source.get()\n            return set(class_contents)\n        source.put('[')\n    return None\n\nThe code provided is a parser for", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn = KNeighborsClassifier()\n#knn.fit(mnist.data, mnist.target)\n#prediction = knn.predict(img)\n#print(prediction)\n#print(np.argmax(prediction))\n#print", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setSelected(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n   ", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\t\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\treturn;\n\t\tInputStream is = null;\n\t\ttry", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of the _MockEvent class is, but it seems to be used in the _keydown_cb and _keyup_cb methods. The _MockEvent class should have a constructor that takes a single argument, key", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "\n    if kwargs[\"test_list\"]:\n        test_paths = {\"/\": {\"tests_path\": kwargs[\"test_list\"]}}\n    else:\n        test_paths = {\"/\": {\"tests_path\": env.get_test_paths()}}\n\n    if kwargs[\"", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength of the wavemeter in nm (vac).\n        @return float: current wavelength\n        \"\"\"\n        # lock the mutex to prevent concurrent access\n        with self.threadlock:", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            Presence.away, Presence.chat, Presence.dnd, Presence.x,\n            Presence.idle, Presence.offline, Presence.online,\n            Presence.subscribe,", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this);\n                        }\n                    });\n                }\n            }\n            poll.Options = options.ToArray();\n            await poll.Setup(null, options, null, \"Choose a map for the next battle\");\n            return true", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = null;\n\t\t\t\t}\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tif (throwOnMissing)\n\t\t\t\t\t\tthrow", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(\n        dict(\n            interface=dict(type='str', required=True)\n        )\n    )\n    link_status = LinkStatus(argument_spec)\n    link_", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   Pattern pattern = Pattern.compile(\"^[0-9,]+$\");\n    Matcher matcher = pattern.matcher(s);\n    return matcher.matches();\n  }\n  public void setProperties(ISVNProperty[] properties) throws SVNException {\n    for", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an auction\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = find_neighbours(nodemap, c_sead, start, stop, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            for (int k =", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(296, 300);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = {\n    'tour': tourlist,\n    'observations': observations,\n    'translations': translations_dict,\n    }\n```\n\nThis line of code is creating a dictionary called `behavior` that contains three keys: 'tour", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        Get the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for handle in handles:\n            person = self.report.database.get", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle takes off from the ground and hovers at a given altitude\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.Deserialize<Session.GlobalSettings>(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\t// reset buffer\n\t", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            final IMemento memento = getViewSite().getPerspective().getPerspectiveState();\n            final IMemento inputMem = new XMLMemento();\n            SingleSourceHelper.save(input, inputMem);\n            mement", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && component.isEnabled() && component.isFocusOwner() && component.getSelectionStart() == component.getSelectionEnd() && component.getSelectedText(null) == null) {\n// launcher.showMenu(e);\n}\n}\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        names = [\n            (\"John Michael\", \"Michael John\"),\n            (\"John Michael\", \"John Michael\"),\n            (\"John Michael\", \"John Michael\"),\n            (\"John Michael\", \"John Michael\"),", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('display_name')\n        else", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            object IEnumerator.Current => Current;\n            public bool MoveNext()\n            {\n                if (list.IsReadOnly)\n                {\n                    throw new InvalidOperationException(\"The list is read-only\");\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    path = os.path.join(parentpath, path)\n\n    return localrepo.localrepository(ui, path)\n\n# vim: set filetype=python tabstop=4 shiftwidth=4 expandtab:", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\nstructured_record = logging.LogRecord(\n    name, level, msg, args, exc_info, fn, lno, structured, None, None,\n)\n\nThis line of code creates a new LogRecord object with the given parameters. The LogRecord object is a container for the", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n\n        # Check if the user has the right to edit the record collection\n        # the record is going to be created in.\n        if not user", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import Connection\nfrom ansible.utils.display import Display\nfrom ansible.utils.compat import (\n    is_py3k,\n    is_py3k_plus,\n    is", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tif(dataString.length() > 0)\n\t\t\t\tdataString += ims.dto.NASMessageCodes.RECORDSEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record. The page count is stored in the '300' field of the record, with the", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendUnitData(Packet):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n    fields_desc = [\n        LEShortField(\"length\", 0),\n        LEShortField(\"commandId\", 0x70),\n", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tfinal GridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// Extracting the Coverage Name\n\t\tString[] coverageNameParts = coverageName.split(\"-\");\n\t\tString modelName = coverageNameParts[0];\n\t\tString modelType", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name().toLowerCase() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you want to do with the `Creat", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tint y = 0;\n\t\t\twhile( y < height )\n\t\t\t{\n\t\t\t\tbin", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions()):\n        return reader\n```\n\nThis code is used to find the appropriate reader for a given file based on its extension. It iterates over a list of readers and checks if the file", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           return true;\n        }\n        private void OnKeyUp(object sender, KeyEventArgs e)\n        {\n            int keyCode = (int)e.KeyCode;\n            int shift = (int)e.KeyData / 0x10000;\n            do", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_names += ['Weights of the distortion matrix']\nout_comment += ['Weights of the distortion matrix']\nout_units += ['']\n\nPlease add the missing lines of code as shown above.", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\nlines = obj.split(\"\\n\")\n\nThis line splits the given RIS string into a list of lines. Each line in the list will be processed by the parse() method of the Base class or its subclasses (Wok or Ris).", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the U", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateSinglePlayerTableStrength(player, opponent.getValue());\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(strength);\n        this.scoreTable.add(tableStrengthScore", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_range_requests(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        with web.app.test_client() as c:\n            # Load /download with range header", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > Constants.NSCLIENT_MAX_LOG_", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    # If the makefiles already exist, we can just build the DLLs.\n    if os.path.isfile(makefile):\n        if arch == \"x86\":\n            make_cmd = \"nmake\"\n        elif arch == \"amd64\":\n           ", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self):\n        \"\"\"tests converting a .properties file to .po\"\"\"\n        self.convert(\"testdata/test.properties\", \"testdata/test.po\")\n\nPlease complete the test_convert() method to test the conversion of a .properties file to", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm is Signal)\n\t\t\t\t\tvm.GenEvent (sw, null, \"GLib.Object.GetObject (Handle)\");\n\t\t\t}\n\n\t\t\tsw.", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n    if module.check_mode:\n        module.exit_json()\n\n    hosts = get_hosts(module)\n    for host in hosts:\n        login", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(\n                    Enumerable.Range(0, (prevChildren.Length - StartPagingTreshold) / PageSize)\n                    .Select(i => childFactory(query.Parent, (Start", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteMultiple(self):\n        \"\"\"\n        TCP: Short write to client multiple times\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(name", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static TokenCategory getCategory(RustTokenId tokenId) {\n        return tokenId.category;\n    }\n}\n\nThis method will return the TokenCategory of the given RustTokenId.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(this.DescriptionControlID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(this.TitleControlID);\n        }\n        public Control GetLabelForPercentage()\n        {", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args['Bucket'] = bucket\n        query_args['Key'] = key\n        query_args['Signature'] = self.sign(method, path, headers, query_args)\n        query_string = urllib.urlencode(query_args)\n        url = self", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), new RectF(left, top, right, bottom), null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\nHueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x13B, 0x13B));\nHueInfo.Add(D", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(), c -> {\n                    refresh();\n                });\n            }\n        });\n    }\n    private void initCertificateTypeSelection() {\n        this.certAddModal", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    for filename in os.listdir(self.dbm_dir):\n        if filename.endswith(ext) and os.access(os.path.join(self.dbm_dir, filename), os.F_OK):\n            list.append(os.path.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return (filename != null ? filename : location.toExternalForm()) +\n                (description != null ? \" (\" + description + \")\" : \"\");\n    }\n    /**\n     * Returns the accessibility context for this object.\n     *\n     * @return the accessibility context for", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    connection = Connection(\n        host=module.params['host'],\n        username=module.params['username'],\n        password=module.params['password", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n        throw new IOException(\"Stream has not been marked\");\n        }\n        fileDecoder = clone(savedDecoder);\n    }\n    /**\n     * Returns the underlying object that is being decoded.\n     *\n     * @return the object being decoded.\n     */\n    public", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        # If publication does not exist, create it:\n        if not publication.exists:\n            changed = publication.create(tables, params, owner, check_mode=module.check_mode)\n        # If publication exists, update it:\n        else", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   data = load_data(path='data/mnist', one_hot=True, reshape='off')\n    X = data[0].T.flatten()\n    X = X.astype(theano.config.floatX)\n    X_image = X.", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: This is a hack to get the FigRole and FigOrdering\n        // to be created and added to the FigAssociationEndAnnotation\n        // group.\n        // This is necessary because the FigRole and FigOrdering\n        // are created in the constructor of FigAssociation", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    LogManager.GetCurrentClassLogger().Error(\"Performance counter initialization failed: \" + ex.Message);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "===================\n    for i in range(10):\n        full_name = pjoin( cfg.webdav_backend_directory, \"foo-%d\" % i )\n        assert os.path.isfile( full_name )\n\nThis code is testing the functionality of a web", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    stac -= self.labels[args[0", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append((\"\", 0))\n\t\t\t\tlen -= 1\n\t\t\t\tofs += 1\n\t\t\t\tcontinue\n\t\t\tresult.append((self.data.read(cur.offset + prog_ofs, file_len", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\tString macroValue = macroHandler.getMacroValue(mac", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(new ASN1Boolean(false));\n    }\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n     ", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.getInstance();\n\t\t}\n\t}\n}\n\nThe code is a part of a library for Android called SweetBlue. It manages the options for the devices that are connected to the app. The class `P_DiskOptionsManager` is responsible for storing", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n        }\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
