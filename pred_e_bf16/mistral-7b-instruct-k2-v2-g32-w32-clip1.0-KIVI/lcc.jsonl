{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setRaspodela(", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            }\n        }\n    }\n}", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "   if source.get() == '[':\n        source.get()\n        if source.get() == class_name:\n            source.get()\n            return set(class_contents)\n        source.put('[')\n    return None\n\nThe code provided is a parser for", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#knn = KNeighborsClassifier()\n#knn.fit(mnist.data, mnist.target)\n#prediction = knn.predict(img)\n#print(prediction)\n#print(np.argmax(prediction))\n#print", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setSelected(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n   ", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\n        topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t}\n\t\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\treturn;\n\t\tInputStream is = null;\n\t\ttry", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "self.__repeat = (delay, interval)\n\nI'm not sure what the purpose of the _MockEvent class is, but it seems to be used in the _keydown_cb and _keyup_cb methods. The _MockEvent class should have a constructor that takes a single argument, key", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "\n    if kwargs[\"test_list\"]:\n        test_paths = {\"/\": {\"tests_path\": kwargs[\"test_list\"]}}\n    else:\n        test_paths = {\"/\": {\"tests_path\": env.get_test_paths()}}\n\n    if kwargs[\"", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\n    def get_current_wavelength(self):\n        \"\"\" Returns the current wavelength of the wavemeter in nm (vac).\n        @return float: current wavelength\n        \"\"\"\n        # lock the mutex to prevent concurrent access\n        with self.threadlock:", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\n        List<String> mustStatusNames = Arrays.asList(\n            Presence.away, Presence.chat, Presence.dnd, Presence.x,\n            Presence.idle, Presence.offline, Presence.online,\n            Presence.subscribe,", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            await cmd.ExecuteArmed(this);\n                        }\n                    });\n                }\n            }\n            poll.Options = options.ToArray();\n            await poll.Setup(null, options, null, \"Choose a map for the next battle\");\n            return true", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = null;\n\t\t\t\t}\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tif (throwOnMissing)\n\t\t\t\t\t\tthrow", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(\n        dict(\n            interface=dict(type='str', required=True)\n        )\n    )\n    link_status = LinkStatus(argument_spec)\n    link_", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   Pattern pattern = Pattern.compile(\"^[0-9,]+$\");\n    Matcher matcher = pattern.matcher(s);\n    return matcher.matches();\n  }\n  public void setProperties(ISVNProperty[] properties) throws SVNException {\n    for", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an auction\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            sead_partnn_l = find_neighbours(nodemap, c_sead, start, stop, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            for (int k =", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(296, 300);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "```\nbehavior = {\n    'tour': tourlist,\n    'observations': observations,\n    'translations': translations_dict,\n    }\n```\n\nThis line of code is creating a dictionary called `behavior` that contains three keys: 'tour", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "   def get_gender(self, handles):\n        \"\"\"\n        Get the number of males, females and unknown gender\n        \"\"\"\n        males = 0\n        females = 0\n        unknown = 0\n        for handle in handles:\n            person = self.report.database.get", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"\n        Ensure vehicle takes off from the ground and hovers at a given altitude\n        \"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.Deserialize<Session.GlobalSettings>(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\t// reset buffer\n\t", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       if (persist)\n        {\n            final IMemento memento = getViewSite().getPerspective().getPerspectiveState();\n            final IMemento inputMem = new XMLMemento();\n            SingleSourceHelper.save(input, inputMem);\n            mement", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "if (component != null && component.isEnabled() && component.isFocusOwner() && component.getSelectionStart() == component.getSelectionEnd() && component.getSelectedText(null) == null) {\n// launcher.showMenu(e);\n}\n}\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "\n    def test_clean_name_two_word_forenames(self):\n        names = [\n            (\"John Michael\", \"Michael John\"),\n            (\"John Michael\", \"John Michael\"),\n            (\"John Michael\", \"John Michael\"),\n            (\"John Michael\", \"John Michael\"),", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if sort[0] == 'uploadDate':\n            key_func = itemgetter('upload_date')\n            sort_order = sort[1]\n        elif sort[0] == 'displayname':\n            key_func = itemgetter('display_name')\n        else", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "               this.index = -1;\n            }\n            object IEnumerator.Current => Current;\n            public bool MoveNext()\n            {\n                if (list.IsReadOnly)\n                {\n                    throw new InvalidOperationException(\"The list is read-only\");\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "\n    path = os.path.join(parentpath, path)\n\n    return localrepo.localrepository(ui, path)\n\n# vim: set filetype=python tabstop=4 shiftwidth=4 expandtab:", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "\nstructured_record = logging.LogRecord(\n    name, level, msg, args, exc_info, fn, lno, structured, None, None,\n)\n\nThis line of code creates a new LogRecord object with the given parameters. The LogRecord object is a container for the", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "       return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n\n        # Check if the user has the right to edit the record collection\n        # the record is going to be created in.\n        if not user", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import Connection\nfrom ansible.utils.display import Display\nfrom ansible.utils.compat import (\n    is_py3k,\n    is_py3k_plus,\n    is", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tif(dataString.length() > 0)\n\t\t\t\tdataString += ims.dto.NASMessageCodes.RECORDSEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "```\n    record_add_field(rec, '300', subfields=[('a', page_count)])\n```\n\nThis line of code adds the page count to the record. The page count is stored in the '300' field of the record, with the", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\nclass ENIPSendUnitData(Packet):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n    fields_desc = [\n        LEShortField(\"length\", 0),\n        LEShortField(\"commandId\", 0x70),\n", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tfinal GridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// Extracting the Coverage Name\n\t\tString[] coverageNameParts = coverageName.split(\"-\");\n\t\tString modelName = coverageNameParts[0];\n\t\tString modelType", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCustomName(MobArena.getConfig().getString(\"creature.\" + this.name().toLowerCase() + \".name\"));\n        }\n        return e;\n    }\n}\n\nI'm not sure what you want to do with the `Creat", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tint y = 0;\n\t\t\twhile( y < height )\n\t\t\t{\n\t\t\t\tbin", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "               if (house == null)\n                    house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                if (house != null)\n                    bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "\n```\nfor reader in readers:\n    if fname.endswith(reader.extensions()):\n        return reader\n```\n\nThis code is used to find the appropriate reader for a given file based on its extension. It iterates over a list of readers and checks if the file", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           return true;\n        }\n        private void OnKeyUp(object sender, KeyEventArgs e)\n        {\n            int keyCode = (int)e.KeyCode;\n            int shift = (int)e.KeyData / 0x10000;\n            do", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_names += ['Weights of the distortion matrix']\nout_comment += ['Weights of the distortion matrix']\nout_units += ['']\n\nPlease add the missing lines of code as shown above.", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\nlines = obj.split(\"\\n\")\n\nThis line splits the given RIS string into a list of lines. Each line in the list will be processed by the parse() method of the Base class or its subclasses (Wok or Ris).", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the U", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += this.calculateSinglePlayerTableStrength(player, opponent.getValue());\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(strength);\n        this.scoreTable.add(tableStrengthScore", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\n    def test_range_requests(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        with web.app.test_client() as c:\n            # Load /download with range header", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > Constants.NSCLIENT_MAX_LOG_", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    # If the makefiles already exist, we can just build the DLLs.\n    if os.path.isfile(makefile):\n        if arch == \"x86\":\n            make_cmd = \"nmake\"\n        elif arch == \"amd64\":\n           ", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_convert(self):\n        \"\"\"tests converting a .properties file to .po\"\"\"\n        self.convert(\"testdata/test.properties\", \"testdata/test.po\")\n\nPlease complete the test_convert() method to test the conversion of a .properties file to", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm is Signal)\n\t\t\t\t\tvm.GenEvent (sw, null, \"GLib.Object.GetObject (Handle)\");\n\t\t\t}\n\n\t\t\tsw.", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(argument_spec=fields,\n                           supports_check_mode=False)\n    if module.check_mode:\n        module.exit_json()\n\n    hosts = get_hosts(module)\n    for host in hosts:\n        login", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableText", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(\n                    Enumerable.Range(0, (prevChildren.Length - StartPagingTreshold) / PageSize)\n                    .Select(i => childFactory(query.Parent, (Start", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\n    def testTCPShortWriteMultiple(self):\n        \"\"\"\n        TCP: Short write to client multiple times\n        \"\"\"\n        name = 'short-write-multiple.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(name", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    public static TokenCategory getCategory(RustTokenId tokenId) {\n        return tokenId.category;\n    }\n}\n\nThis method will return the TokenCategory of the given RustTokenId.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(this.DescriptionControlID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(this.TitleControlID);\n        }\n        public Control GetLabelForPercentage()\n        {", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       query_args['Bucket'] = bucket\n        query_args['Key'] = key\n        query_args['Signature'] = self.sign(method, path, headers, query_args)\n        query_string = urllib.urlencode(query_args)\n        url = self", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), new RectF(left, top, right, bottom), null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\nHueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x13B, 0x13B));\nHueInfo.Add(D", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(), c -> {\n                    refresh();\n                });\n            }\n        });\n    }\n    private void initCertificateTypeSelection() {\n        this.certAddModal", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\n    for filename in os.listdir(self.dbm_dir):\n        if filename.endswith(ext) and os.access(os.path.join(self.dbm_dir, filename), os.F_OK):\n            list.append(os.path.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return (filename != null ? filename : location.toExternalForm()) +\n                (description != null ? \" (\" + description + \")\" : \"\");\n    }\n    /**\n     * Returns the accessibility context for this object.\n     *\n     * @return the accessibility context for", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include in", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    connection = Connection(\n        host=module.params['host'],\n        username=module.params['username'],\n        password=module.params['password", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\n        throw new IOException(\"Stream has not been marked\");\n        }\n        fileDecoder = clone(savedDecoder);\n    }\n    /**\n     * Returns the underlying object that is being decoded.\n     *\n     * @return the object being decoded.\n     */\n    public", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        # If publication does not exist, create it:\n        if not publication.exists:\n            changed = publication.create(tables, params, owner, check_mode=module.check_mode)\n        # If publication exists, update it:\n        else", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   data = load_data(path='data/mnist', one_hot=True, reshape='off')\n    X = data[0].T.flatten()\n    X = X.astype(theano.config.floatX)\n    X_image = X.", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\n        // TODO: This is a hack to get the FigRole and FigOrdering\n        // to be created and added to the FigAssociationEndAnnotation\n        // group.\n        // This is necessary because the FigRole and FigOrdering\n        // are created in the constructor of FigAssociation", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    LogManager.GetCurrentClassLogger().Error(\"Performance counter initialization failed: \" + ex.Message);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "===================\n    for i in range(10):\n        full_name = pjoin( cfg.webdav_backend_directory, \"foo-%d\" % i )\n        assert os.path.isfile( full_name )\n\nThis code is testing the functionality of a web", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "# @stacker(Pseudop.JUMP_ABSOLUTE)\n# def stacker_jump_absolute(self, pseudop, args, push, pop):\n#    stac = self.stack_count\n#    stac -= self.labels[args[0", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\tresult.append((\"\", 0))\n\t\t\t\tlen -= 1\n\t\t\t\tofs += 1\n\t\t\t\tcontinue\n\t\t\tresult.append((self.data.read(cur.offset + prog_ofs, file_len", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\tString macroValue = macroHandler.getMacroValue(mac", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(new ASN1Boolean(false));\n    }\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n     ", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.getInstance();\n\t\t}\n\t}\n}\n\nThe code is a part of a library for Android called SweetBlue. It manages the options for the devices that are connected to the app. The class `P_DiskOptionsManager` is responsible for storing", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n        }\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       Dlasdq.dlasdq(\"U\", i16, i15, i17, i11, i21, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               // What should be done here?\n            }\n        }\n        public boolean permits(Key key) {\n            // check the key algorithm\n            String algorithm = key.getAlgorithm();\n            Set<Constraint> constraints = constraintsMap.get(algorithm);\n            if (constraints", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      DefaultPort proxyPort = (DefaultPort) proxyCell.getChild(0);\n      DefaultPort devicePort = null;\n      int unitNum = proxyInfo.getUnitNumber();\n      for ( Iter", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```\ndef create_new_filesystem(self, new_path):\n    \"\"\"Creates a filesystem from the collection.\n    Args:\n        new_path: The path to recursively search for the collection within.\n    Returns:\n        None\n    \"\"\"\n    for artist", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Returns the configuration for this layer.\n     *\n     * @return", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tShip(order, false);\n\t\t\t}\n\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t}\n\t\t/// <summary>\n\t\t/// Gets a value indicating whether the order can be marked as paid\n\t\t/// </", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i =", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\n```python\nreturn self._conf_helper('current_ch', 'setpoint', 'output_en', options)\n```\n\nThis line of code is defining the current configuration of the device. It is using the `_conf_helper` function to configure the device based on the provided", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Could not upload sketch\"));\n    }\n    return uploader.getClassName();\n  }\n  /**\n   * Run the compiled code.\n   * <P>\n   * This is done by creating a new instance of", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        if not solidRef:\n            raise ValueError(\"No Solid to fillet!\")\n        for e", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "\n    # Writing final memory update 6/7 (function unknown)\n    j = 0\n    dmpUpdate = []\n    while ((j < 4) or (j < dmpUpdate[2] + 3)):\n        dmpUpdate.append(self.dmpUp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item:\n\t\t\t\tpdf = get_pdf(item)\n\t\t\t\tpdf_filename = item.item_name + \".pdf", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.m_SetAttributes.IsEmpty)\n                    this.m_SetAttributes = new AosAttributes(this);\n                if (this.m_SetSkillBonuses.IsEmpty)\n                    this.m_SetSkillBonuses = new A", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append(Integer.toHexString(c));\n      }\n      d = (c >> 8) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' +", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.Login)\n\t\t\t{\n\t\t\t\t// This is the login packet.\n\t\t\t\t// We need to check the password here, and if it's wrong, we need to kick the player.\n\t\t\t\t//", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           x = new double[N];\n            w = new double[N];\n            gq.gqgenerategausslegendre(N, ref info, ref x, ref w);\n            return;\n      -- ALGLIB --\n         Copyright 12.05.", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue[0],\n            fields={'display_name': 'test_' + category_queue[0]}\n        )\n        if len(category_queue) > 1:\n            self.create_subtree_for_delet", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                        + \"10^\" + (i * -1));\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertEquals(htmlPageAsset.getIdentifier(), newBundlePushedAssets.get(0));\n    }", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       Paging paging = getPaging(0, 100);\n\n        // As user 1: Create a document in My Files\n        String myFolderNodeId = getMyNodeId();\n        String fileName = \"file\" + RUNID + \".txt\";\n        Document", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           return obj != null;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    // ----------------------------------------------------------------------\n    // Testing the isLong(String) method\n    // ----------------------------------------------------------------------\n    @Test\n   ", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached to parent grappling part: \" + grapple);\n                                }\n                                else if (grapple.", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "\n    if res:\n        if replace:\n            self.unlink(cr, uid, [res[0]], context=context)\n        self.create(cr, uid, {\n            'model': model,\n            'key': key,\n            'name': name,\n           ", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setAction(int action) {\n            actionTL.", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tYesNoDialog = new ImagePath(102107, \"images/YesNoDialog.png\", new Integer(", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n        byte[] encoded = new byte[getEncodedLength(source, off, len, options)];\n\n        int i = 0;\n        for (int j = off; j < off + len; j += 3) {\n            byte[] b4 = new byte[4", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger u3 = q[0];\n\t\t\t\tBigInteger v3 = q[1];\n\t\t\t\tBigInteger u1 = u1;\n\t\t\t\tBigInteger v1 = v1;\n\t\t\t\tu1 = v1;", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t\t_abi_info.AddField (\"type\", typeof (Gst.MessageType), \"r\");\n", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (filter.accept(theFile)) {\n                    return theFile;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * @return the tab properties for the given class\n     */\n    public TabProps getTabProperties(", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁5: SortableHeader('tutorial_detail__tutorial__level__code', True, 'Level'),\n                6: SortableHeader('tutorial_detail__tutorial__tutorial_type__name', True, 'Type'),\n                7: SortableHeader", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[] s121 = new string[] { \"hello\" };\n            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s122 = new string[] { \"world\" };\n            string[][] ss1", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "\n            field_name = unique_check[0]\n            field = opts.get_field(field_name)\n            field_label = six.text_type(capfirst(field.verbose_name))\n            params['field'] = field_name\n            params['field_label", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\n    paramout.close()\n\nThis line is closing the file that was opened at the beginning of the program to write the report.\n\nTo fix the code, you should add the following lines before the next line of code:\n\n    # write parameter values\n    paramout = open(\"list", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n    for head in h.splitlines():\n        heads.append(head.strip())\n\n    if heads != op.repo.heads:\n        raise util.Abort(_('heads mismatch'))\n\n    # This is a placeholder.\n    # The real implementation will be done in", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n\n        ca_repr = literal_eval(cas_data_str)\n\nThis line of code is used to convert the cell attributes data from a string\nto a Python object. The `literal_eval()` function is used to parse the string\nrepresentation of the cell", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel (x, y);\n\t\t\t\t\tif (pixel.ToArgb() == cursor_pixel.ToArgb()) {\n\t\t\t\t\t\tcursor_bits[y * (width / 8) + x /", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the operatories that are flagged for Web Sched.\n\t\t\tforeach(long opNum in listWebSchedOpNums) {\n\t\t\t\tOperatory operatory=Operatories.GetOperatory(opNum);\n\t\t\t\t//", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3Collate( pColl, pMem1.z, pMem1.n, pMem2.z, pMem2.n );\n        return rc;\n      }\n      /* If one value is a blob and the other is a string, the blob is less", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "               data.Power[i] = packet.ReadInt32(\"Power\", indexes, i);\n\n                }\n                }\n            }\n            if (changesMask[130])\n            {\n                for (var i = 0; i < 6", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       seq = seqs[nidx]\n        seqarr = np.array(list(seq))\n        # enter each SNP \n        for snp in self.locsnps:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index[] indexes = indexByTagAndClass[tag];\n            if (indexes == null) {\n                indexes = new Index[allClasses.size()];\n                indexByTagAndClass[tag] = indexes;\n            }\n            int classCount = ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 0;\n            this.quoteLabel.Text = \"Quote of the day:\";\n            this.quoteLabel.TextAlign = System.Drawing.", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           data['recurrency'] = True\n            data['rrule_type'] = rule._freq\n            if rule._freq == 1:\n                data['interval'] = 1\n            else:\n                data['interval'] = rule._interval\n            if rule._count > ", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the prior row to the current row\n                Array.Copy(curr, prior, bytesPerRow);\n            }\n        }\n        ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return global::bnet.protocol.exchange_object_provider.ReportRefundRequest.DefaultInstance; }\n    }\n\n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n\n    public static pbd::MessageDescriptor Des", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        AApAnalAttribAccess.LoadViaAApDocumentDetail(MainDs, Row.ApDocumentId, ReadTransaction);\n                    }\n                }\n                AApSupplierAccess.LoadByPrimaryKey(MainDs, PartnerKey, ReadTransaction);\n               ", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (CanSeeReward)\n\t\t\t\t{\n\t\t\t\t\t// reward the player\n\t\t\t\t\tRewardPlayer();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void RewardPlayer()\n\t\t", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, key, 0, items.Length", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               if (AControlLabel != null)\n                {\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                }\n                ArgumentPanel.Controls.Add(AControl);\n                if (AAutomaticClearButton)\n                {\n                    Button", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define the relocations for the PowerPC architecture\nR_PPC64_REL_GOT_TLSGD = 0x10000000 + R_PPC64_GOT16\nR_PPC64_REL_GOT_TLS", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      td.header { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to complete\n\t\t\tif(!mReadDone.WaitOne(1000, false))", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n    def _query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf):\n        # ...\n\nThe line of code that needs to be added is:\n\n    metric = np.array([1.0] *", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightFirst_2()\n\t{\n\t\tString acn = \"1. Nf3\";\n\t\tGame game = game(null", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (Exception e)\n    {\n      return null;\n    }\n  }\n  /**\n   *  Draw the features of the given FeatureVector into the given Graphics\n   *  object.\n   *  @param g The object to draw into.\n   *  @", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t\tGeneral.Map.Map.AddSector(", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = parent_doc.translate(user, document_locale, based_on_rev)\n    except Document.TranslationError as e:\n        message = _lazy(u'%(error)s') % {'error': e}\n        context = {'message': message}\n       ", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n\n            // now we'll create a new table with the new dimensions\n            lNewWidths = new float[lTotalColumns];\n            lNewWidths[0] = widthPercentage;\n", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchBlendTree( Object unityObject )\n\t\t{\n\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t\tnode.Value.Nodes.Remove(trait);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Replace -InvulnerabilityUpgrade with InvulnerabilityUp", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\n```\nreturn self.__class__(values, key=self._key)\n```\n\nThis line of code creates a new instance of the SortedKeyList class with the updated list of values and the same key function as the original SortedList instance. The `__class__` attribute is", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize loaded state for a set of states.\n        This method is called by the :meth:`.Session.flush` method\n        after all objects have been loaded.  It is responsible for\n        finalizing the state", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221,", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "       return ToJson(result);\n    }\n    private string FormatLogData(IDictionary data, int indent = 0)\n    {\n        string result = \"\";\n        foreach (KeyValuePair<string, object> entry in data)\n        {\n            string key = entry.Key", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[BZip2Constants.MAX_BLOCK_SIZE + BZip2Constants.NUM_OVERSHOOT_BYTES];\n\t\t\tquadrant = new int[BZip2Constants.MAX_BLOCK_SIZE + BZip2Constants", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        //                        int a = Pop();\n                        //                        int b = Pop();\n                        //                        int c = Pop();\n                        //                        int d = Pop();\n                        //                        int e = Pop();\n                        //                        int f = Pop", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (iFile != null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\n\t\t\t// trackSegmentError is the error of the solution (max distance of all discarded points to the simplified path)\n\t\t\t// trackSegmentError is the error of the solution (max distance of all discarded points to the simpl", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(), B()> ByVal value As Object, <C(A1:=false, A2:=true), D()> ByRef __exception As Integer) As Integer{0}\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxQ\",\n                    Slot = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            newHouse.MoveToWorld(m_House.Location, m_From.Map);\n                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(getImage(), getFirstString(), getLastArg());\n\t\tplotID = plot.getID();\n\t}\n\tvoid showPlot() {\n\t\tif (plot==null)\n\t\t\tinterp.error(\"No plot defined\");\n\t", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if self.currentWindow.getProperty( \"useWidgetNameAsLabel\" ) == \"true\":\n                widgetName = xbmc.getInfoLabel( widgetName )\n            if widgetName is None or widgetName == \"\":\n                widgetName = selectedShortcut.getProperty( \"", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }\n    /**\n     * Encodes a portion of a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   G", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n    def run_command(self, cmd, input=None, sudo=False, shell=True,\n                    executable=None, cwd=None, env=None,\n                    stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                ", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i].Title [0] == c)\n\t\t\t\t\t\t\tSelected (Menus [", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
