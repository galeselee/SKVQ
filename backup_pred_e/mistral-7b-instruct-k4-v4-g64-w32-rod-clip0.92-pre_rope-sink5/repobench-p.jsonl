{"pred": "```\n\t\t\tb1.clear();\n```\n\nThis line of code clears the buffer `b1`, which means it resets the position, limit, and capacity of the buffer to their initial values. This is done so that the buffer can be reused to store new data.", "answers": ["\t\t\t\tBufferTools.returnBuffer(b1);\r"], "all_classes": null, "length": 2646}
{"pred": "\t\tself._combo_box = QComboBox()\n\t\tself._combo_box.setEditable(True)\n\t\tself._combo_box.currentIndexChanged.connect(self.on_combo_box_changed)\n\t\tlayout.addWidget(", "answers": ["\t\tself._caption_label.setMinimumWidth(100*gui_scale())"], "all_classes": null, "length": 2012}
{"pred": "\n    if frame.encoding:\n        flags |= frame.encoding\n\n    if frame.group_id:\n        flags |= frame.group_id\n\n    if frame.group:\n        flags |= frame.group\n\n    if frame.unsync:\n        flags |= 0x", "answers": ["    if isinstance(frame, TextFrame):"], "all_classes": null, "length": 1608}
{"pred": "self.sizer.Add(self.html_window, 1, wx.EXPAND | wx.ALL-wx.TOP, 5)\n\nThis line of code is adding the HTML window to the sizer of the FraisGardePanel class. The HTML window is used to display the", "answers": ["        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3291}
{"pred": "   public static AthenaGM plugin;\n\n\n    @Override\n    public void onEnable() {\n        plugin = this;\n        plugin.saveDefaultConfig();\n        plugin.getServer().getPluginManager().registerEvents(new Tracker(this), this);\n        plugin.get", "answers": ["    private ArenaHandler arenaHandler;"], "all_classes": null, "length": 3929}
{"pred": "               BeitragSammelLastschrift sammelLastschrift = new BeitragSammelLastschrift();\n                sammelLastschrift.setFaelligkeit(inputFaelligkeit.getDate());\n                sammelLastschrift.setBezeichnung", "answers": ["                BeitragSammelLastschrift sammelLastschrift;"], "all_classes": null, "length": 2526}
{"pred": "   private final Node bootstrapNode;\n    private final KadConfiguration config;\n    private final int attempts;\n    private int currentAttempt;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {", "answers": ["    private final Node bootstrapNode;"], "all_classes": null, "length": 3536}
{"pred": "   private final ServiceLoader<PathParserFactory> pathParserFactories = new DefaultServiceLoader<>();\n\n    public OpenAPIProcessor() {\n        super(SourceVersion.RELEASE_8);\n        registerParserFactory(SpringParserFactory.class);\n    }\n\n    @Override\n    public", "answers": ["    private final ServiceLoader serviceLoader = new DefaultServiceLoader();"], "all_classes": null, "length": 925}
{"pred": "\n    except Exception as e:\n      self._Fault(e)\n      raise\n\nThis code is part of a Python implementation for a messaging system called Scales. The code defines a class `SocketTransportSink` that represents a sink for transporting Thrift method calls over a socket. The", "answers": ["        err = TimeoutError()"], "all_classes": null, "length": 2130}
{"pred": "```\n            meteor_obj.jdt_ref = datetime2JD(datetime.datetime.utcfromtimestamp(frame_n*1.0/fps))\n```\n\nThis line sets the reference Julian date (JD) of the meteor observation to the", "answers": ["            jd = datetime2JD(filenameToDatetime(ff_name) + datetime.timedelta(seconds=float(frame_n)/fps))"], "all_classes": null, "length": 2640}
{"pred": "```\n            r[group] = {'spike_samples': samples[group],\n                       'features': self.features(self._waveforms,\n                                                  self._pcs),\n                       'masks': self._masks[group],\n                       'spike", "answers": ["            spikes = _concatenate(samples[group])"], "all_classes": null, "length": 2166}
{"pred": "```\n\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)\n```\n\nYou can modify the function", "answers": ["\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)"], "all_classes": null, "length": 2032}
{"pred": "       self.auth = Auth()\n        self.auth.startup()\n        self.account_id = self.auth.account_id\n        self.region_id = self.auth.region_id\n        self.client_id = self.auth.client_id\n        self", "answers": ["        self.auth = Auth()"], "all_classes": null, "length": 2174}
{"pred": "\n    def __getattr__(self, name):\n        if name in self.defs:\n            return self.defs[name]\n        elif self.vars[-1].get(name):\n            return self.vars[-1][name]\n        else:\n            raise AttributeError", "answers": ["        self._root = TypeVar[None]"], "all_classes": null, "length": 1186}
{"pred": "\n    KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n    EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.decodeBase64(PRIVATE_KEY.getBytes()));\n    privateKey = (RSAPrivateKey) keyFactory.", "answers": ["    final Verifier hmacVerifier = new HmacSHA256Verifier(SYMMETRIC_KEY);"], "all_classes": null, "length": 1353}
{"pred": " private final Map<String, ProgressMonitorListener> listeners = new LruCache<>(DEFAULT_CACHE_SIZE);\n\n  private final ProgressFormat format;\n\n  public Slf4jFactory() {\n    this(Configuration.getInstance());\n  }\n\n  public Slf4jFactory", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 2514}
{"pred": "\n    class InvalidLSI(BaseModel):\n        id = Column(UUID, hash_key=True)\n        index = LocalSecondaryIndex(\n            name=\"index\",\n            hash_key=Column(UUID),\n            range_key=Column(UUID),\n            read_units", "answers": ["            index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")"], "all_classes": null, "length": 2269}
{"pred": "```\n            alignment_info = run_mp(\n                compile_information_func,\n                jobs,\n                self.log_directory,\n                return_info=True,\n            )\n```\n\nThis line of code runs the `compile_information_func", "answers": ["                compile_information_func, jobs, self.working_log_directory, True"], "all_classes": null, "length": 3046}
{"pred": "\n    def process_element_descriptor(self, state, bit_operator, ed):\n        \"\"\"\n        Process an Element Descriptor\n\n        :param state: The state of the processing.\n        :param bit_operator: The bit operator for read/write bits.\n        :param ed", "answers": ["            elif member_type is FixedReplicationDescriptor:"], "all_classes": null, "length": 1868}
{"pred": "   public TypesApi getTypesApi() {\n        return typesApi;\n    }\n\n    @Override\n    public DataStore getLocalDataStore() {\n        return localDataStore;\n    }\n\n    @Override\n    public KryptnosticClient newClient() throws ResourceNotFoundException", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 2334}
{"pred": "\n@method('node()', label='node test')\ndef nud_node_test(self):\n    if self.parser.next_token.symbol != '(':\n        raise self.error('XPTY0004', 'expected \"node()\"')\n    self", "answers": ["    XPathFunction.nud(self)"], "all_classes": null, "length": 3894}
{"pred": "```python\nelif _type['type'] == LINK:\n    record_clusterID = self._decode_field( _type['struct'][0] )\n    record_position = self._decode_field( _type['struct'][1] )\n    return OrientRecordLink( record", "answers": ["        elif _type['type'] == LINK:"], "all_classes": null, "length": 1740}
{"pred": "account = account_for_tumblr_userinfo(userinfo, person=person)\n\nThis line of code calls the function `account_for_tumblr_userinfo` with the user information obtained from Tumblr and the current person (if any). The function creates", "answers": ["    account = account_for_tumblr_userinfo(userinfo, person=person)"], "all_classes": null, "length": 1774}
{"pred": "       ips.append(IPAddress(jsoned, self))\n        return ips\n\n    def get_ip(self, ip_id):\n        data = self.call_api(\"ips/%s\" % ip_id)\n        return IPAddress(data, self)\n\n   ", "answers": ["            ip = IPAddress(jsoned, self)"], "all_classes": null, "length": 2464}
{"pred": "       registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new MarshalledResponseHandler<List<String>>(STRING_ARRAY));\n        registry.put((byte) (GET_MBEAN_COUNT ^ RESPONSE_MASK), new MarshalledResponse", "answers": ["        registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new StringArrayResponseHandler());"], "all_classes": null, "length": 824}
{"pred": "       registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);\n    }\n\n    public void registerCallAction(CallAction action, int id)\n    {\n        actions.put(id, action);\n    }\n\n   ", "answers": ["        registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);"], "all_classes": null, "length": 1561}
{"pred": "       mRecyclerViewSearch.setLayoutManager(new LinearLayoutManager(this));\n        mRecyclerViewSearch.addItemDecoration(new RecycleViewDivider(this, LinearLayoutManager.VERTICAL));\n        mRecyclerViewSearch.setOnLoadMore", "answers": ["        StatusBarUtil.immersive(this);"], "all_classes": null, "length": 2979}
{"pred": "           varray[i] = f.apply(MatlabStruct.create().set(rarray[i], MatlabScalar.create(i)));\n        }\n        return varray;\n    }\n\n    protected String buildFEval(String function, String[] varray,\n                                ", "answers": ["            String safe = f.apply(new MatlabString(rarray[i]));"], "all_classes": null, "length": 2714}
{"pred": "   private int[] imgDimensions = new int[2];\n\n    public PostView(Context context) {\n        super(context);\n        init(context);\n    }\n\n    public PostView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n       ", "answers": ["    public Prefs prefs;"], "all_classes": null, "length": 3533}
{"pred": "               install_and_run(toolsdir, app_path, package, launcher, True)\n\n                # Install APK\n                # Install APK and Run it\n                # Install APK and Run it\n                # Install APK and Run it\n                #", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 1743}
{"pred": "\tprivate TestResourceProvider testResourceProvider;\n\tprivate TestConceptService testConceptService;\n\tprivate TestDescriptionService testDescriptionService;\n\tprivate TestRelationshipService testRelationshipService;\n\n\t@Before\n\tpublic void setup() throws RuleExecutorException {\n\t\tResourceManager", "answers": ["\tprivate TestConceptService conceptService;"], "all_classes": null, "length": 3889}
{"pred": "====================\n\nadmin.site.register(Membre, MembreAdmin)\n\nThis line of code registers the Membre model with the MembreAdmin class,\nwhich is defined in the Administration/forms.py file.\nThis class is used to define the behavior of the Membre model in the", "answers": ["@admin.register(Switchlink)"], "all_classes": null, "length": 2184}
{"pred": "\t\t\tTickHandler.EVENT_BUS.post(e);\n\t\t\tif (e.hasResult())\n\t\t\t\tyd = e.getResult().floatValue();\n\t\t}\n\t\tif (this.keys[5])\n\t\t\txa = 0.", "answers": ["\t\t\tTickHandler.EVENT_BUS.postEvent(e);"], "all_classes": null, "length": 3452}
{"pred": "\tprivate NetworkManager networkManager = null;\n\tprivate DataParser dataParser = null;\n\tprivate Cache cache = null;\n\tprivate LogManager logManager = null;\n\n\t/**\n\t * Builds an APIWrapper instance using the given endpoint URL, jurisdiction\n\t * id and format", "answers": ["\tprivate NetworkManager networkManager = new HTTPNetworkManager(Format.XML);"], "all_classes": null, "length": 3104}
{"pred": "       registry.put(IS_REGISTERED, new IsRegisteredHandler());\n        registry.put(NOTIFICATION, new NotificationHandler());\n        registry.put(NOTIFICATION_FILTER, new NotificationFilterHandler());\n        registry.put(OBJECT, new ObjectHandler());\n       ", "answers": ["        registry.put(IS_REGISTERED, new IsRegisteredHandler());"], "all_classes": null, "length": 931}
{"pred": "```\ncompute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)\n```\n\nThis line of code computes and updates the conflicts for the assembly points in the `merged_assembly_points", "answers": ["    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)"], "all_classes": null, "length": 1723}
{"pred": "\t\t\t\t\tp.setAllowFlight(true);\n\t\t\t\t\tp.setFlying(true);\n\t\t\t\t\tp.setFoodLevel(20);\n\t\t\t\t\tp.setHealth(20);\n\t\t\t\t\t", "answers": ["\t\t\t\t\tp.sendMessage(ChatColor.DARK_PURPLE + Main.locale.getMessage(\"info.personal.spectating\")); // tell them"], "all_classes": null, "length": 3710}
{"pred": "\n```\nclass SequentialPortfolioConsumerType(PortfolioConsumerType):\n```\n\nThis line defines a new class called `SequentialPortfolioConsumerType` that is a subclass of `PortfolioConsumerType`. This means that it inherits all the properties and methods of `Portfolio", "answers": ["class PortfolioConsumerFrameType(FrameAgentType, PortfolioConsumerType):"], "all_classes": null, "length": 3454}
{"pred": "   if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_AVD\":\n        # Get AVD Path\n        avd_path = os.path.join(settings.BASE_DIR, 'DynamicAnalyzer/avds/')\n       ", "answers": ["                    refresh_avd(adb, settings.AVD_PATH, settings.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1547}
{"pred": "```\n    elif args.subcommand == \"history\":\n        print_history(args)\n```\n\nThis code checks if the subcommand is \"history\" and if it is, it calls the `print_history` function with the `args` argument. The `print_history`", "answers": ["            update_global_config(args)"], "all_classes": null, "length": 1540}
{"pred": "       CreditCard newCard = new CreditCard(alias, bankName, number, currency, type, cardExpirationCal, closing, due, selectedCreditCardBackground, null);\n\n        newCard.setCreditLimit(firstCreditPeriodLimit);\n\n        mCreditCardList.", "answers": ["        ExpenseManagerDAO dao = new ExpenseManagerDAO(this);"], "all_classes": null, "length": 3790}
{"pred": "\n    private AdRetriever adRetriever;\n\n    /**\n     * callback to be notified when ad is received\n     */\n    private RetrieveAdCallback retrieveAdCallback;\n\n    /**\n     * information to use when retrieve cue points from server\n     */\n   ", "answers": ["    private AdRetriever adRetriever;"], "all_classes": null, "length": 2715}
{"pred": "\n    def test_bv2pysmt_ite(self):\n        bv2pysmt = functools.partial(_bv2pysmt, env=self.env)\n        fm = self.env.formula_manager\n        tm = self.env", "answers": ["        self.assertEqual(bv2pysmt(ZeroExtend(bx, 2)), zext(px, 2))"], "all_classes": null, "length": 2534}
{"pred": "\t\tlinkers.add(new NodeToNode());\n\t\tlinkers.add(new GeometryToNode());\n\t\tlinkers.add(new MaterialToGeometry());\n\t\tlinkers.add(new LightToGeometry());\n\t\tlinkers.add(new Skeleton", "answers": ["\t\tlinkers.add(new AnimationToSpatial());"], "all_classes": null, "length": 1043}
{"pred": "\n    connect(DYNAMIC_TOOL_DIR)\n\nThis line of code is calling the `connect` function from the `android_dyn_shared.py` module in the `DynamicAnalyzer` package. The `connect` function is responsible for connecting to the Android device or emulator", "answers": ["    Proxy('', '', '', '')"], "all_classes": null, "length": 1562}
{"pred": "\nclass TestObject(unittest.TestCase):\n\n    def setUp(self):\n        self.sampleable = Sampleable()\n        self.sampleable.name = \"bar\"\n\n    def test_sampleable_get_sample(self):\n        self.sampleable.sample", "answers": ["        self.assertIsInstance(Object.factory(\"none\", \"v1\"), ObjectNone)"], "all_classes": null, "length": 1381}
{"pred": "\n    public Observable<ApiStatus> apiStatus() {\n        return apiService.apiStatus(apiKey);\n    }\n\n    /**\n     * Returns a list of all available protocols.\n     */\n    public Observable<List<Protocol>> protocols() {\n        return apiService", "answers": ["    public Observable<ApiStatus> info() {"], "all_classes": null, "length": 2260}
{"pred": "\n                StoryDetailActivity.launch(getActivity(), mAdapter.getData().get(i).getId(), view.findViewById(R.id.iv_story_head));\n\n                }\n            }\n        });\n    }\n\n    @Override\n    public void onRefresh", "answers": ["                        RibaoStoryBeanDao.Properties.Id.eq(((RibaoStoryBean) mAdapter.getItem(i)).getId()))) {\r"], "all_classes": null, "length": 1936}
{"pred": "               security_role='CON',\n                security_identification_details=SecurityIdentificationDetails(\n                    identified_role='MS',\n                    cid=bytes.fromhex('000000000000000000000", "answers": ["                security_role=SecurityRole.ISS,"], "all_classes": null, "length": 1417}
{"pred": "def app(f, args):\n    \"\"\"Applies a function to a list of arguments.\n\n    Arguments:\n    - `f`: an expression denoting the function\n    - `args`: a list of arguments\n    \"\"\"\n    return fold_over(app_expr,", "answers": ["    return Box(triv(), expr, ty)"], "all_classes": null, "length": 1771}
{"pred": "       StepCounterCollector.createDBStorage(deviceID);\n    }\n\n\n    public void writeDBStorage(String tableName, ContentValues newValues)\n    {\n        SQLiteDatabase db = this.getWritableDatabase();\n        db.insert(tableName, null, new", "answers": ["        StepCounterCollector.createDBStorage(deviceID);"], "all_classes": null, "length": 3430}
{"pred": "class URI(Signature):\n    __typeid__ = 1\n    __subtype__ = 1\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __repr__(self):\n        return '<URI: %r>' % self.uri", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   private CaptureTime time;\n    private CaptureFrame frame;\n    private FrameImporter importer;\n    private FrameExporter exporter;\n    private boolean enabled;\n\n    public CaptureSession(MinemaConfig cfg) {\n        super(cfg);\n\n        // register", "answers": ["    private CaptureTime time;"], "all_classes": null, "length": 2248}
{"pred": "\n    assert u2.dimensions == length / time / length\n\nThis line of code is incorrect. The dimensions of the unit `u2` should be\n`length * time^-1 * length^-1`, not `length / time / length`.\n\nHere is the corrected line of code:", "answers": ["    assert u2.dimensions == rate"], "all_classes": null, "length": 2042}
{"pred": "       write_tc_script(sys.argv[0], command_history, filename_suffix=\".sh\")\n\nThis line of code writes the command history to a shell script file with the name of the current script file and a \".sh\" suffix. The script file is written in the current working", "answers": ["            Tc.Command.TCSHOW, command_history, filename_suffix=\"-\".join(options.device)"], "all_classes": null, "length": 1874}
{"pred": "     throw new IOException(Language.get(\"api.track.NoWentryID\"));\n    }\n    Map<String, String> params = new HashMap<>();\n    params.put(\"wentry_id\", getWentryID());\n    params.put(\"quality\", quality.toString());\n   ", "answers": ["      throw new IOException(Language.get(\"track.InvalidWentryID\"));"], "all_classes": null, "length": 2705}
{"pred": "       return new JsonObjectRequest(url);\n    }\n\n    /**\n     * Create a JSONObject type handle, custom handle method, method from {@link RequestMethod}.\n     *\n     * @param url           such as: {@code http://www.nohttp.net}.\n     *", "answers": ["        return new JsonObjectRequest(url);"], "all_classes": null, "length": 3108}
{"pred": "\t\t\ttypeSpecBuilder.addSuperinterface(className);\n\t\t}\n\n\t\treturn typeSpecBuilder;\n\t}\n\n\tpublic TypeSpec buildClass() {\n\t\treturn build().build();\n\t}\n\n\tpublic static class AnalysisTransformation {\n\n\t\t", "answers": ["\t\t\ttypeSpecBuilder.superclass(type(className, T));"], "all_classes": null, "length": 2674}
{"pred": "               path = joinPaths(relativePathToPattern, fileBean.getSource());\n                parentPath = joinPaths(relativePathToPattern, fileBean.getSource().replaceAll(\"\\\\*\", \"\"));\n            } else {\n                path = joinPaths(fileBean.getSource", "answers": ["                path = sepAtStart(normalizePath(joinPaths(relativePathToPattern, patternPathToFile, source.getName())));"], "all_classes": null, "length": 2616}
{"pred": "\t@Autowired\n\tAlertRepository alertRepository;\n\n\tpublic void loadData() throws IOException {\n\t\t// load the data from the CSV files\n\t\tloadCustomers();\n\t\tloadProducts();\n\t\tloadTransactions();\n\t\tloadMarkups();\n\t\t", "answers": ["\tAlertRepository alertRepository;"], "all_classes": null, "length": 1393}
{"pred": "\n    return render_to_response('redsolutioncms/custom.html', {\n        'cms_settings': cms_settings,\n    }, context_instance=RequestContext(request))\n\n    This line of code renders the custom.html template and passes the `cms", "answers": ["                except AlreadyMadeException:"], "all_classes": null, "length": 1433}
{"pred": "```python\nself._append( ( FIELD_INT, self._tx_id ) )\n```\nThis line is appending the transaction id to the message. The transaction id is an integer that identifies the current transaction.\n\nThe `FIELD_INT` is a constant defined in the", "answers": ["        self._append(( FIELD_BYTE, TX_COMMIT_OP ))"], "all_classes": null, "length": 3275}
{"pred": "\tprivate Connector connector;\n\tprivate ConnectorComments connectorComments;\n\tprivate ConnectorWorkLog connectorWorklog;\n\tprivate ImagesCacher imagesCacher;\n\tprivate Issue issue;\n\n\tpublic ViewsForTaskDetails(TaskDetailsActivity activity, Issue issue", "answers": ["\tIssue task;"], "all_classes": null, "length": 3252}
{"pred": "   placeholderReplacer = new PlaceholderReplacer<>(typeResolverRegistry);\n    commentProcessorRegistry = new CommentProcessorRegistry(placeholderReplacer);\n  }\n\n  public void setTypeResolverRegistry(TypeResolverRegistry typeResolverRegistry) {\n    this.typeResolverRegistry = typeResolver", "answers": ["    for (Map.Entry<Class<?>, ITypeResolver> entry : config.getTypeResolvers().entrySet()) {"], "all_classes": null, "length": 3197}
{"pred": "\nself._append( ( FIELD_STRING, self._user ) )\n\nThis line of code is appending the user name to the message header. The user name is a string and it is being appended as a field in the message header. The field type is STRING and the bytes required to", "answers": ["        self._append( ( FIELD_STRINGS, [NAME, VERSION] ) )"], "all_classes": null, "length": 1700}
{"pred": "def test_fade_in_fade_out(self):\n    s, Hz = sHz(rate=6)\n    L = fadein(2 * s)\n    L += line(2 * s, 1, 3)\n    L += fadeout(2", "answers": ["    L = fadeout(2 * s)"], "all_classes": null, "length": 2605}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node)", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 2828}
{"pred": "\n    return redirect(get_login_redirect(self.request.POST.get(REDIRECT_FIELD_NAME)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            url = get_login_redirect("], "all_classes": null, "length": 1277}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\n\t\tEmployee employee = employeeRepository.findByAccountId(account.getId());\n\nThis line of code is trying to find an employee by the account id. If the account id is not found in the database, it will throw a NoResultException. To handle this exception, you can use a", "answers": ["\t\tEmployee employee = null;\r"], "all_classes": null, "length": 3898}
{"pred": "class ByteFlag(Signature):\n    __flag__ = None\n\n    @sdproperty\n    def flag(self):\n        return self._flag\n\n    @flag.register(int)\n    @flag.register(CompressionAlgorithm)\n    def flag_int(self, val):", "answers": ["    @flags.register(HashAlgorithm)"], "all_classes": null, "length": 1390}
{"pred": "class TestOr(unittest.TestCase):\n    def test_can_not_be_initialized_with_zero_arguments(self):\n        self.assertRaises(TypeError, Or)\n\n    def test_commutativity(self):\n        a = Match(\"a\", \"", "answers": ["        self.assertRaises(TypeError, Or)"], "all_classes": null, "length": 2542}
{"pred": "\tprivate CommunityService communityService;\n\tprivate BoardService boardService;\n\tprivate CommentService commentService;\n\n\t@Autowired\n\tpublic void setCommunityService(CommunityService communityService) {\n\t\tthis.communityService = communityService;\n\t}\n\n\t@Autowired", "answers": ["    CommunityService communityService;"], "all_classes": null, "length": 1818}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Save user's links\n            link_formset = LinkFormSet(request.POST, request=request)\n            if link_formset.is_valid():\n                link_formset.", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))\n\nThis line of code is testing the function `is_not_ascii` with a string that is the English version of the 16-month reminder message.", "answers": ["        self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))"], "all_classes": null, "length": 1549}
{"pred": "\t\tv, f = convert_fs(opts.inputfreesurfer[0])\n\t\tif opts.outputply:\n\t\t\tsave_ply(v, f, opts.outputply)\n\t\telif opts.outputfs:\n\t\t\tsave_fs(v", "answers": ["\t\tv,f = convert_fs(str(opts.inputfreesurfer[0]))"], "all_classes": null, "length": 2047}
{"pred": "\n    def __Get(self):\n        \"\"\"Get the least loaded node from the heap.\"\"\"\n        if not self._heap:\n            raise ValueError(\"No nodes in the heap\")\n        n = self._heap[0]\n        self._heap[0] = self._heap[-1]", "answers": ["      msg.properties[MessageProperties.Endpoint] = n.endpoint"], "all_classes": null, "length": 1863}
{"pred": "\n    @staticmethod\n    def _decode_field(field):\n        \"\"\"\n        :param field: object\n        :return: mixed\n        \"\"\"\n        t, _ = field\n        _content = None\n\n        if t['type'] == INT:\n            _content = struct", "answers": ["        elif t['type'] == BOOLEAN:"], "all_classes": null, "length": 1727}
{"pred": "\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO", "answers": ["\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};"], "all_classes": null, "length": 2783}
{"pred": "\n    def test_set_and_get(self):\n        \"\"\"\n        Tests that :meth:`set` and :meth:`get` work as expected.\n        \"\"\"\n        ffi, library = _ffi()\n        loader = Loader()\n\n        loader.set", "answers": ["        mock = patch.object(Loader, \"cache\", None)"], "all_classes": null, "length": 2141}
{"pred": "\n        self.velocity_schema = VelocitiesSchema()\n\n        super(VelocitiesResource, self).__init__(self.velocities,\n                                                 self.velocity_schema)\n\nclass OrientationResource(ObjectResource):\n    \"\"\"The Orientation", "answers": ["        self.velocities_schema = VelocitiesSchema()"], "all_classes": null, "length": 1623}
{"pred": "               hasJsonPath(\"hits.total\", equalTo(records.size())));\n\n        // check if all fields are present\n        for (SourceRecord record : records) {\n            String query = \"http://localhost:9200/\" + mapping.getIndex() + \"/\"", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       ImageDialog imageDialog = new ImageDialog(this);\n        imageDialog.addBitmap(bitmap);\n        imageDialog.addTitle(getString(R.string.notification));\n        imageDialog.show();\n        String phoneNum = Tools.getTelNum(result);\n        if (!", "answers": ["        ImageDialog dialog = new ImageDialog(this);"], "all_classes": null, "length": 3804}
{"pred": "   private final InputProcessor inputProcessor = new InputMultiplexer(creationInputProcessor, editionInputProcessor, testInputProcessor);\n\n    public RigidBodiesScreen(Canvas canvas) {\n        this.canvas = canvas;\n        this.drawer = new RigidB", "answers": ["    private final List<Label> labels = new ArrayList<Label>();"], "all_classes": null, "length": 3762}
{"pred": "       .castRepositoryModule(new CastRepositoryModule())\n        .moviesRepositoryModule(new MoviesRepositoryModule())\n        .build();\n    }\n\n    public ApplicationComponent getApplicationComponent() {\n        return applicationComponent;\n    }\n\n    public BrowseMoviesComponent get", "answers": ["                .castRepositoryModule(new CastRepositoryModule())"], "all_classes": null, "length": 785}
{"pred": "           renderable = SVGGroup(self, e, parent)\n\n            if renderable.id:\n                self.path_lookup[renderable.id] = renderable\n        elif e.tag.endswith('defs'):\n            renderable = SVGDefs(", "answers": ["            renderable = SVGGroup(self, e, parent)"], "all_classes": null, "length": 1523}
{"pred": "           // FragmentObservable<SearchContactFragment.DataClass> obs = ObservableRegistry.getObservable(SearchContactFragment.class);\n            // obs.register(new SearchContactFragment());\n            //obs.notifyFragment(new ImageClass(profilePicture, user));\n            //obs.", "answers": ["            FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs ="], "all_classes": null, "length": 2784}
{"pred": "def print_app(expr):\n    \"\"\"Takes an application and prints it in the following manner:\n    if the application is of the form (..(f a0)... an), print\n    f(a0,...,an), or (a0 f a1) if f is inf", "answers": ["        root, args = root_app(expr)"], "all_classes": null, "length": 1696}
{"pred": "====================\n\ndef check(node, env):\n    if isinstance(node, (Number, String, Symbol, Placeholder)):\n        return node\n    elif isinstance(node, Tuple):\n        return Tuple(check(i, env) for i in node.values)\n    elif", "answers": ["LET_TYPE = Func[[__var.bindings, __var.expr], __var.result]"], "all_classes": null, "length": 1468}
{"pred": "class RegistrationView(ConfirmationMixin, XMPPAccountView):\n    purpose = PURPOSE_REGISTER\n\n    def form_valid(self, form):\n        try:\n            user = User.objects.create_user(\n                username=form.cleaned_data['", "answers": ["    form_class = RegistrationForm"], "all_classes": null, "length": 1292}
{"pred": "\t@Autowired\n\tprivate UpdateProvider updateProvider;\n\n\t@Autowired\n\tprivate DeleteProvider deleteProvider;\n\n\t@Autowired\n\tprivate InsertItem insertItem;\n\n\t@Autowired\n\tprivate InsertItemProvider insertItemProvider;\n\n\t@Autowired\n\tprivate DataSource dataSource", "answers": ["\tprivate InsertItem insertItem;\r"], "all_classes": null, "length": 917}
{"pred": "\n    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {\n        return assertThat(result(whenStep));\n    }\n\n    public static AbstractCharacterAssert<?> resultOf(CheckedCharacterSupplier whenStep) {\n        return assertThat(result(whenStep));", "answers": ["    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {"], "all_classes": null, "length": 1467}
{"pred": "\n```python\nclass User(BaseModel):\n    id = Column(String, hash_key=True)\n    email = Column(String)\n    name = Column(String)\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n    if base_name == 'V':\n        bases.append(vertex)\n\nThis line of code is checking if the base class name is 'V', which is the name of the base class for vertexes in the OrientDB schema. If it is, it adds the vertex base class to", "answers": ["            is_edge = bases and bases[0].decl_type == DeclarativeType.Edge"], "all_classes": null, "length": 3757}
{"pred": "\n  if isinstance(visitor, BytecodeVisitor):\n    visitor.visit(self.bytecode, self.code)\n  elif isinstance(visitor, ModuleVisitor):\n    visitor.visit(self.main_module)\n  else:\n    for decl in self.all_decl", "answers": ["    if isinstance(visitor, BytecodeVisitor):"], "all_classes": null, "length": 2071}
{"pred": "\n    bind_column(NotAModel, \"other\", column)\n\n\ndef test_bind_column():\n    \"\"\"bind_column adds a column to a model\"\"\"\n    class MyModel(BaseModel):\n        class Meta:\n            pass\n\n    column = Column(String,", "answers": ["        bind_column(NotAModel, \"c\", column)"], "all_classes": null, "length": 2265}
{"pred": "       LinkedEdgeTest.class,\n        LinkedVertexTest.class,\n        ManyToManyTest.class,\n        ManyToManyEdgeTest.class,\n        ManyToOneTest.class,\n        MultiPropertiesTest.class,\n        PropertyTest.class,\n        VertexPropertyTest", "answers": ["        LinkedEdgeTest.class,"], "all_classes": null, "length": 2012}
{"pred": "\n    def fetch_response(self):\n        \"\"\"\n        Fetch the response from the server\n        \"\"\"\n        self._append(FIELD_BYTE)  # payload-status\n        return super(TransactionCommitMessage, self).fetch_response()[0]\n\nYou can leave it as it", "answers": ["        elif isinstance(operation, RecordDeleteMessage):"], "all_classes": null, "length": 3043}
{"pred": "   StationSeed seed = new StationSeed(track);\n    Station station = getApi().getStationApi().create(seed, \"TestStation\", false);\n    assertNotNull(station);\n    assertNotNull(station.getName());\n    assertNotNull(station.getId());\n    List<", "answers": ["    assume(track);"], "all_classes": null, "length": 3038}
{"pred": "       // dMeta.interval.expandIntervalByDay(62);\n        dMeta.filterSegments(broker.getSegmentsInRange(dMeta.dataSource, dMeta.interval));\n        dPgm.print(printToConsole);\n        return overlord.fire", "answers": ["        Interval expandedInterval = dMeta.interval.expandEndTimeByDay(62);"], "all_classes": null, "length": 3924}
{"pred": "       startGameCommand.setFromUser(UserSession.getInstance().getUsername());\n        networkInterface.sendMessage(startGameCommand.serialize());\n        isGameStarted = true;\n    }\n\n    public void sendBombExplosion(BombModel bombModel, World world", "answers": ["        startGameCommand.setFromUser(UserSession.getInstance().getUsername());"], "all_classes": null, "length": 6404}
{"pred": "class Movie(Video, Playable, AdvancedSettingsMixin, ArtMixin, PosterMixin, RatingMixin, SplitMergeMixin, UnmatchMatchMixin,\n                                                                                                                     CollectionMixin,\n                                                                                                                     CountryMixin,", "answers": ["        CollectionMixin, CountryMixin, DirectorMixin, GenreMixin, LabelMixin, ProducerMixin, WriterMixin):"], "all_classes": null, "length": 5015}
{"pred": "       OhaBackupHelper.IOhaBackupHelper {\n\n    private static final int LOADER_ID_ENERGY_USE_DAY = 1;\n    private static final int LOADER_ID_ENERGY_USE_BILL = 2;\n    private static final", "answers": ["        OhaRestoreDatabaseFragment.IOhaRestoreDatabaseFragment, SwipeRefreshLayout.OnRefreshListener {"], "all_classes": null, "length": 5219}
{"pred": "       Require require = method.getAnnotation(Require.class);\n        for (Class<? extends Constraint> constraint : require.value()) {\n          key.withConstraint(constraint, require.invert());\n        }\n      }\n\n      // If a default value is provided, add it", "answers": ["        for (Class<? extends Constraint> constraint : method.getAnnotation(Require.class).value()) {"], "all_classes": null, "length": 4522}
{"pred": "\tprivate javax.swing.JComboBox<String> selectionComboBox;\n\n\t/**\n\t * Creates new form Consensus\n\t */\n\tpublic Consensus(XProtTestView mainFrame, TreeFacade treeFacade,\n\t\t\tModel[] models, Alignment alignment)", "answers": ["\tprivate TreeFacade facade;"], "all_classes": null, "length": 6293}
{"pred": "   img = states.ImageState(objects, p, i, b, off)\n\n    # 3. background\n    bkg = np.zeros(img.shape)\n    bkg[slab.get_values(comp.param_positions())] = BKG", "answers": ["    mdl = models.ConfocalImageModel()"], "all_classes": null, "length": 4416}
{"pred": "       return self._primary_file.endswith(('.yaml', '.gaml'))\n\n    def reset_aux_files(self):\n        \"\"\"\n        Reset all auxiliary files.\n        \"\"\"\n        self.set_gelfilepath(self._primary_file)\n       ", "answers": ["        return filename_is_yaml(self._primary_file)"], "all_classes": null, "length": 5914}
{"pred": "\t\t\t\t\tSpatialOrdering.MIXED_MODE);\n\t\t\t\n\t\t\tclassfier.classify(chunkList);\n\n\t\t}\n\t\t\n\t}\n\n\tpublic void renderImageOutlines(LapdfDocument document, File out", "answers": ["\t\t\t\t\tSpatialOrdering.COLUMN_AWARE_MIXED_MODE);"], "all_classes": null, "length": 7328}
{"pred": "\n```java\n    void inject(KioskModeHandler kioskModeHandler);\n```\n\nThis line of code is injecting the `KioskModeHandler` class into the `HomerPlayerApplication` instance. The `KioskModeHandler` class is responsible for managing", "answers": ["    void inject(KioskSettingsFragment fragment);"], "all_classes": null, "length": 6924}
{"pred": "\t\tFileInputStream fis = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(casePath + \"CaseLog.xml\");\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(fis));\n\t\t\tStringBuilder sb = new", "answers": ["\t\txstream.alias(\"SystemDateTimeModule\", SystemDateTimeModule.class);"], "all_classes": null, "length": 6491}
{"pred": "\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t\n\t@RequestMapping(value = \"/dashboard\", method = RequestMethod.", "answers": ["\tprivate SubmissionServices submissionServices;"], "all_classes": null, "length": 6104}
{"pred": "       return so(size=size.value, unit=unit.value)\n\n        #: The default number of channels for newly opened sounds.\n        #:\n        #: This is the number of channels that will be used when a sound is\n        #: opened with :py:attr:`", "answers": ["        return so(size=size.value, unit=TIMEUNIT(unit.value))"], "all_classes": null, "length": 5131}
{"pred": "           public void handleResponse(FiComRequest request, FiComResponse response) {\n                System.out.println(\"Received response: \" + response);\n                System.out.println(\"PersonID attributes: \" + response.getPersonIdAttributes());\n                System.out.println(\"", "answers": ["            public void onResponse(final FiComRequest req, final FiComResponse resp) {"], "all_classes": null, "length": 7178}
{"pred": "\t\telif type(obj) is Part:\n\t\t\treturn get_icon(\"part\")\n\nThis line checks if the object is of type Part, and if so, it returns the icon associated with a part. The icon is returned as a PyQt5 QIcon object, which is a type", "answers": ["\t\telif type(obj) is PartView:"], "all_classes": null, "length": 6610}
{"pred": "           alignment_info = {}\n            for args in jobs:\n                alignment_info.update(compile_information_func(*args))\n\n        self.logger.debug(f\"Compiled alignment information in {time.time() - compile_info_begin} seconds\")\n\n        self", "answers": ["            alignment_info = run_non_mp("], "all_classes": null, "length": 4716}
{"pred": "   yield ServiceManager(bigip_proxy, partition, schema)\n\n\n@pytest.fixture\ndef ltm_config():\n    return {\n        'virtualServers': [\n            {\n                'name': 'test-virtual',\n                'partition': 'Common", "answers": ["    service_mgr = ServiceManager("], "all_classes": null, "length": 5986}
{"pred": "\n\tprivate SaveFile saveFile;\n\n\tpublic MatchPanel() {\n\t\tsetLayout(new BorderLayout());\n\t\tsetPreferredSize(new Dimension(1200, 600));\n\t\tsetBackground(Enums.darkgreen);\n\n\t", "answers": ["\tprivate SaveFile saveFile;"], "all_classes": null, "length": 4523}
{"pred": "\n    def initialize_jobs(self) -> None:\n        \"\"\"\n        Initialize the corpus's Jobs\n        \"\"\"\n        self.log_info(\"Setting up training data...\")\n        if len(self.speakers) < self.num_jobs:\n            self", "answers": ["    def add_file(self, file: File) -> None:"], "all_classes": null, "length": 6234}
{"pred": " @POST(\"sj/v2.5/plentries/shared\")\n  Call<SharedPlaylistEntryListResult> listSharedPlaylistEntries(\n      @Body SharedPlaylistRequest request, @Header(\"X-Device-ID\") String androidID);\n\n  @POST(\"", "answers": ["  Call<MutationResponse> batchCall(@Url String path, @Body Mutator mutator);"], "all_classes": null, "length": 5032}
{"pred": "url(r'^(?P<release_slug>[\\w\\-\\+]+)/$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),\n\nThis line of code defines a URL pattern for the TranStatusReleaseView class. The pattern matches a URL", "answers": ["    url(r'^view/(?P<release_branch>[\\w\\-\\+]+)$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),"], "all_classes": null, "length": 5226}
{"pred": "           // Get the Signing Certificate either with a ProfileQuery, or a dummy SignatureRequest\n            X509CertificateChain certChain = getSigningCertificate();\n            if (certChain == null) {\n                System.err.println(\"No signing certificate found.\");\n                return", "answers": ["            X509CertificateChain chain = null;"], "all_classes": null, "length": 4403}
{"pred": "\n    validate_key_condition(model, index, key)\n\nThis line of code will raise an exception because the key condition is not valid for the hash key.\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_", "answers": ["    with pytest.raises(InvalidSearch):"], "all_classes": null, "length": 4644}
{"pred": "\n        for title, level, pagenum in outline_contents:\n            if level == 1:\n                #start a new section\n                if chapter:\n                    contents.append(empty_section_tmpl % ('\\n'.join(contents)))\n                    contents.", "answers": ["        localise_number = get_number_localiser(self.page_number_style)"], "all_classes": null, "length": 4641}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        DatabaseManager.INSTANCE.getChatDAO().update(chat);\n                        fillInfoView();\n                    }\n                }\n        );\n        resetStatus.setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick", "answers": ["                        new UpdateTask<>(DatabaseManager.INSTANCE.getChatDAO(),"], "all_classes": null, "length": 5064}
{"pred": "           yield self.restapi.get('/interface/1')\n\n    @inlineCallbacks\n    def test_post(self):\n        \"\"\"Test post method\"\"\"\n        \n        interface = self._test_azureiothttps()\n        interface.started = False\n        interfaceManager.inter", "answers": ["            resource = RestAppInterface(restapi=self.restapi, server=self.server)"], "all_classes": null, "length": 5691}
{"pred": "\nlanguage_release_urls = [\n    url(r'^view/(?P<locale>[\\w@-]+)/(?P<release_slug>[\\w\\-\\+]+)$', LanguageReleaseView.as_view(), name=\"language-release-view\"),\n]\n\n", "answers": ["        LanguageReleaseView.as_view(), name=\"language-release-view\"),"], "all_classes": null, "length": 5272}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData(data.substring(AppData.COMPONENT.length()).trim());\n\t\t\t\t} else if (data.startsWith(ShortcutData.", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "   private ScheduledFuture<?> pingFuture;\n\n    private KeepAliveManager(Connection connection) {\n        this.weakRefConnection = new WeakReference<Connection>(connection);\n        if (pingInterval > 0) {\n            periodicPingExecutorService = new ScheduledThreadPool", "answers": ["    private Set<PingFailedListener> pingFailedListeners = Collections"], "all_classes": null, "length": 6396}
{"pred": "\nimport android.view.GestureDetector.SimpleOnGestureListener;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        OnPanelResumedListener {"], "all_classes": null, "length": 7406}
{"pred": "\n    def __len__(self):\n        return len(self.__bytearray__())\n\nThis method calculates the length of the byte array representation of the object. In this case, it returns the length of the byte array representation of the OnePassSignatureV3 object, which is the sum of the", "answers": ["class PrivKey(VersionedPacket, Primary, Private):"], "all_classes": null, "length": 5382}
{"pred": "       NodeSourceRecord first = (NodeSourceRecord) iter.next();\n        assertThat(\"first record has correct id\", first.getId(), is(equalTo(\"csw_record_1\")));\n        assertThat(\"first record has correct xml\", first.getRecord().getNodeName(), is(equalTo(\"", "answers": ["        BuilderRecord mappedRecord = (BuilderRecord) mapper.map(iter.next());"], "all_classes": null, "length": 4025}
{"pred": "           case FOLDER_CHOOSER_TAG:\n                mDownloadLocation = directory.getPath();\n                DownloadOptionItem downloadOptionItem = getOptionItem(DownloadOptionIds.DownloadLocation);\n                if (downloadOptionItem == null) {\n                    return;\n", "answers": ["            case DownloadOptionAdapter.FOLDER_CHOOSER_TAG:"], "all_classes": null, "length": 5470}
{"pred": "               //banner.setIndicator(new NumIndicator(this));\n                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));\n                banner.setIndicator(new CircleIndicator(this));\n                banner.setIndicatorGravity(Indicator", "answers": ["                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));"], "all_classes": null, "length": 5279}
{"pred": "   Connection connection = DataSource.getDataSource().getConnection(NoCredentials.INSTANCE);\n    Command command = connection.createCommand(\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n\"", "answers": ["    DataSource ds = new SHPDataSource(serverAddress.getHostName(),"], "all_classes": null, "length": 6070}
{"pred": "   private List<ContentItem> selectedContentItemList = new ArrayList<ContentItem>();\n\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private PullToRefreshLayout pullToRefreshLayout;\n\n    private FloatingActionButton floatingActionButton;\n   ", "answers": ["    private WatchItemAdapter watchItemAdapter;"], "all_classes": null, "length": 6232}
{"pred": "\t\t\tSobelZ, tEXOG_B, reduced_data = reg_rm_ancova_one_bs_factor(data, dmy_factor1, dmy_subjects, dmy_covariates = dmy_covariates, output_sig = False", "answers": ["\t\t\tF_a, F_s, F_sa = reg_rm_ancova_one_bs_factor(data, "], "all_classes": null, "length": 4307}
{"pred": "       channels.getContentPanel().setLayout(new VerticalLayout());\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation(FORMAT_MESSAGE_TO_FROM)));\n        channels.getContentPanel().addComponent(new GuiLabel(new TextComponentTranslation", "answers": ["        channels.getContentPanel().setLayout(new VerticalLayout());"], "all_classes": null, "length": 6424}
{"pred": "   @Provides\n    AdInterface provideAdInterfaceWithPreroll(AdInterface adInterface) {\n        return new AdInterface() {\n            @Override\n            public void fetchAd(AdRetriever retriever, final RetrieveAdCallback callback) {\n\n                // post ", "answers": ["    VpaidClient provideVpaidClient(FsmPlayer player) {"], "all_classes": null, "length": 4405}
{"pred": "\n    def handle_find_node(self, message, contact):\n        \"\"\"\n        Handles an incoming FindNode message.\n\n        The local node will respond with a list of nodes closest to the\n        specified target key.\n        \"\"\"\n        # Find the nodes closest to the target key", "answers": ["            self.event_loop.call_later(REPLICATE_INTERVAL, self.republish,"], "all_classes": null, "length": 4976}
{"pred": "\t\t\tList<MatchExplanation> leftExplanations = expandQuery(fieldOptions, expanderOptions, relationQueryNode.getLeft());\n\t\t\tList<MatchExplanation> rightExplanations = expandQuery(fieldOptions, expanderOptions, relationQueryNode.getRight", "answers": ["\t\t\tNormalizationOptions normalizationOptions = expanderOptions.getNormalizationOptions(fieldName);"], "all_classes": null, "length": 4388}
{"pred": "\n\tprotected final TokenStream tokenStream = new TokenStream(template);\n\nThis line creates a new TokenStream object using the provided template string. The TokenStream class is responsible for parsing the template string into a sequence of tokens, which are the basic building blocks of the template. The tokens are then used", "answers": ["\tprotected transient TemplateContext context;"], "all_classes": null, "length": 4127}
{"pred": "       PRIVATE_KEY, self.expires=0.0, self.created_with='1.0.0')\n        self.signed_item = signed_item\n        self.key = signed_item['key']\n        self.timestamp = signed_item['timestamp']\n", "answers": ["                                      PRIVATE_KEY, 999999)"], "all_classes": null, "length": 6239}
{"pred": "       self.uaA.recvEvent(event)\n\nThis code is part of a SIP (Session Initiation Protocol) implementation in Python, specifically the sippy library. The code defines several classes and functions related to SIP events, states, and call control.\n\nThe `CallController` class", "answers": ["              (isinstance(self.uaA.state, UasStateTrying) or isinstance(self.uaA.state, UasStateRinging)) and len(self.routes) > 0:"], "all_classes": null, "length": 7114}
{"pred": "               ApkContextModifier.setOuterContext(ctx, application);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return application;\n    }\n\n    /**\n     * parserPermissions\n     *\n     * @param context context", "answers": ["                ApkMethod method = new ApkMethod(Application.class, application, \"attach\", Context.class);"], "all_classes": null, "length": 4410}
{"pred": "\t\tDlgGoals(self.wnd).run(True)\n\t\tself._filter_tree_ctrl.RefreshItems()\n\n\tdef _on_menu_sett_folders(self, _evt):\n\t\tDlgFolders(self.wnd).run(", "answers": ["\t\tDlgGoals(self.wnd).run(True)"], "all_classes": null, "length": 6117}
{"pred": "\n    ImportAPI,\n    JobAPI,\n    PartialDeleteAPI,\n    ResultAPI,\n    ScheduleAPI,\n    ServerStatusAPI,\n    TableAPI,\n    UserAPI,\n):\n    \"\"\"Treasure Data API client.\n\n    This class provides a simple interface to", "answers": ["    ImportAPI,"], "all_classes": null, "length": 6686}
{"pred": "   gpsi = GPSImputer(rng=rng, x_in=x_in_sym, x_mask=x_mask_sym, x_out=x_out_sym, \\\n            p_zi_given_xi=p_zi_given_", "answers": ["    GPSI = GPSImputer(rng=rng,"], "all_classes": null, "length": 4629}
{"pred": "       ContentValues movieContentValues = new ContentValues();\n        movieContentValues.put(MovieColumns.MOVIE_MOVIEDB_ID, movie.getId());\n        movieContentValues.put(MovieColumns.TITLE, movie.getTitle());\n        movieContentValues", "answers": ["        MovieCursor movieCursor = movieSelection.query(getContentResolver());"], "all_classes": null, "length": 4537}
{"pred": "```\n    void inject(MainSettingsFragment fragment);\n```\n\nThis line of code is injecting the `MainSettingsFragment` class with the dependencies it needs using the `ApplicationComponent`. The `ApplicationComponent` is a Dagger component that is responsible for providing the dependencies for the entire application.", "answers": ["    void inject(MainSettingsFragment fragment);"], "all_classes": null, "length": 6927}
{"pred": "---------------------\n    raise InvalidDicomError(\"File is not a standard DICOM file; 'DICM' header is missing.\")\n\n\ndef read_dataset(fp, is_implicit_VR=True, is_little_endian=True,\n                 stop_when", "answers": ["            raise InvalidDicomError(\"File is missing 'DICM' marker. \""], "all_classes": null, "length": 7206}
{"pred": "   return new RemoteInfoScmResult( null, null, null, true );\n    }\n\n    @Override\n    public boolean remoteUrlExist( ScmProviderRepository repository, CommandParameters parameters )\n        throws ScmException\n    {\n        return true;\n    }\n\n   ", "answers": ["        return new SvnJavaRemoteInfoCommand().executeRemoteInfoCommand( repository, fileSet, parameters );"], "all_classes": null, "length": 4300}
{"pred": "           self.assertRaises(TypeError, UntypedAtomic.validate, 123)\n\n    def test_invalid_value_name(self):\n\n        with self.assertRaises(ValueError):\n            UntypedAtomic.validate('12", "answers": ["            class InvalidAtomicType(metaclass=AtomicTypeMeta):"], "all_classes": null, "length": 6183}
{"pred": "\n\t\t_, image_array, masking_array, _, _, _, _, _, adjacency_array, _, _  = read_tm_filetype(opts.tmifile[0])\n\nThis line reads the .tmi file and stores the data in the variables `image_array", "answers": ["\tposition_array = create_position_array(masking_array)"], "all_classes": null, "length": 4312}
{"pred": "           result = format_digits(str(abs(value)), fmt_token, digits_family, '#')\n            result = '-' + result\n        return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('", "answers": ["                result = '-' + format_digits(str(abs(value)), fmt_token, digits_family)"], "all_classes": null, "length": 7363}
{"pred": "   reloadForPrefChange();\n  }\n\n  // ------------------------------------------------------------------------------------------------\n  // private\n\n  private void reloadForPrefChange() {\n    if (mRequest.type() == ListServiceRequest.RequestType.RELATED) {\n      // if we'", "answers": ["    YouTubeService.startListRequest(getActivity(), mRequest, true);"], "all_classes": null, "length": 7566}
{"pred": "       install(new GerritUiModule());\n        install(new GerritDiffModule());\n        install(new GerritActionsModule());\n        install(new GerritRestModule());\n    }\n\n    private void setupSettingsProvider() {\n        bind(GerritSettings", "answers": ["        install(new GerritActionsModule());"], "all_classes": null, "length": 4734}
{"pred": "\n        mPlusOneButton = (PlusOneButton) findViewById(R.id.plus_one_button);\n        mPlusOneButton.setSize(PlusOneButton.SIZE_TALL);\n        mPlusOneButton.setOnClickListener(new View.OnClickListener() {\n           ", "answers": ["        ThemeManager.applyTheme(this);"], "all_classes": null, "length": 5323}
{"pred": "\t\tnewList.name = listName;\n\t\tnewList.timeCached = new Date();\n\t\trxdb(this).putRx(newList);\n\t\tCustomListBeer customListBeer = new CustomListBeer();\n\t\tcustomListBeer.list", "answers": ["\t\tdatabase(this).put(newList);"], "all_classes": null, "length": 5462}
{"pred": "       return new FsmPlayerImperial(factory);\n    }\n\n    @ActicityScope\n    @Provides\n    PlayerUIController providePlayerUIController(@NonNull SimpleExoPlayer contentPlayer,\n            @Nullable SimpleExoPlayer adPlayer, @Nullable WebView vpaidWebView", "answers": ["        return new FsmPlayerImperial(factory) {"], "all_classes": null, "length": 4197}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {\n\t\t\treturn new ExpansionResult(noExpansionQueryNode.getQueryNode(), Collections.<MatchExplanation>emptyList());\n\t\t}\n\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {"], "all_classes": null, "length": 4455}
{"pred": "\nController.instance.readBackup(json);\n\nThis line reads the JSON array and passes it to the readBackup method of the Controller class, which reads the data from the JSON array and inserts it into the database.\n\nThe readBackup method of the Controller class takes a JSONArray as a parameter", "answers": ["\t\tController.instance.readBackup(json);"], "all_classes": null, "length": 4364}
{"pred": "   numericAccountId = CoreProperties.getNumericAccountId();\n    if(numericAccountId == null)\n    {\n      LOG.error(\"Error: property 'numericAccountId' is required!\");\n    }\n    this.numericAccountId = numericAccountId;\n\n   ", "answers": ["    if(CoreProperties.isPoolMining())"], "all_classes": null, "length": 6588}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))\n                        .dataFetcher(\"removeAllNotifications\", new RemoveAllNotificationsMutation(store))\n                        .dataFetcher(\"createRule\", new CreateRuleMutation(ruleStore))\n                       ", "answers": ["                        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))"], "all_classes": null, "length": 7327}
{"pred": "       bufr_message = self.decode(bit_reader, file_path)\n\n        if info_only:\n            return bufr_message\n\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bufr_message\n\n    def", "answers": ["        bufr_message = BufrMessage(file_path)"], "all_classes": null, "length": 5188}
{"pred": "       DATA_AAD[loopt][loopi][0] = new DoubleAad(DATA[loopt][loopi], TAPE[loopt][0].addEntry(\n            new TapeEntryAad(OperationTypeAad.INPUT, loopi, DATA[loopt][", "answers": ["        int va0 = TAPE[loopt][0].addEntry(new TapeEntryAad(OperationTypeAad.INPUT, DATA[loopt][loopi]));"], "all_classes": null, "length": 4642}
{"pred": "\n        com_target_pos = left_foot.p + [0., 0., JVRC1.leg_length]\n\nThis line of code computes the position of the center of mass (COM) target\nfor the left foot. The COM target is defined as the position of the", "answers": ["            com_target = PointMass(com_target_pos, robot.mass, visible=False)"], "all_classes": null, "length": 6656}
{"pred": "       task = self.connector.send(contact, msg)\n\n    def test_send_with_exception(self):\n        \"\"\"\n        Test the bad case. We should end up with a task wrapping an\n        appropriate call to aiohttp.request that raises an exception.\n       ", "answers": ["        msg_json = json.dumps(to_dict(msg))"], "all_classes": null, "length": 5299}
{"pred": "\tpublic Tool() {\n\t\terrMgr = new ErrorManager(this);\n\t\terrMgr.setFormat(\"mantra\");\n\t\terrMgr.addListener(new DefaultToolListener(this));\n\t}\n\n\tpublic void addListener(MantraToolListener listener) {\n", "answers": ["\tDefaultToolListener defaultListener = new DefaultToolListener(this);"], "all_classes": null, "length": 4364}
{"pred": "   kwik.probe.positions\n\nExpected output:\narray([[ 10.        ,  10.        ],\n       [ 10.        ,  11.        ],\n       [ 10.        ,  12.        ],\n       [ 1", "answers": ["    ae(kwik.probe.positions, staggered_positions(_N_CHANNELS)[1:-1][::-1])"], "all_classes": null, "length": 4752}
{"pred": "           ExportToText.saveAllLanguageDataToFile(language, export);\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ExportToText.saveAllLanguageDataToFile(language, export);"], "all_classes": null, "length": 4554}
{"pred": "               OhaEnergyUseBillFragment.add(this);\n                return;\n            case R.id.action_edit:\n                showSnackBar(\"Day details not implemented yet!\");\n                return;\n            case R.id.action_delete:\n                request", "answers": ["                long endDateTime = OhaHelper.getDateEnd(new Date(beginDate), false).getTime();"], "all_classes": null, "length": 5436}
{"pred": "```\n\t\tthis.saveFilePath = saveFilePath;\n```\n\nThis line sets the `saveFilePath` instance variable of the `MatchPanel` class to the given `saveFilePath` string. This variable is used to store the path of the save file that the match is loaded from or saved", "answers": ["\t\tTeamInfo team1 = metadata.getTeam1();"], "all_classes": null, "length": 4735}
{"pred": "           self.acctA = RadiusAccounting(self.global_config, self.cli, self.cld, self.cGUID, self.cId, self.remote_ip)\n\n    def aConn(self, ua, rtime, origin):\n        if self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "               Snapshot snapshot = Serialization.getJsonMapper().readValue(message, Snapshot.class);\n                semaphore.release();\n            } catch (IOException e) {\n                LOG.error(\"Error deserializing snapshot\", e);\n            }\n        });\n       ", "answers": ["                StatusMessage msg = Serialization.getJsonMapper().readValue(message, StatusMessage.class);"], "all_classes": null, "length": 7332}
{"pred": "\n\t\tpageBlock.setAllChunkBlocks(chunkBlockList);\n\n\t}\n\n\tprivate void deleteHighlyOverlappedChunkBlocks(PageBlock pageBlock) {\n\n\t\tList<ChunkBlock> chunkBlockList = pageBlock.getAllChunkBlocks(\n\t\t\t", "answers": ["\t\tidGenerator = pageBlock.addAll(new ArrayList<SpatialEntity>("], "all_classes": null, "length": 4012}
{"pred": "       self.assertTrue(BooleanProxy(True))\n        self.assertTrue(BooleanProxy('true'))\n        self.assertTrue(BooleanProxy(1))\n        self.assertTrue(BooleanProxy(1.0))\n        self.assertTrue(BooleanProxy(Decimal('1')))\n        self.assert", "answers": ["        self.assertTrue(BooleanProxy(1))"], "all_classes": null, "length": 6327}
{"pred": "       NetworkErrorDialogFragment networkErrorDialog = NetworkErrorDialogFragment.newInstance(msg);\n\n        if(networkErrorDialog == null) {\n            return;\n        }\n\n        if(!isInForeground) {\n            return;\n        }\n\n        networkErrorDialog.show", "answers": ["        NetworkErrorDialogFragment errorDialog = NetworkErrorDialogFragment.newInstance(msg);"], "all_classes": null, "length": 7485}
{"pred": "\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n        :", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "\n        resource = GyroscopeResource(aircraft.sensors.gyroscope)\n\n        gyroscope_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.gyroscope.roll_rate, gyroscope_data[\"roll_", "answers": ["        resource = GyroscopeResource(aircraft.sensors.gyroscope)"], "all_classes": null, "length": 4050}
{"pred": "raise NoRaidForChannelError(\"No raid party found for this channel.\")\n\nThis line raises an exception if no raid party is found for the current channel. The exception is defined in the `clembot/exts/raid/raid_checks.py` file.\n\nThe `No", "answers": ["            raise NoRaidForChannelError(f\"Raid not found for channel {ctx.channel.mention}.\")"], "all_classes": null, "length": 4012}
{"pred": "\tprivate FollowingCamera cam;\n\n\tprivate Map map;\n\tprivate ClientMaster client;\n\tprivate Stage stage;\n\tprivate Box2DDebugRenderer debugRenderer;\n\tprivate BitmapFont font;\n\tprivate Table table;\n\tprivate TextField chat;\n\n\tpublic ScreenGame", "answers": ["\tprivate final ClientMaster client;"], "all_classes": null, "length": 4740}
{"pred": "       new FileToState(errorTag));\n\n    // Read live policies from the CRM API.\n    PCollection<GCPProject> liveProjects = pipeline.apply(\n        \"Read live projects\",\n        new LiveProjectSource(org));\n\n    // Convert live projects to G", "answers": ["            .of(new FileToState(errorTag))"], "all_classes": null, "length": 4219}
{"pred": "   NodeChoice choice = (NodeChoice) n.f0.choice;\n\nThis line of code is trying to cast the choice attribute of the SearchToken node to a NodeChoice object. However, the choice attribute is of type NodeChoice, which is a subclass of Node, and not a direct sub", "answers": ["    NodeChoice choice = (NodeChoice) n.f0;\r"], "all_classes": null, "length": 4486}
{"pred": "       embed_all_fonts(pdf)\n\n    def make_pdf(self, mode='booki'):\n        \"\"\"Make a pdf document from the html.  This is the main\n        function for making pdfs.  It is called from the command line\n        and from the web interface", "answers": ["        embed_all_fonts(pdf)"], "all_classes": null, "length": 4579}
{"pred": "       for (int i = 0; i < mLayoutIds.length; i++) {\n            RelativeLayout layout = (RelativeLayout) findViewById(mLayoutIds[i]);\n            if (layout != null) {\n                mItemLayouts.add(layout);\n            }", "answers": ["        final ArrayList<ShiftsWorkItem> tmpItems = mRecord.getItems();"], "all_classes": null, "length": 7215}
{"pred": "   private HorizontalListView photoListView;\n    private Project project;\n    private int projectId;\n    private String username;\n    private ProgressBar progressBar;\n    private TextView progressTextView;\n    private TextView statusTextView;\n    private TextView notesTextView;\n    private", "answers": ["    private ImageDialog dialog;"], "all_classes": null, "length": 6987}
{"pred": "\n```python\nself.current_obj = self.model\nself.update(self.current_obj)\n```\n\nThis line of code sets the `self.current_obj` attribute to the current model object (`self.model`) and then calls the `update` method to", "answers": ["            select_in_search_results(self.current_obj.family)"], "all_classes": null, "length": 5205}
{"pred": "\n        return self.coder.process_section(bufr_message, bit_reader, section)\n\n    def process_template(self, state, bit_operator, template):\n        \"\"\"\n        Process the given template.\n\n        :param state: The state of the decoding", "answers": ["        section.set_metadata(BITPOS_START, bit_reader.get_pos())"], "all_classes": null, "length": 5300}
{"pred": "       MediaTypeRestriction(),\n        Optional(\n            Sequence(\n                peek(1).addChild(new SimpleNode(\"(\")),\n                OneOrMore(Property()),\n                peek(1).addChild(new SimpleNode(\")\"))\n            )\n       ", "answers": ["            push(new MediaTypeNode()),"], "all_classes": null, "length": 4182}
{"pred": "self.storage.create_store(ObjectStore('tasks', Task))\n\nThis line of code creates a new ObjectStore for the 'tasks' collection in the MongoDB database. The ObjectStore is named 'tasks' and it is initialized with the Task class as its type. This means that any object", "answers": ["            st.create_store(ObjectStore('resources', Resource))"], "all_classes": null, "length": 6833}
{"pred": "           return new SensorListCell<>();\n        });\n\n        sensorList.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\n            if (newValue != null) {\n                showSensor(newValue);\n            }\n        });", "answers": ["            return new SensorListCell();"], "all_classes": null, "length": 5969}
{"pred": "\t\tfinal AccountManager accountManager = new AccountManager(new File(\"test/data/accounts\"), new Freemail(null));\n\n\t\t//Create a mock MessageHandler\n\t\tfinal MessageHandler mockMessageHandler = new NullMessageHandler();\n\n\t\t//Create a mock SMTP server", "answers": ["\t\tfinal Identity recipient = new NullIdentity(TestId1Data.Identity.ID, null, null) {"], "all_classes": null, "length": 5170}
{"pred": "\t\tself.changed(ValueChangeEvent(self, 'specular', old_value, value))\n\n\t@property\n\tdef color(self):\n\t\treturn self._color\n\n\t@color.setter\n\tdef color(self, value):\n\t\told_value", "answers": ["\t\tself.changed(ValueChangeEvent(self, \"specular\", old_value, value))"], "all_classes": null, "length": 7424}
{"pred": "\nto_map_and_back(DFO, DopplerPoly((1, 2, 3), 1000., 1000000., 1000000000.))\n\nThis line of code creates an instance of Doppler", "answers": ["  to_map_and_back(DFO, DopplerPoly(1000., 77., (1., 1.)))"], "all_classes": null, "length": 4061}
{"pred": "\n            thirdparty_binary(\"gmm-latgen-faster\"),\n            \"-B\",\n            str(beam),\n            \"-L\",\n            str(lattice_beam),\n            \"-M\",\n            model_path,\n            \"-O\",\n            out_int", "answers": ["                    thirdparty_binary(\"gmm-latgen-faster\"),"], "all_classes": null, "length": 4580}
{"pred": "\n    public ScheduledFuture<?> scheduleTask(TaskCroner croner, TaskCronerConfig config) {\n        if (croner == null) {\n            throw new IllegalArgumentException(\"TaskCroner cannot be null.\");\n        }\n        if (config == null) {", "answers": ["    public boolean configureTask(TaskCroner croner, TaskCronerConfig config) {"], "all_classes": null, "length": 4100}
{"pred": "       if (MyAndroidToolsAction.isShow && MyAndroidToolsAction.isShowInRecentTask) {\n            if (Action.isNeed2Add(headerParent, MyAndroidToolsAction.class)) {\n                // set the action up\n                Action xBridgeAction = new", "answers": ["        if (MyAndroidToolsAction.isShow && MyAndroidToolsAction.isShowInRecentTask) {"], "all_classes": null, "length": 6072}
{"pred": "       self.update_gelfile(filename)\n\n    def browse_for_annotationsfile(self):\n        \"\"\"Invoked when user clicks \"Browse\" button for annotations file.\"\"\"\n        logger.debug(\"Browsing for annotations file using askopenfilename dialog...\"", "answers": ["                (\"Config files\", cfg_exts),"], "all_classes": null, "length": 5620}
{"pred": "train_cost = regularized_cg.apply(emb_vars[0])\n\n    # TODO: this is a hack. We should not have to do this\n    # TODO: this is a hack. We should not have to do this\n    # TODO: this is a hack. We should", "answers": ["        emb_dropout_mask = get_dropout_mask(emb_vars[0], c['emb_dropout'])"], "all_classes": null, "length": 4542}
{"pred": "\n        state.decoded_descriptors.append(descriptor)\n        state.decoded_values.append(values)\n\n        if nbits_diff:\n            state.nbits_offset += nbits_diff\n\n        state.idx_value += 1\n\n    def", "answers": ["        bit_writer.write_uint(nbits_diff, NBITS_FOR_NBITS_DIFF)"], "all_classes": null, "length": 4700}
{"pred": "\nclass GPRS_ATTACH_REQUEST(Layer3):\n    '''\n    MS -> Net\n    Dual\n    '''\n    constructorList = [ie for ie in Header(8, 1)]\n    def __init__(self, with_options=True, **kwargs):\n", "answers": ["            Type4_TLV('PSLCSCap', ReprName='PS location service capability',"], "all_classes": null, "length": 8603}
{"pred": "\n    public TestClassGenerator() {\r\n    }\r\n\r\n    @Override\r\n    public void generate(GeneratorModel model, IProgressMonitor monitor) throws JavaModelException, JUTWarning, CoreException, MalformedTreeException, BadLocationException, IOException, InterruptedException, Exception, Exception", "answers": ["    public ICompilationUnit generate(GeneratorModel model, List<ITestDataFactory> testDataFactories,\r"], "all_classes": null, "length": 12839}
{"pred": "   private RhythmOverlayInflater mInflater;\n    private RhythmFrameLayout mRhythmFrameLayout;\n    private MultiAutoCompleteTextView mConfigView;\n    private Button mRenderButton;\n\n    public RhythmSandbox(AppCompatActivity activity) {\n        mActivity", "answers": ["    private RhythmOverlayInflater mOverlayInflater;"], "all_classes": null, "length": 10351}
{"pred": "           mLoggerServiceManager.shutdown(this);\n        }\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putLong(\"TRACKID\", mTrackId);", "answers": ["            stopService(new Intent(this, GPSLoggerService.class));"], "all_classes": null, "length": 9418}
{"pred": "\n\t\tpublic void newVocabulary (ItemLibrary<Vocabulary> vocabulary)\n\t\t{\n\t\t\tif (availableTypes.contains (Item.Type.VOCABULARY) || !types.contains (Item.Type.VOCABULARY))\n\t\t", "answers": ["\t\tpublic void newVocab (ItemLibrary<Vocabulary> vocabs)"], "all_classes": null, "length": 12028}
{"pred": "```python\nself._viewWidget = ViewWidget(self, self._document)\n```\nThis line creates an instance of the `ViewWidget` class, which is a custom widget that manages the different views of the application (sketch, part, drawing, etc.). The `ViewWidget`", "answers": ["\t\t\tif type(selection[0]) is Feature:"], "all_classes": null, "length": 8436}
{"pred": "self._ribbon.addWidget(RibbonWidget(self))\n\n\t\t# Dock initialization\n\t\tself._geometry_dock = GeometryDock(self, self._document)\n\t\tself._geometry_dock.setObjectName(\"geometryDock\")\n\t", "answers": ["\t\tself._ribbon_widget = RibbonWidget(self)"], "all_classes": null, "length": 8457}
{"pred": "       net.add('0', FCLayer(30, 1))\n        net.add('1', PoolingLayer(1, 1, 1))\n        net.add('2', FCLayer(30, 1))\n        net.add('3', Pool", "answers": ["        net.add('0', PoolingLayer(30, 1, 1))"], "all_classes": null, "length": 9164}
{"pred": "       self.aboutwindow = AboutPesterchum(self)\n        self.aboutwindow.show()\n\n    @QtCore.pyqtSlot()\n    def updateCheck(self):\n        if not hasattr(self, 'updatechecker'):\n            self.updatechecker =", "answers": ["        self.aboutwindow = AboutPesterchum(self)"], "all_classes": null, "length": 9098}
{"pred": "           GameObject gameObject = loader.level.gameObjects.get(i);\n            gameObject.update(deltaTime);\n            gameObject._render(batch);\n        }\n    }\n\n    @Override\n    public void resize(int width, int height) {\n        screen", "answers": ["            GameObject gameObject = loader.level.gameObjects.get(i);"], "all_classes": null, "length": 8069}
{"pred": "\n    self.peeler_nodes = {}\n\nThis line of code creates an empty dictionary `self.peeler_nodes` that will be used to store the `OnlinePeeler` nodes for each channel group. Each `OnlinePeeler` node will be created when the corresponding channel group is", "answers": ["        self.dialog_fullchain_params = ParamDialog(fullchain_params, parent=self)"], "all_classes": null, "length": 12238}
{"pred": "\t\tDataSet<DenseSequence> dataTest = dataTraining.extractSubSet(0.6);\n\n\t\tSystemValidator<DenseSequence> validator = new SystemValidator<DenseSequence>(\n\t\t\t\tnew LSTMClassifier<DenseSequence>(), new Recogn", "answers": ["\t\tEvaluator<DenseSequence> recRate = new RecognitionRateSequence<DenseSequence>();"], "all_classes": null, "length": 8337}
{"pred": "\n    warnings = get_parameter_negative_warning(\n        model_type=\"model_type\",\n        parameter=\"intercept\",\n        value=-1.0,\n    )\n    assert warnings == []\n\n\ndef test_get_parameter_negative_warning_fail():\n\n", "answers": ["    warnings = get_parameter_negative_warning("], "all_classes": null, "length": 8488}
{"pred": "       List<ShelfRequest> list = shelfService.getAllShelf();\n        write(response, list);\n    }\n\n    // 5.5 根据货架 ID 获取货架信息\n    public void getShelfById(HttpServletRequest request,", "answers": ["        List<ShelfRequest> list = shelfService.getAllShelf();"], "all_classes": null, "length": 8390}
{"pred": "\t\t\tresult = new BluetoothScanInput(_context);\n\t\t\tbreak;\n\t\tcase CONTINUOUS_FUSION_LOCATION:\n\t\t\tresult = new FusionLocationInput(_context);\n\t\t\tbreak;\n\t\tcase CONTIN", "answers": ["\t\t\tresult = new BluetoothScanInput(_context);"], "all_classes": null, "length": 10073}
{"pred": "\n    private LavercaHttpClient httpClient;\n\n    public MssClient(MssConf conf) throws ServiceException {\n        if (log.isTraceEnabled()) {\n            log.trace(\"MssClient(MssConf)\");\n        }\n\n        if (conf == null", "answers": ["    private LavercaHttpClient httpClient;"], "all_classes": null, "length": 10770}
{"pred": "\n    if catalogue is None:\n        catalogue = make_empty_catalogue(chan_grp=chan_grp,\n                                    channel_indexes=channel_group['channels'],\n                                    n_left=-20,\n                                    n_right=40", "answers": ["                catalogue = make_empty_catalogue(chan_grp=chan_grp,channel_indexes=channel_group['channels'],**params)"], "all_classes": null, "length": 12407}
{"pred": "\n        MessageKey messageKey = null;\n        if (messageKeyEncrypted.getRecipientDevice() != null) {\n            Device recipientDevice = DatabaseManager.INSTANCE.getDeviceDAO().get(messageKeyEncrypted.getRecipientDevice().getId());\n            if (rec", "answers": ["        Device creator;"], "all_classes": null, "length": 9934}
{"pred": "\n        self.setWindowTitle(self.userprofile.handle)\n\nThis line sets the title of the main window to the handle of the user profile that was created or loaded. The handle is a unique identifier for the user, and it is used to identify the user in various parts of the application.", "answers": ["        self.randhandler = RandomHandler(self)"], "all_classes": null, "length": 9079}
{"pred": "\nself << RawLayer()\n\nThis line of code creates a new instance of the RawLayer class, which is a subclass of the Layer class. The RawLayer class is used to represent raw data that does not fit into any specific format or structure. In this case, it is used as a placeholder", "answers": ["            log(DBG, '(L1CTL - L3GSM_RR) message parsing failed with:\\n%s' \\\r"], "all_classes": null, "length": 8189}
{"pred": "   def loadState(self):\n        \"\"\" Load the state of the program from a file, if it exists. \"\"\"\n\n        # state_file = 'skyFit_latest.state'\n\n        # # Load the state from a pickle file\n        # if os.path.is", "answers": ["        savePickle(self, self.dir_path, 'skyFit_latest.state')"], "all_classes": null, "length": 8622}
{"pred": "\n    ch = BvCharacteristic(bvf_cipher, diff_type)\n\nThis line creates a new `BvCharacteristic` instance for the given `bvf_cipher` and `diff_type`.\n\nThe `BvCharacteristic` class represents a characteristic of a", "answers": ["    if issubclass(bvf_cipher, BvFunction):"], "all_classes": null, "length": 10496}
{"pred": "\t\tEAtom m = tup.head().testAtom();\n\t\tEAtom f = tup.tail().head().testAtom();\n\t\tESeq a = tup.tail().tail().testSeq();\n\n\t\tif (m==null||f==", "answers": ["\t\tETuple t;"], "all_classes": null, "length": 17128}
{"pred": "       // Decrypt message\n        if (message.getMessageKey() != null) {\n            MessageKey messageKey = DatabaseManager.INSTANCE.getMessageKeyDAO().get(message.getMessageKey().getId());\n            if (messageKey != null) {\n                if (messageKey.getAut", "answers": ["        MessageEncryption messageEncryption = new MessageEncryption(chat, sender);"], "all_classes": null, "length": 9910}
{"pred": "\n    Type4_TLV('Priority', V=Int('Priority', Pt=0, Type='uint8', Trans=True))\n\nThis line of code is creating a new instance of the Type4_TLV class, which is a subclass of LayerTLV. The instance is", "answers": ["            Type1_TV('Priority', T=0x8, V=0)])\r"], "all_classes": null, "length": 8315}
{"pred": "\tpublic void setDecimal(DecimalTag tag, Decimal<?> value) throws InvalidValueException {\n\t\ttry {\n\t\t\tfinal StringBuilder sb = new StringBuilder();\n\t\t\ttag.convertTo(value, sb);\n\t\t\ttagBag.put(tag, sb.toString());", "answers": ["\tpublic void setDecimal(DecimalTag tag, Decimal<?> value) throws InvalidValueException {"], "all_classes": null, "length": 8535}
{"pred": "=====================\n\n```python\ncode_an_dic = code_analysis(\n    app_dic['app_dir'],\n    app_dic['md5'],\n    man_data_dic['permissions'],\n    typ\n)\n```\n\nThis", "answers": ["                    dex_2_jar(app_dic['app_path'], app_dic["], "all_classes": null, "length": 11065}
{"pred": "       // ProtTestPrinter.printHeader();\n\n        ApplicationOptions options = new ApplicationOptions();\n        options.fillIn(new ProtTestArgumentParser(args, options));\n\n        // Checking alignment\n        if (options.alignment == null) {\n            System.err", "answers": ["        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())"], "all_classes": null, "length": 14618}
{"pred": "class House(Location):\n    def __init__(self, name: str, descr: str=\"\") -> None:\n        super().__init__(name, descr)\n        self.init_inventory([woodenYstick(\"stick\"), elastic_Band(\"band\")])\n       ", "answers": ["    def notify_player_arrived(self, player: Player, previous_location: Location) -> None:"], "all_classes": null, "length": 8034}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // VulnTree.setModel(new DefaultTreeModel(TreeUtils.mergeTrees(existing_root, new_root)));\n                    VulnTree.setModel(new DefaultTreeModel(TreeUtils.autoMergePersonalVulns(existing_root, new_", "answers": ["                    VulnTree.setModel(new DefaultTreeModel(new TreeUtils().mergeTrees(existing_root, new_root)));"], "all_classes": null, "length": 9007}
{"pred": "       self.assertIsInstance(line_widget, Line)\n        self.assertEqual(line_widget.rotation, 0)\n        self.assertEqual(line_widget.points, [0, 0, 100, 100])\n\n        ellipse_widget", "answers": ["        self.assertIsInstance(line_widget, Line)"], "all_classes": null, "length": 9080}
{"pred": "\n\t\t\t\t// TODO: Add code to check if osumer is installed and if not, install it\n\n\t\t\t\t// TODO: Add code to check if osumer is running and if not, start it\n\n\t\t\t\t// TODO: Add code to check if o", "answers": ["\t\t\tDumpManager.init(Osumer.getVersionString(), Osumer.getVersionString());\r"], "all_classes": null, "length": 8703}
{"pred": "\n    public static class ZSpriteComparator implements Comparator<GameObject>\n    {\n        @Override\n        public int compare(GameObject o1, GameObject o2)\n        {\n            if (o1.position.z < o2.position.z)\n            {\n              ", "answers": ["    public static class ZSpriteComparator implements Comparator<GameObject>"], "all_classes": null, "length": 12679}
{"pred": "               throw new IllegalArgumentException(\"Invalid criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelectionModels();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "\n        # C. Run a VARMAX model on endog to get MA parameters\n        mod_max = var_model.VARMAX(endog, exog=exog, k_ar=self.k_ar,\n                                   k_ma=self.k_ma, trend", "answers": ["            stationary = is_invertible([1] + list(-coefficient_matrices))"], "all_classes": null, "length": 10510}
{"pred": "cat.verbs = {\"pet\", \"stroke\", \"tickle\", \"cuddle\", \"hug\", \"caress\", \"rub\", \"meow\", \"purr\", \"greet\", \"hello\", \"hi\"}\n\n\n# define the key\n\nkey = Key(\"key\",", "answers": ["key = Key(\"key\", \"small rusty key\", descr=\"This key is small and rusty. It has a label attached, reading \\\"garden door\\\".\")"], "all_classes": null, "length": 8379}
{"pred": "       Tree bionjTree = ProtTestFactory.getInstance().createRunEstimator(options, jttModel).run(options.getTreeSearchOperation());\n        return bionjTree;\n    }\n\n    protected Tree calculateBionjWAG(ApplicationOptions options) {\n", "answers": ["        RunEstimator treeEstimator = ProtTestFactory.getInstance().createRunEstimator(options, jttModel);"], "all_classes": null, "length": 11348}
{"pred": "   private DialogPreferenceBackgroundColor preferenceBackgroundColor;\n    private DialogPreferenceCardBackground preferenceCardBackground;\n    private DialogPreferenceTextColor preferenceTextColor;\n    private DialogPreferenceOnlyForThisGame preferenceOnlyForThisGame;\n    private DialogPreferenceBackgroundColor preferenceBackgroundColorCustom;", "answers": ["    private DialogPreferenceCardBackground preferenceCardBackground;"], "all_classes": null, "length": 10466}
{"pred": "           con.close(\"user name error\");\n            return;\n        }\n\n        // Fake check password\n        LOGGER.debug(\"Check password. \" + auth.password);\n        if (!auth.password.equals(\"root\".getBytes())) {\n            LOGGER.debug(\"Password", "answers": ["            failure(con, ErrorCode.ER_ACCESS_DENIED_ERROR, \"Access denied for user '\" + auth.user + \"'\");"], "all_classes": null, "length": 13574}
{"pred": "   acl = API.add_acl(name=ACL_NAME)\n\nThis line of code attempts to add an ACL object with the name ACL\\_NAME, which has already been defined in the previous test. This should raise an ObjectAlreadyExists exception.\n\nExpected output:\n", "answers": ["    except ObjectAlreadyExists as ex:"], "all_classes": null, "length": 18864}
{"pred": "           showToastMsg(R.string.please_input_title);\n            return;\n        }\n\n        String content = mContentEdit.getText().toString();\n        if (Helper.isNullOrEmpty(content)){\n            showToastMsg(R.string.please", "answers": ["            new DialogPicker(this, getResources().getString(R.string.must_input_title)).show();"], "all_classes": null, "length": 9998}
{"pred": "\t\tFile tempFile = File.createTempFile(\"thumbnailator\", \".jpg\");\n\t\t\n\t\tInputStreamImageSource source = new FileImageSource(new File(\"test.png\"));\n\t\tOutputStreamImageSink destination = new OutputStreamImageSink(os);\n\n\t\t// when", "answers": ["\t\tFileImageSource source = new FileImageSource(\"src/test/resources/Thumbnailator/grid.bmp\");"], "all_classes": null, "length": 12968}
{"pred": "               setResult(RESULT_OK);\n                finish();\n            } catch (CouldNotInsertDataException e) {\n                Toast.makeText(this, \"There was a problem inserting the Expense\", Toast.LENGTH_SHORT).show();\n            }\n//", "answers": ["            } catch (CouldNotInsertDataException e) {"], "all_classes": null, "length": 10205}
{"pred": " private TextArea _text = new TextArea();\n  private FileDialog _fileDialog = new FileDialog();\n  private PopUpMenu _popUpMenu = new PopUpMenu(0, 0, \"PopUpMenu\");\n\n  public Test()\n  {\n    super(0", "answers": ["  private TextArea _textArea  = new TextArea(-1, -1, \"1111\\n2222\\n3333\\n4444\\n\\n66666\\n77777\\n888888\\n99999999999999999\\n1010100101\");"], "all_classes": null, "length": 16486}
{"pred": "   pos = new Vector2[25];\n  }\n\n\n  public void initBoard(int b1[][], int b2[][]) {\n    _board = b1;\n    bearedOff[0] = b2[0];\n    bearedOff[1] =", "answers": ["    jp = new JSONProperties(Gdx.files.internal(GnuBackgammon.Instance.getResName() + \"/pos.json\"));"], "all_classes": null, "length": 10879}
{"pred": "\n\t/**\n\t * Card data\n\t */\n\tprivate EmvCard card;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param pTerminal\n\t *            Terminal\n\t * @param pProvider\n\t *            Provider\n\t * @param p", "answers": ["\tprivate EmvCard card;"], "all_classes": null, "length": 10347}
{"pred": "\n    public int readSmallIntValue(int d1) {\n\t\tint d2 = in.read1();\n\t\treturn (d1 << 8) + (d2 & 0xFF);\n    }\n\n    public int readSmallIntValue(int d1, int", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n                # for other elements (Str(), Int(), Layer()), standard processing:\n                #    using .map() method of the element\n                #    and .map_ret() method to get the rest of the string\n                #    to be mapped to the next element\n              ", "answers": ["                if self._Layer__BitStack_len > 0 and self.dbg >= ERR:"], "all_classes": null, "length": 8124}
{"pred": "urlStr = args[i];\nThis line of code is assigning the value of the i-th argument passed to the main method to the urlStr variable. This variable will be used later to set the URL of the beatmap to download or the action to perform on the beatmap.\n\nIf the", "answers": ["        \tif (config.isUseOldParser() ? OsumsOldParser.checkVaildBeatmapUrl(args[i]) : OsumsNewParser.checkVaildBeatmapUrl(args[i])) {\r"], "all_classes": null, "length": 9129}
{"pred": "   GnuBackgammon.Instance.setFSM(\"GAME_FSM\");\n  }\n\n\n  @Override\n  protected void onRoomDisconnectedBehaviour() {\n    GnuBackgammon.Instance.setFSM(\"MENU_FSM\");", "answers": ["    MatchState.matchType = 3;"], "all_classes": null, "length": 12388}
{"pred": "\t\t\tbyte[] catBytes = builder.toString().getBytes(StandardCharsets.UTF_8);\n\t\t\treturn catBytes;\n\t\t} catch (IOException e) {\n\t\t\tfail(\"Unable to build catalog bytes\");\n\t\t\treturn null;\n\t\t}", "answers": ["\t\t\tClientConfig clientConfig = new ClientConfig();  //keep bits small or the test will take a very long time to run.              "], "all_classes": null, "length": 11914}
{"pred": "       List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new CurrencyRegistryModule());\n        modules.add(new LoanModule());\n        modules.forEach(module -> {\n            if (module.initialize(logger, container))", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "   protected VulnDescriptionDocumentListener descriptionDocumentListener;\n    protected VulnRecommendationDocumentListener recommendationDocumentListener;\n\n    public MainWindow() {\n        initComponents();\n        // Set the font size\n        this.setFont(new Font(\"SansSerif\", Font", "answers": ["    protected VulnDescriptionDocumentListener descriptionDocumentListener;"], "all_classes": null, "length": 8881}
{"pred": "\n        # verify box11 is in the parent frame\n        self.assertTrue(self.mc.targets['default'].parent_widgets[0].widget.text == 'box11')\n\n        # make sure the parent frame is the highest priority in the list\n        self.assertEqual", "answers": ["            'default'].parent_widgets[0], WidgetContainer))"], "all_classes": null, "length": 9203}
{"pred": "\t\twhen(source.getInputFormatName()).thenReturn(\"jpg\");\n\n\t\tImageSink sink = mock(ImageSink.class);\n\t\twhen(sink.getSink()).thenReturn(new ByteArrayOutputStream());\n\n\t\tThumbnailTask<ImageSource<File>,", "answers": ["\t\twhen(source.read()).thenReturn(new BufferedImageBuilder(100, 100).build());"], "all_classes": null, "length": 12670}
{"pred": "\t\tif (options != ERT.NIL) {\n\t\t\tthrow ERT.badarg(options);\n\t\t}\n\n\t\tEAtom name;\n\t\tif ((name = ref.testAtom()) != null) {\n\t\t\tEHandle h =", "answers": ["\t\treturn demonitor((ETask<?>)self, ref, options);"], "all_classes": null, "length": 16841}
{"pred": "       self.ax.text(10, self.current_ff.nrows, text_str, color=font_color, verticalalignment='bottom', \\\n            horizontalalignment='left', fontproperties=font)\n\nThis line of code is used to display the plate information on the", "answers": ["            sign, hh, mm, ss = decimalDegreesToSexHours(ra_centre)"], "all_classes": null, "length": 8691}
{"pred": "           Columns.Factory.LAYER_TYPE,\n            \"align-inside\", \"align-outside\", \"bottom\", \"color\", \"count\", \"distance\", \"fill\", \"from\",\n            \"gravity\", \"height\", \"left\", \"margin\", \"offset\", \"percent\",", "answers": ["            Columns.Factory.LAYER_TYPE,"], "all_classes": null, "length": 10269}
{"pred": "\t\tprogressMenu.setProgressTitle(title);\n\t}\n\n\tpublic void setProgressText(String text) {\n\t\tprogressMenu.setProgressText(text);\n\t}\n\n\tpublic void setProgress(int progress) {\n\t\tprogressMenu.setProgress(progress", "answers": ["\t\t((ProgressMenu) menu).setProgressTitle(title);"], "all_classes": null, "length": 13065}
{"pred": "\t\t\tnew ThumbnailParameterBuilder()\n\t\t\t\t.size(100, 100)\n\t\t\t\t.outputFormat(\"png\")\n\t\t\t\t.build();\n\n\t\tFile source = TestUtils.createTempFile(\"source.png\");", "answers": ["\t\t\tnew ThumbnailParameterBuilder()"], "all_classes": null, "length": 12659}
{"pred": "\n        self.toastMachine = PesterToastMachine(self, extraToasts)\n\nThis line of code creates an instance of PesterToastMachine, which is a class that manages the display of toast notifications. The instance is named `toastMachine` and it takes the current", "answers": ["        if pytwmn.confExists():"], "all_classes": null, "length": 9080}
{"pred": "\n\t\tList<Submissions> allsub = submissionServices.getAllSubmissions();\n\t\tList<SubmissionList> allsublist = new ArrayList<SubmissionList>();\n\t\tfor (Submissions sb:allsub) {\n\t\t\tSubmissionList aobj", "answers": ["\t\tArrayList<CateProcess> process = new ArrayList<CateProcess>();"], "all_classes": null, "length": 11336}
{"pred": "\t\t\tthis.perceptSequence = new ArrayList<Percept>();\n\t\t\tthis.metadata = new Metadata(a.getName(), b.getName(), pitch);\n\t\t\tthis.turnLimit = perceptLimit;\n\t\t\tthis.numberOfPlayers = numberOfPlay", "answers": ["\t\t\tthis.turnLimit = perceptLimit / Enums.DEFAULT_TURN_RATIO;"], "all_classes": null, "length": 10740}
{"pred": "\n    private IApolloService mService;\n\n    private ServiceToken mServiceToken;\n\n    private ViewPager mViewPager;\n\n    private PagerAdapter mPagerAdapter;\n\n    private SlidingUpPanelLayout mSlidingLayout;\n\n    private B", "answers": ["    private ServiceToken mToken;"], "all_classes": null, "length": 13200}
{"pred": "               Log.d(this.getClass().getSimpleName(), \"MessageKey successfully decrypted and stored\");\n            } catch (Exception e) {\n                Log.e(this.getClass().getSimpleName(), \"Error while decrypting messageKey\");\n            }\n        } else {", "answers": ["                MessageKeyTask.getInstance().deleteKey(messageKey.getId());"], "all_classes": null, "length": 10021}
{"pred": "               gitdir=gitdir,\n                objdir=os.path.join(self.manifest.topdir, path, 'objects'),\n                worktree=os.path.join(self.manifest.topdir, path),\n                relpath=path,\n", "answers": ["                remote=RemoteSpec('origin'),"], "all_classes": null, "length": 11315}
{"pred": "       return new ElasticSqlExprParser(query).parseQuery();\n    }\n\n    private SearchDao getSearchDao() {\n        Settings settings = Settings.builder()\n                .put(\"cluster.name\", \"elasticsearch\")\n                .put(\"client.transport.sniff\", true", "answers": ["        return new ElasticSqlExprParser(query).expr();"], "all_classes": null, "length": 8721}
{"pred": "       float y = Gdx.graphics.getHeight() - Gdx.input.getY();\n        point.set(x, y);\n        Vector3 worldPoint = cam.unproject(point);\n        debugGlyph.setText(debugFont, \"Mouse: \" + worldPoint.", "answers": ["        Utility.guiPositionToGamePosition(x, y, this, point);"], "all_classes": null, "length": 14166}
{"pred": "\n\tpublic static Var var(Attribute... attributes) {\n\t\treturn new Var(attributes);\n\t}\n\nThis line of code creates a new instance of the Var class, which is a tag in HTML. The Var tag is used to define a variable in a document, and it is often used", "answers": ["\tpublic static Var var(Attribute... attributes) {"], "all_classes": null, "length": 8086}
{"pred": "   obj.blockShape = InfixBlockShape(obj)\n\n    #obj.blockShape = BlockShape(obj)\n\n    #obj.blockShape.reformArea()\n\n    #obj.blockShape.setBlock(block)\n\n    #obj.blockShape.set", "answers": ["            obj.blockShape = InfixBlockShape(obj);"], "all_classes": null, "length": 9272}
{"pred": "\nclass Layer3NAS(Layer3):\n\ndefines a new class Layer3NAS, which inherits from Layer3.\n\nThe Layer3NAS class is used to handle Layer 3 NAS messages, which are used in the Evolved Packet System (", "answers": ["class ESMHeader(Layer):"], "all_classes": null, "length": 9025}
{"pred": "\n\tpublic static Em em(Attribute... attributes) {\n\t\treturn new Em(attributes);\n\t}\n\n\tpublic static Fieldset fieldset(Attribute... attributes) {\n\t\treturn new Fieldset(attributes);\n\t}\n\n\tpublic static Form form(Attribute... attributes)", "answers": ["\tpublic static Em em(Attribute... attributes) {"], "all_classes": null, "length": 8118}
{"pred": "\t\tpublic final int i1;\n\t\tpublic final int i2;\n\t\tpublic AAI(BeamOpcode opcode, int i1, int i2) {\n\t\t\tsuper(opcode);\n\t\t\tthis.i1 = i1;\n\t\t\tthis", "answers": ["\t\tpublic final Atom a1,a2;"], "all_classes": null, "length": 10686}
{"pred": "\tpublic void setType( final RpmType type) {\n\t\tformat.getHeader().createEntry( RPM_TYPE, type.name());\n\t}\n\n\t/**\n\t * <b>Required Field</b>. Sets the architecture of the RPM.\n\t *\n\t", "answers": ["\tpublic void setType( final RpmType type) {"], "all_classes": null, "length": 10687}
{"pred": "```\n        return PlayQueue.create(self, item, **kwargs)\n```\n\nThis line creates a new `PlayQueue` object using the `create` class method of the `PlayQueue` class. The `create` method takes the `self` (the current `PlexServer", "answers": ["        return PlayQueue.create(self, item, **kwargs)"], "all_classes": null, "length": 10319}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                ImageSizeSelectionDialogFragment fragment = (ImageSizeSelectionDialogFragment) fm.findFragmentByTag(TAG_FRAGMENT_IMAGE_SIZE_DIALOG);\n\n                                if (fragment != null) {\n                                    fragment.setEntries(Arrays.asList", "answers": ["                                ImageSizeSelectionDialogFragment fragment = (ImageSizeSelectionDialogFragment) fm.findFragmentByTag(TAG_FRAGMENT_IMAGE_SIZE_DIALOG);"], "all_classes": null, "length": 9821}
{"pred": "   public boolean canBeKilledByJumpingOnTop()\n    {\n        return true;\n    }\n\n    public boolean canBeKilledByJumpingOnTop(Maryo mario)\n    {\n        return canBeKilledByJumpingOnTop();", "answers": ["    public int hitByPlayer(Maryo maryo, boolean vertical)"], "all_classes": null, "length": 10553}
{"pred": "       if (oldBloomDir.canRead() && oldBloomDir.canWrite()) return false;\n        return true;\n    }\n\n    private void loadFromDirectories(File[] booksDirs, Activity activity) {\n        List<File> bloomPubs = new ArrayList", "answers": ["        if (BaseActivity.haveLegacyStoragePermission(context)) return false; // we can access it with legacy permission."], "all_classes": null, "length": 10245}
{"pred": "\tpublic void update (ItemLibrary<Item> library)\n\t{\n\t\tState state;\n\n\t\tstate = new State ();\n\t\tstate.loadResources (rd);\n\n\t\tnetwe.get (mtype, library, state);\n\t}\n\n\tprivate void", "answers": ["\tpublic State startUpdate (UserInformation ui, EnumSet<Item.Type> type)"], "all_classes": null, "length": 10194}
{"pred": "\t\tdouble[] minXY = new double[] { lon - distanceInMeters, lat\n\t\t\t\t- distanceInMeters };\n\t\tdouble[] maxXY = new double[] { lon + distanceInMeters, lat\n\t\t\t\t+ distanceInMeters };\n\n\t", "answers": ["\t\tdouble[] bbox = Calculator.boundingCoordinates(lon, lat,"], "all_classes": null, "length": 8212}
{"pred": "\t\tQueueStatus queueStatus = new QueueStatus(title, fileName, thumbUrl, progress, eta, elapsed, status);", "answers": ["\tprivate UpdateInfo getUpdateInfoByConfig() throws WithDumpException {\r"], "all_classes": null, "length": 8743}
{"pred": "=====================\n\n                    # Binary Analysis\n                    bin_an_dic = {}\n                    bin_an_dic['dex_2_jar'] = dex_2_jar(\n                        app_dic['app_path'],\n                        app_d", "answers": ["                    apkid_results = apkid_analysis(app_dic["], "all_classes": null, "length": 11062}
{"pred": "```python\r\nclass LAI(Layer):\n    constructorList = [\n        PLMN(),\n        Int('LAC', Pt=0, Type='uint16', Repr='hex')\n        ]\n```\n\r\n# section 9.2.13", "answers": ["class IMSI_DETACH_INDICATION(Layer3):\r"], "all_classes": null, "length": 8403}
{"pred": "           self.view.widgets.plant_loc_edit_button.set_sensitive(True)\n\n            self.view.widgets.plant_loc_edit_button.connect(\n                'clicked', self.on_plant_location_edit_button_clicked", "answers": ["            LocationEditor(location, parent=self.view.get_window()).start()"], "all_classes": null, "length": 9452}
{"pred": "       DocumentDialog(self, PlanningModifications(site, date)).ShowModal()\n\n    def OnGenerationPlanningHoraire(self, _):\n        site = self.GetSelectedSite()\n        date = self.planning_horaire_choice.GetClientData(self.pl", "answers": ["        DocumentDialog(self, PlanningModifications(site, date)).ShowModal()"], "all_classes": null, "length": 9587}
{"pred": "\n    def addItems(self, items):\n        \"\"\" Add items to the playlist.\n\n            Parameters:\n                items (List): List of :class:`~plexapi.audio.Audio`, :class:`~plexapi.video.Video`,\n                    or :class:`~", "answers": ["    @deprecated('use \"removeItems\" instead', stacklevel=3)"], "all_classes": null, "length": 9923}
{"pred": "```\ncat = Cat(\"Garfield\", \"male\", race=\"cat\", title=\"Garfield the cat\", short_descr=\"Garfield\")\n```\n\nThis creates a new cat named Garfield, which is a male cat of the cat race. The cat is given", "answers": ["    def notify_action(self, parsed: ParseResult, actor: Living) -> None:"], "all_classes": null, "length": 8208}
{"pred": "\tfor (Method m : mocks.getMethod())\n\tis missing a semicolon at the end of the line.\n\tIt should be:\n\tfor (Method m : mocks.getMethod());\n\t\r\n\tfor (Method m : mocks.getMethod()) {\r\n", "answers": ["\tfor (Method tmlMockMethod : mocks.getMethod()) {\r"], "all_classes": null, "length": 13095}
{"pred": "\tpublic final ClasspathUtil cp = new ClasspathUtil();\n\tpublic final LogUtil log = LogUtil.getLogger(Util.class);\n\tpublic final MathUtil math = new MathUtil();\n\tpublic final ExceptionsUtil ex = new ExceptionsUtil();\n\tpublic final MiscUtil", "answers": ["\tpublic final ClasspathUtil cp = new ClasspathUtil();"], "all_classes": null, "length": 8603}
{"pred": "               AuthenticateFragment.class,\n                Authenticator.class,\n                CreateAccountFragment.class,\n                OAuthActivity.class,\n                OhmletActivity.class,\n                SurveyActivity.class,\n                HomeFragment.class,\n              ", "answers": ["                AuthenticateFragment.class,"], "all_classes": null, "length": 10557}
{"pred": "\n    Bit('Year', Pt=0, BitLen=7, Repr='hum', Dict=TP_YEAR_dict),\n\nshould be:\n\n    Bit('Year', Pt=0, BitLen=7, Repr='hum', Dict=TP_Y", "answers": ["        StrBCD('Year', Len=1),\r"], "all_classes": null, "length": 8703}
{"pred": "\n        # stop the mode\n        self.mc.modes['mode1'].stop()\n        self.advance_time()\n\n        # make sure the new widget is removed from the parent frame\n        self.assertNotIn('widget6', [x.widget.text for x in", "answers": ["            'default'].parent_widgets[0].widget, Text))"], "all_classes": null, "length": 9175}
{"pred": "   public static Set<CItem> items = new LinkedHashSet<CItem>();\n    public static Set<CEnchantment> enchantments = new LinkedHashSet<CEnchantment>();\n\n    public static HashMap<String, HashMap<CItem, Integer>> cooldown = new", "answers": ["    public static Set<CItem> items;"], "all_classes": null, "length": 8304}
{"pred": "           BluetoothController.getInstance().register(this);\n        }\n\n        // register sensors\n        SensorCollectorManager scm = SensorCollectorManager.getInstance();\n        scm.registerSensorCollectors();\n\n        // register custom collectors\n        CustomCollectorFactory.register", "answers": ["            BluetoothController.getInstance().register(this);"], "all_classes": null, "length": 11016}
{"pred": "\t\treturn template.get().getProvider().transceive(new CommandApdu(CommandEnum.SELECT, pAid, 0, 0));\n\t}\n\n\t/**\n\t * Read record\n\t *\n\t * @param pFileId\n\t *            file identifier\n\t", "answers": ["\t\treturn template.get().getProvider().transceive(new CommandApdu(CommandEnum.SELECT, pAid, 0).toBytes());"], "all_classes": null, "length": 13176}
{"pred": "\n\t\t\t\tPlatform.runLater(new Runnable() {\r\n\t\t\t\t{\n\t\t\t\t\tFile file = new File(config.getDefaultBeatmapSaveLocation())\r\n\t\t\t\t\tif (file.exists()) {\r\n\t\t\t\t\t", "answers": ["\t\t        String configPath = Osumer.isWindows() ? System.getenv(\"localappdata\") + \"\\\\osumerExpress\" : \"\";\r"], "all_classes": null, "length": 8655}
{"pred": "\n        List<String[]> result4 = SQLDBController.getInstance().query(\"SELECT name FROM \" + SQLTableName.ACTIVITIES + \" WHERE endtime = 0\", null, false);\n\nThis line of code is querying the database for all activities that have not ended yet (", "answers": ["        ActivityListRowAdapter activityAdapter = new ActivityListRowAdapter(this, ActivityList);"], "all_classes": null, "length": 11257}
{"pred": "\n        byte[] data = Utils.objectToCompressedByteArray(wls);\n        Intent intent = new Intent(SensorDataCollectorService.ACTION_WEAR_STARTED);\n        intent.putExtra(\"data\", data);\n        SensorDataCollectorService.getInstance().send", "answers": ["        String data = StringUtils.convertByteArrayToString(rawData);"], "all_classes": null, "length": 10622}
{"pred": "```\nexit_livingroom_closet = Door(\"closet\", closet, \"a small closet\", locked=True, key_code=\"1234\")\n```\n\nThis creates a door exit from the living room to the closet, which is locked and requires the key with code", "answers": ["door = Door("], "all_classes": null, "length": 8102}
{"pred": "\n\tpublic static Html html(Attribute... attributes) {\n\t\treturn new Html(attributes);\n\t}\n\nThis line of code creates a new instance of the Html class, which represents the HTML tag, and initializes it with the given attributes. The Html class is a sub", "answers": ["\tpublic static Hr hr(Attribute... attributes) {"], "all_classes": null, "length": 8086}
